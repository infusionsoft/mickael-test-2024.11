name: Publish Java SDK to Maven Central

on:
  release:
    types: [published]
  # Test
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.release.tag_name || 'snapshot' }}
      url: ${{ github.event.release.tag_name && format('https://central.sonatype.com/artifact/com.keap.core/keap-core-v2-sdk/{0}', github.event.release.tag_name) || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      ######################################################
      ### Java and Gradle
      ######################################################

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate Gradle Wrapper
        working-directory: sdks/v2/java
        run: |
          gradle wrapper
          chmod +x ./gradlew

      - name: Make gradlew executable
        working-directory: sdks/v2/java
        run: chmod +x ./gradlew

      - name: Setup OSSRH init script
        working-directory: sdks/v2/java
        run: |
          cat <<EOF > ossrh-init.gradle
          initscript {
            repositories {
                maven {
                    url "https://plugins.gradle.org/m2/"
                }
            }
            dependencies {
                classpath "io.github.gradle-nexus:publish-plugin:2.0.0"
            }
          }

          rootProject {
              apply plugin: io.github.gradlenexus.publishplugin.NexusPublishPlugin

              nexusPublishing {
                  repositories {
                      sonatype {
                          username = System.getenv("SONATYPE_USERNAME")
                          password = System.getenv("SONATYPE_PASSWORD")
                      }
                  }
              }
          }
          EOF

      - name: Build Java SDK
        working-directory: sdks/v2/java
        run: ./gradlew build

      - name: Publish Java SDK
        working-directory: sdks/v2/java
        run: ./gradlew publishToMavenLocal

      - name: Debug artifacts
        run: ls -lR sdks/v2/java/build

      ######################################################
      ### GPG
      ######################################################

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Show imported GPG keys
        run: |
          echo "Available GPG secret keys:"
          gpg --list-secret-keys --keyid-format LONG
        
      - name: GPG Sign Artifacts
        run: |
          echo "Signing files in sdks/v2/java/build ..."
          for file in $(find sdks/v2/java/build -type f \( -name "*.jar" -o -name "*.pom" \)); do
            echo "Signing $file"
            gpg --batch --yes --pinentry-mode loopback \
              --local-user "$GPG_KEY_ID" \
              --passphrase "$GPG_PASSPHRASE" \
              --armor --output "$file.asc" --detach-sign "$file"
          done

          echo "Signing POM file in $HOME/.m2/repository/com/keap/core/keap-sdk-core-v2/$VERSION ..."
          VERSION=$(basename sdks/v2/java/build/libs/keap-sdk-core-v2-*.jar | sed 's/keap-sdk-core-v2-//; s/.jar//')
          POM_PATH="$HOME/.m2/repository/com/keap/core/keap-sdk-core-v2/$VERSION/keap-sdk-core-v2-$VERSION.pom"
          gpg --batch --yes --pinentry-mode loopback \
            --local-user "$GPG_KEY_ID" \
            --passphrase "$GPG_PASSPHRASE" \
            --armor --output "$POM_PATH.asc" --detach-sign "$POM_PATH"

        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      ######################################################
      ### Create and upload bundle
      ######################################################

      - name: Create bundle structure and zip
        run: |
          VERSION=$(basename sdks/v2/java/build/libs/keap-sdk-core-v2-*.jar | sed 's/keap-sdk-core-v2-//; s/.jar//')
          mkdir -p bundle/com/keap/core/keap-sdk-core-v2/$VERSION
          cp sdks/v2/java/build/libs/keap-sdk-core-v2-$VERSION.jar bundle/com/keap/core/keap-sdk-core-v2/$VERSION/
          cp sdks/v2/java/build/libs/keap-sdk-core-v2-$VERSION.jar.asc bundle/com/keap/core/keap-sdk-core-v2/$VERSION/
          cp ~/.m2/repository/com/keap/core/keap-sdk-core-v2/$VERSION/keap-sdk-core-v2-$VERSION.pom bundle/com/keap/core/keap-sdk-core-v2/$VERSION/
          cp ~/.m2/repository/com/keap/core/keap-sdk-core-v2/$VERSION/keap-sdk-core-v2-$VERSION.pom.asc bundle/com/keap/core/keap-sdk-core-v2/$VERSION/
          cd bundle
          for f in $(find . -type f); do
            md5sum "$f" > "$f.md5"
            shasum -a 1 "$f" > "$f.sha1"
          done
          cd ..
          zip -r central-bundle.zip bundle


      - name: Upload bundle to Sonatype Central API
        run: |
          AUTH=$(printf "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" | base64)

          ######################################################### TEMP
          echo "USERNAME=$SONATYPE_USERNAME"
          echo "TOKEN (base64): $(printf "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" | base64)"
          export RAW_USER="$AUTH"
          echo "Unmasked USER=$RAW_USER"
          ######################################################### TEMP

          # Upload the bundle and capture the deploymentId
          RESPONSE=$(curl --silent --request POST \
            --header "Authorization: Bearer $AUTH" \
            --form bundle=@central-bundle.zip \
            https://central.sonatype.com/api/v1/publisher/upload)

          echo "Response: $RESPONSE"

          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.deploymentId')

          if [[ "$DEPLOY_ID" == "null" || -z "$DEPLOY_ID" ]]; then
            echo "❌ Failed to retrieve deploymentId"
            echo "Retrieved: $RESPONSE"
            echo "Token: $AUTH"
            echo "user: $SONATYPE_USERNAME"
            exit 1
          fi

          # Verify the deployment status
          for i in {1..10}; do
            STATUS=$(curl --silent --request GET \
              --header "Authorization: Bearer $AUTH" \
              "https://central.sonatype.com/api/v1/publisher/status?id=$DEPLOY_ID" | jq -r '.deploymentState')

            echo "Attempt $i: Deployment status = $STATUS"

            if [[ "$STATUS" == "PUBLISHED" ]]; then
              echo "✅ Deployment successful!"
              exit 0
            elif [[ "$STATUS" == "FAILED" ]]; then
              echo "❌ Deployment failed"
              exit 1
            fi

            sleep 15
          done

          echo "❌ Deployment did not reach PUBLISHED state in time."
          exit 1
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      # - name: Test OSSRH Credentials
      #   run: |
      #     http_code=$(curl -i -u "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" -o /dev/null -s -w "%{http_code}" https://oss.sonatype.org/service/local/staging/profiles)
      #     if [ "$http_code" -ne 200 ]; then
      #       echo "Error: Received HTTP status code $http_code"
      #       exit 1
      #     fi
      #   env:
      #     SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      #     SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      # - name: Publish to Maven Central (via OSSRH)
      #   working-directory: sdks/v2/java
      #   run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository --init-script ossrh-init.gradle
      #   env:
      #     SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      #     SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
      #     GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      #     GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      #     GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

