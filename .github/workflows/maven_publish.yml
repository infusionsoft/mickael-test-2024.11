name: Publish Java SDK to Maven Central

on:
  release:
    types: [published]
  # Test
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.release.tag_name || 'snapshot' }}
      url: ${{ github.event.release.tag_name && format('https://central.sonatype.com/artifact/com.keap.core/keap-core-v2-sdk/{0}', github.event.release.tag_name) || '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Generate Gradle Wrapper
        working-directory: sdks/v2/java
        run: |
          gradle wrapper
          chmod +x ./gradlew

      - name: Make gradlew executable
        working-directory: sdks/v2/java
        run: chmod +x ./gradlew

      - name: Setup OSSRH init script
        working-directory: sdks/v2/java
        run: |
          cat <<EOF > ossrh-init.gradle
          initscript {
            repositories {
                maven {
                    url "https://plugins.gradle.org/m2/"
                }
            }
            dependencies {
                classpath "io.github.gradle-nexus:publish-plugin:2.0.0"
            }
          }

          rootProject {
              apply plugin: io.github.gradlenexus.publishplugin.NexusPublishPlugin

              nexusPublishing {
                  repositories {
                      sonatype {
                          username = System.getenv("SONATYPE_USERNAME")
                          password = System.getenv("SONATYPE_PASSWORD")
                      }
                  }
              }
          }
          EOF

      - name: Debug available tasks
        working-directory: sdks/v2/java
        run: ./gradlew tasks --all --init-script ossrh-init.gradle
      
      - name: Build Java SDK
        working-directory: sdks/v2/java
        run: ./gradlew build

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Show imported GPG keys
        run: |
          echo "Available GPG secret keys:"
          gpg --list-secret-keys --keyid-format LONG
        
      - name: Debug artifacts
        run: ls -lR sdks/v2/java/build

      - name: GPG Sign Artifacts
        run: |
          echo "Signing .jar and .pom files..."
          for file in $(find sdks/v2/java/build -type f \( -name "*.jar" -o -name "*.pom" \)); do
            echo "Signing $file"
            gpg --batch --yes --pinentry-mode loopback \
              --local-user "$GPG_KEY_ID" \
              --passphrase "$GPG_PASSPHRASE" \
              --armor --output "$file.asc" --detach-sign "$file"
          done
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Test OSSRH Credentials
        run: |
          http_code=$(curl -i -u "$SONATYPE_USERNAME:$SONATYPE_PASSWORD" -o /dev/null -s -w "%{http_code}" https://oss.sonatype.org/service/local/staging/profiles)
          if [ "$http_code" -ne 200 ]; then
            echo "Error: Received HTTP status code $http_code"
            exit 1
          fi
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: Publish to Maven Central (via OSSRH)
        working-directory: sdks/v2/java
        run: ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository --init-script ossrh-init.gradle
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
