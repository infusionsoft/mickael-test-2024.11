/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate AddAffiliateUsingPOST(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> AddAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate GetAffiliateUsingGET1(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> GetAffiliateUsingGET1WithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate UpdateAffiliateUsingPATCH(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> UpdateAffiliateUsingPATCHWithHttpInfo(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse UpdateCommissionProgramUsingPATCH(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> UpdateCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> AddAffiliateUsingPOSTAsync(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> AddAffiliateUsingPOSTWithHttpInfoAsync(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> GetAffiliateUsingGET1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> GetAffiliateUsingGET1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateUsingPATCHAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> UpdateAffiliateUsingPATCHWithHttpInfoAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> UpdateCommissionProgramUsingPATCHAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> UpdateCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApi : IAffiliateApiSync, IAffiliateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AffiliateApi : IAffiliateApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AffiliateApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AffiliateApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate AddAffiliateUsingPOST(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = AddAffiliateUsingPOSTWithHttpInfo(createAffiliateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> AddAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> AddAffiliateUsingPOSTAsync(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await AddAffiliateUsingPOSTWithHttpInfoAsync(createAffiliateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAffiliateRequest">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> AddAffiliateUsingPOSTWithHttpInfoAsync(CreateAffiliateRequest? createAffiliateRequest = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate GetAffiliateUsingGET1(string id, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = GetAffiliateUsingGET1WithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> GetAffiliateUsingGET1WithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliateUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> GetAffiliateUsingGET1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await GetAffiliateUsingGET1WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> GetAffiliateUsingGET1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliateUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate UpdateAffiliateUsingPATCH(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = UpdateAffiliateUsingPATCHWithHttpInfo(id, updateAffiliateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> UpdateAffiliateUsingPATCHWithHttpInfo(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliateUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateUsingPATCHAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await UpdateAffiliateUsingPATCHWithHttpInfoAsync(id, updateAffiliateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="updateAffiliateRequest">Request to update an affiliate (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> UpdateAffiliateUsingPATCHWithHttpInfoAsync(string id, UpdateAffiliateRequest? updateAffiliateRequest = default(UpdateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliateUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateAffiliateRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse UpdateCommissionProgramUsingPATCH(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = UpdateCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateCommissionProgramRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> UpdateCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateCommissionProgramUsingPATCH");
            }

            // verify the required parameter 'updateCommissionProgramRequest' is set
            if (updateCommissionProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCommissionProgramRequest' when calling AffiliateApi->UpdateCommissionProgramUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> UpdateCommissionProgramUsingPATCHAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await UpdateCommissionProgramUsingPATCHWithHttpInfoAsync(commissionProgramId, updateCommissionProgramRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateCommissionProgramRequest">updateCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse>> UpdateCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, UpdateCommissionProgramRequest updateCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->UpdateCommissionProgramUsingPATCH");
            }

            // verify the required parameter 'updateCommissionProgramRequest' is set
            if (updateCommissionProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCommissionProgramRequest' when calling AffiliateApi->UpdateCommissionProgramUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
