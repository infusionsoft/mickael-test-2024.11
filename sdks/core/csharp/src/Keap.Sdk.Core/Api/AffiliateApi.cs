/*
 * Keap REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.736468-hf-202411121210
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddAffiliateToProgramUsingPOST_0(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAffiliateToProgramUsingPOST_0WithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate AddAffiliateUsingPOST(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> AddAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse AddCommissionProgramUsingPOST_0(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOST_0WithHttpInfo(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram AssignProductCommissionProgramUsingPOST_0(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram AssignSubscriptionCommissionProgramUsingPOST_0(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateAffiliateCustomFieldUsingPOST_0(CreateCustomFieldRequest customField, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOST_0WithHttpInfo(CreateCustomFieldRequest customField, int operationIndex = 0);
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse CreateDefaultCommissionProgramUsingPOST_0(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink CreateRedirectLinkUsingPOST_0(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> CreateRedirectLinkUsingPOST_0WithHttpInfo(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0);
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateCommissionProgramUsingDELETE_0(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateUsingDELETE_0(string id, int operationIndex = 0);

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateUsingDELETE_0WithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRedirectLinkUsingDELETE_0(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRedirectLinkUsingDELETE_0WithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        AffiliateCommissionEarned GetAffiliateCommissionTotalUsingGET_0(string affiliateId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGET_0WithHttpInfo(string affiliateId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionResponse</returns>
        ListAffiliateCommissionResponse GetAffiliateCommissionsUsingGET_0(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionResponse</returns>
        ApiResponse<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGET_0WithHttpInfo(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel GetAffiliateCustomFieldsUsingGET_0(int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> GetAffiliateCustomFieldsUsingGET_0WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate GetAffiliateUsingGET1(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> GetAffiliateUsingGET1WithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        AffiliateProgramV2 GetCommissionProgramUsingGET_0(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        ApiResponse<AffiliateProgramV2> GetCommissionProgramUsingGET_0WithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink GetRedirectLinkUsingGET_0(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> GetRedirectLinkUsingGET_0WithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        ListAffiliateCommissionProgramsResponse ListAffiliateCommissionProgramsUsingGET_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGET_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        ListAffiliateLinksResponse ListAffiliateLinksUsingGET_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksUsingGET_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        ListAffiliateSummariesResponse ListSummariesUsingGET1_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        ApiResponse<ListAffiliateSummariesResponse> ListSummariesUsingGET1_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse PatchCommissionProgramUsingPATCH(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> PatchCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse PatchDefaultCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram PatchProductCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram PatchSubscriptionCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAffiliateFromProgramUsingPOST_0(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAffiliateFromProgramUsingPOST_0WithHttpInfo(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateAffiliateCustomFieldUsingPATCH_0(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        RestAffiliate UpdateAffiliateUsingPATCH(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        ApiResponse<RestAffiliate> UpdateAffiliateUsingPATCHWithHttpInfo(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink UpdateRedirectLinkUsingPATCH_0(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> UpdateRedirectLinkUsingPATCH_0WithHttpInfo(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAffiliateToProgramUsingPOST_0Async(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAffiliateToProgramUsingPOST_0WithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> AddAffiliateUsingPOSTAsync(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> AddAffiliateUsingPOSTWithHttpInfoAsync(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOST_0Async(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramUsingPOST_0WithHttpInfoAsync(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOST_0Async(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldUsingPOST_0WithHttpInfoAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkUsingPOST_0Async(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> CreateRedirectLinkUsingPOST_0WithHttpInfoAsync(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateCommissionProgramUsingDELETE_0Async(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateUsingDELETE_0Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateUsingDELETE_0WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRedirectLinkUsingDELETE_0Async(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRedirectLinkUsingDELETE_0WithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGET_0Async(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalUsingGET_0WithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGET_0Async(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionResponse>> GetAffiliateCommissionsUsingGET_0WithHttpInfoAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsUsingGET_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> GetAffiliateCustomFieldsUsingGET_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> GetAffiliateUsingGET1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Affiliate
        /// </summary>
        /// <remarks>
        /// Retrieves a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> GetAffiliateUsingGET1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramUsingGET_0Async(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateProgramV2>> GetCommissionProgramUsingGET_0WithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkUsingGET_0Async(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> GetRedirectLinkUsingGET_0WithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGET_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsUsingGET_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksUsingGET_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksUsingGET_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesUsingGET1_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateSummariesResponse>> ListSummariesUsingGET1_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> PatchCommissionProgramUsingPATCHAsync(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Updates the properties of an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> PatchCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> PatchProductCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAffiliateFromProgramUsingPOST_0Async(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAffiliateFromProgramUsingPOST_0WithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0Async(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCH_0Async(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateUsingPATCHAsync(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Affiliate
        /// </summary>
        /// <remarks>
        /// Updates a single Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestAffiliate>> UpdateAffiliateUsingPATCHWithHttpInfoAsync(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkUsingPATCH_0Async(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> UpdateRedirectLinkUsingPATCH_0WithHttpInfoAsync(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAffiliateApi : IAffiliateApiSync, IAffiliateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AffiliateApi : IAffiliateApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AffiliateApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AffiliateApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AffiliateApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AffiliateApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddAffiliateToProgramUsingPOST_0(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            AddAffiliateToProgramUsingPOST_0WithHttpInfo(id, affiliateAddToProgramRequest);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> AddAffiliateToProgramUsingPOST_0WithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->AddAffiliateToProgramUsingPOST_0");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling AffiliateApi->AddAffiliateToProgramUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateToProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAffiliateToProgramUsingPOST_0Async(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddAffiliateToProgramUsingPOST_0WithHttpInfoAsync(id, affiliateAddToProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> AddAffiliateToProgramUsingPOST_0WithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->AddAffiliateToProgramUsingPOST_0");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling AffiliateApi->AddAffiliateToProgramUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateToProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate AddAffiliateUsingPOST(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = AddAffiliateUsingPOSTWithHttpInfo(insertAffiliate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> AddAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertAffiliate;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> AddAffiliateUsingPOSTAsync(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await AddAffiliateUsingPOSTWithHttpInfoAsync(insertAffiliate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Creates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertAffiliate">Affiliate request to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> AddAffiliateUsingPOSTWithHttpInfoAsync(CreateAffiliateRequest? insertAffiliate = default(CreateAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertAffiliate;

            localVarRequestOptions.Operation = "AffiliateApi.AddAffiliateUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestAffiliate>("/v2/affiliates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse AddCommissionProgramUsingPOST_0(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = AddCommissionProgramUsingPOST_0WithHttpInfo(insertCommissionProgram);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOST_0WithHttpInfo(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AddCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOST_0Async(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await AddCommissionProgramUsingPOST_0WithHttpInfoAsync(insertCommissionProgram, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="insertCommissionProgram">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramUsingPOST_0WithHttpInfoAsync(CreateCommissionProgramRequest? insertCommissionProgram = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = insertCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AddCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram AssignProductCommissionProgramUsingPOST_0(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = AssignProductCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, productCommissionProgram);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignProductCommissionProgramUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = productCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AssignProductCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await AssignProductCommissionProgramUsingPOST_0WithHttpInfoAsync(commissionProgramId, productCommissionProgram, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="productCommissionProgram">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? productCommissionProgram = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignProductCommissionProgramUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = productCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AssignProductCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram AssignSubscriptionCommissionProgramUsingPOST_0(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, subscriptionCommissionProgram);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignSubscriptionCommissionProgramUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = subscriptionCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AssignSubscriptionCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfoAsync(commissionProgramId, subscriptionCommissionProgram, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="subscriptionCommissionProgram">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? subscriptionCommissionProgram = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->AssignSubscriptionCommissionProgramUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = subscriptionCommissionProgram;

            localVarRequestOptions.Operation = "AffiliateApi.AssignSubscriptionCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateAffiliateCustomFieldUsingPOST_0(CreateCustomFieldRequest customField, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateAffiliateCustomFieldUsingPOST_0WithHttpInfo(customField);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOST_0WithHttpInfo(CreateCustomFieldRequest customField, int operationIndex = 0)
        {
            // verify the required parameter 'customField' is set
            if (customField == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customField' when calling AffiliateApi->CreateAffiliateCustomFieldUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customField;

            localVarRequestOptions.Operation = "AffiliateApi.CreateAffiliateCustomFieldUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomFieldUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOST_0Async(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateAffiliateCustomFieldUsingPOST_0WithHttpInfoAsync(customField, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldUsingPOST_0WithHttpInfoAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customField' is set
            if (customField == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customField' when calling AffiliateApi->CreateAffiliateCustomFieldUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customField;

            localVarRequestOptions.Operation = "AffiliateApi.CreateAffiliateCustomFieldUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomFieldUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse CreateDefaultCommissionProgramUsingPOST_0(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = CreateDefaultCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOST_0WithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->CreateDefaultCommissionProgramUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateDefaultCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOST_0Async(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await CreateDefaultCommissionProgramUsingPOST_0WithHttpInfoAsync(commissionProgramId, createDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramUsingPOST_0WithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->CreateDefaultCommissionProgramUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.CreateDefaultCommissionProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink CreateRedirectLinkUsingPOST_0(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = CreateRedirectLinkUsingPOST_0WithHttpInfo(request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> CreateRedirectLinkUsingPOST_0WithHttpInfo(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->CreateRedirectLinkUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.CreateRedirectLinkUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLinkUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkUsingPOST_0Async(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await CreateRedirectLinkUsingPOST_0WithHttpInfoAsync(request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> CreateRedirectLinkUsingPOST_0WithHttpInfoAsync(CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->CreateRedirectLinkUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.CreateRedirectLinkUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLinkUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateCommissionProgramUsingDELETE_0(string commissionProgramId, int operationIndex = 0)
        {
            DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo(commissionProgramId);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->DeleteAffiliateCommissionProgramUsingDELETE_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCommissionProgramUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgramUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateCommissionProgramUsingDELETE_0Async(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->DeleteAffiliateCommissionProgramUsingDELETE_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateCommissionProgramUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgramUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateUsingDELETE_0(string id, int operationIndex = 0)
        {
            DeleteAffiliateUsingDELETE_0WithHttpInfo(id);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteAffiliateUsingDELETE_0WithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->DeleteAffiliateUsingDELETE_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateUsingDELETE_0Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAffiliateUsingDELETE_0WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteAffiliateUsingDELETE_0WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->DeleteAffiliateUsingDELETE_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteAffiliateUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRedirectLinkUsingDELETE_0(string redirectId, int operationIndex = 0)
        {
            DeleteRedirectLinkUsingDELETE_0WithHttpInfo(redirectId);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteRedirectLinkUsingDELETE_0WithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->DeleteRedirectLinkUsingDELETE_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteRedirectLinkUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLinkUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRedirectLinkUsingDELETE_0Async(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteRedirectLinkUsingDELETE_0WithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteRedirectLinkUsingDELETE_0WithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->DeleteRedirectLinkUsingDELETE_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.DeleteRedirectLinkUsingDELETE_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLinkUsingDELETE_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        public AffiliateCommissionEarned GetAffiliateCommissionTotalUsingGET_0(string affiliateId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = GetAffiliateCommissionTotalUsingGET_0WithHttpInfo(affiliateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGET_0WithHttpInfo(string affiliateId, int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionTotalUsingGET_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionTotalUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotalUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGET_0Async(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = await GetAffiliateCommissionTotalUsingGET_0WithHttpInfoAsync(affiliateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalUsingGET_0WithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionTotalUsingGET_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionTotalUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotalUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionResponse</returns>
        public ListAffiliateCommissionResponse GetAffiliateCommissionsUsingGET_0(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> localVarResponse = GetAffiliateCommissionsUsingGET_0WithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGET_0WithHttpInfo(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionsUsingGET_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGET_0Async(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> localVarResponse = await GetAffiliateCommissionsUsingGET_0WithHttpInfoAsync(affiliateId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse>> GetAffiliateCommissionsUsingGET_0WithHttpInfoAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling AffiliateApi->GetAffiliateCommissionsUsingGET_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCommissionsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel GetAffiliateCustomFieldsUsingGET_0(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = GetAffiliateCustomFieldsUsingGET_0WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> GetAffiliateCustomFieldsUsingGET_0WithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCustomFieldsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFieldsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsUsingGET_0Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await GetAffiliateCustomFieldsUsingGET_0WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> GetAffiliateCustomFieldsUsingGET_0WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateCustomFieldsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFieldsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate GetAffiliateUsingGET1(string id, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = GetAffiliateUsingGET1WithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> GetAffiliateUsingGET1WithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliateUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> GetAffiliateUsingGET1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await GetAffiliateUsingGET1WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Retrieves a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> GetAffiliateUsingGET1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->GetAffiliateUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetAffiliateUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        public AffiliateProgramV2 GetCommissionProgramUsingGET_0(string commissionProgramId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> localVarResponse = GetCommissionProgramUsingGET_0WithHttpInfo(commissionProgramId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> GetCommissionProgramUsingGET_0WithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->GetCommissionProgramUsingGET_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetCommissionProgramUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgramUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        public async System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramUsingGET_0Async(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> localVarResponse = await GetCommissionProgramUsingGET_0WithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2>> GetCommissionProgramUsingGET_0WithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->GetCommissionProgramUsingGET_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetCommissionProgramUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgramUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink GetRedirectLinkUsingGET_0(string redirectId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = GetRedirectLinkUsingGET_0WithHttpInfo(redirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> GetRedirectLinkUsingGET_0WithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->GetRedirectLinkUsingGET_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetRedirectLinkUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLinkUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkUsingGET_0Async(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await GetRedirectLinkUsingGET_0WithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> GetRedirectLinkUsingGET_0WithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->GetRedirectLinkUsingGET_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "AffiliateApi.GetRedirectLinkUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLinkUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        public ListAffiliateCommissionProgramsResponse ListAffiliateCommissionProgramsUsingGET_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = ListAffiliateCommissionProgramsUsingGET_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGET_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateCommissionProgramsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionProgramsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGET_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = await ListAffiliateCommissionProgramsUsingGET_0WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsUsingGET_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateCommissionProgramsUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionProgramsUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        public ListAffiliateLinksResponse ListAffiliateLinksUsingGET_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = ListAffiliateLinksUsingGET_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksUsingGET_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateLinksUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinksUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksUsingGET_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = await ListAffiliateLinksUsingGET_0WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksUsingGET_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListAffiliateLinksUsingGET_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinksUsingGET_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        public ListAffiliateSummariesResponse ListSummariesUsingGET1_0(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = ListSummariesUsingGET1_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> ListSummariesUsingGET1_0WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListSummariesUsingGET1_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummariesUsingGET1_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesUsingGET1_0Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = await ListSummariesUsingGET1_0WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse>> ListSummariesUsingGET1_0WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "AffiliateApi.ListSummariesUsingGET1_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummariesUsingGET1_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse PatchCommissionProgramUsingPATCH(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = PatchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, patchCommissionProgramRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> PatchCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchCommissionProgramUsingPATCH");
            }

            // verify the required parameter 'patchCommissionProgramRequest' is set
            if (patchCommissionProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'patchCommissionProgramRequest' when calling AffiliateApi->PatchCommissionProgramUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> PatchCommissionProgramUsingPATCHAsync(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await PatchCommissionProgramUsingPATCHWithHttpInfoAsync(commissionProgramId, patchCommissionProgramRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Affiliate Commission Program Updates the properties of an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="patchCommissionProgramRequest">patchCommissionProgramRequest</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse>> PatchCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchCommissionProgramUsingPATCH");
            }

            // verify the required parameter 'patchCommissionProgramRequest' is set
            if (patchCommissionProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'patchCommissionProgramRequest' when calling AffiliateApi->PatchCommissionProgramUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse PatchDefaultCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchDefaultCommissionProgramUsingPATCH_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchDefaultCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDefaultCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfoAsync(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse>> PatchDefaultCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchDefaultCommissionProgramUsingPATCH_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchDefaultCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDefaultCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram PatchProductCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = PatchProductCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchProductCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchProductCommissionProgramUsingPATCH_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchProductCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProductCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await PatchProductCommissionProgramUsingPATCH_0WithHttpInfoAsync(commissionProgramId, updateMask, patchProductCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram>> PatchProductCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchProductCommissionProgramUsingPATCH_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchProductCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProductCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram PatchSubscriptionCommissionProgramUsingPATCH_0(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchSubscriptionCommissionProgramUsingPATCH_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchSubscriptionCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubscriptionCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCH_0Async(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfoAsync(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram>> PatchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling AffiliateApi->PatchSubscriptionCommissionProgramUsingPATCH_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.PatchSubscriptionCommissionProgramUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubscriptionCommissionProgramUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAffiliateFromProgramUsingPOST_0(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0)
        {
            RemoveAffiliateFromProgramUsingPOST_0WithHttpInfo(id, removeFromProgramRequest);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> RemoveAffiliateFromProgramUsingPOST_0WithHttpInfo(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->RemoveAffiliateFromProgramUsingPOST_0");
            }

            // verify the required parameter 'removeFromProgramRequest' is set
            if (removeFromProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'removeFromProgramRequest' when calling AffiliateApi->RemoveAffiliateFromProgramUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = removeFromProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveAffiliateFromProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAffiliateFromProgramUsingPOST_0Async(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveAffiliateFromProgramUsingPOST_0WithHttpInfoAsync(id, removeFromProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="removeFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> RemoveAffiliateFromProgramUsingPOST_0WithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest removeFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->RemoveAffiliateFromProgramUsingPOST_0");
            }

            // verify the required parameter 'removeFromProgramRequest' is set
            if (removeFromProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'removeFromProgramRequest' when calling AffiliateApi->RemoveAffiliateFromProgramUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = removeFromProgramRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveAffiliateFromProgramUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgramUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0Async(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfoAsync(commissionId, deleteSubscriptionPlanCommissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionId' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling AffiliateApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "AffiliateApi.RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateAffiliateCustomFieldUsingPATCH_0(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfo(customFieldId, request, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->UpdateAffiliateCustomFieldUsingPATCH_0");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->UpdateAffiliateCustomFieldUsingPATCH_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateCustomFieldUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomFieldUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCH_0Async(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfoAsync(customFieldId, request, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldUsingPATCH_0WithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling AffiliateApi->UpdateAffiliateCustomFieldUsingPATCH_0");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->UpdateAffiliateCustomFieldUsingPATCH_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateCustomFieldUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomFieldUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestAffiliate</returns>
        public RestAffiliate UpdateAffiliateUsingPATCH(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = UpdateAffiliateUsingPATCHWithHttpInfo(id, patchAffiliate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestAffiliate</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> UpdateAffiliateUsingPATCHWithHttpInfo(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliateUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchAffiliate;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestAffiliate</returns>
        public async System.Threading.Tasks.Task<RestAffiliate> UpdateAffiliateUsingPATCHAsync(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestAffiliate> localVarResponse = await UpdateAffiliateUsingPATCHWithHttpInfoAsync(id, patchAffiliate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Updates a single Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="patchAffiliate">Affiliate request to patch (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestAffiliate)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestAffiliate>> UpdateAffiliateUsingPATCHWithHttpInfoAsync(string id, PatchAffiliateRequest? patchAffiliate = default(PatchAffiliateRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling AffiliateApi->UpdateAffiliateUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchAffiliate;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateAffiliateUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestAffiliate>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink UpdateRedirectLinkUsingPATCH_0(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = UpdateRedirectLinkUsingPATCH_0WithHttpInfo(redirectId, request);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> UpdateRedirectLinkUsingPATCH_0WithHttpInfo(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->UpdateRedirectLinkUsingPATCH_0");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->UpdateRedirectLinkUsingPATCH_0");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateRedirectLinkUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLinkUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkUsingPATCH_0Async(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await UpdateRedirectLinkUsingPATCH_0WithHttpInfoAsync(redirectId, request, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="request">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> UpdateRedirectLinkUsingPATCH_0WithHttpInfoAsync(string redirectId, CreateOrPatchAffiliateLinkRequest request, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling AffiliateApi->UpdateRedirectLinkUsingPATCH_0");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling AffiliateApi->UpdateRedirectLinkUsingPATCH_0");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "AffiliateApi.UpdateRedirectLinkUsingPATCH_0";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLinkUsingPATCH_0", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
