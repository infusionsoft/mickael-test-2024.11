/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Contacts to Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddContactsToSequenceResponse</returns>
        AddContactsToSequenceResponse AddContactsToCampaignSequenceUsingPOST1(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0);

        /// <summary>
        /// Add Contacts to Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddContactsToSequenceResponse</returns>
        ApiResponse<AddContactsToSequenceResponse> AddContactsToCampaignSequenceUsingPOST1WithHttpInfo(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves a single campaign
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Campaign</returns>
        Campaign GetCampaignUsingGET1(string campaignId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves a single campaign
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignUsingGET1WithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieves a list of campaigns for the authenticated user
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCampaignsResponse</returns>
        ListCampaignsResponse ListCampaignsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieves a list of campaigns for the authenticated user
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCampaignsResponse</returns>
        ApiResponse<ListCampaignsResponse> ListCampaignsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Remove Contacts from Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveContactsFromSequenceResponse</returns>
        RemoveContactsFromSequenceResponse RemoveContactsFromCampaignSequenceUsingPOST(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0);

        /// <summary>
        /// Remove Contacts from Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveContactsFromSequenceResponse</returns>
        ApiResponse<RemoveContactsFromSequenceResponse> RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfo(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Contacts to Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddContactsToSequenceResponse</returns>
        System.Threading.Tasks.Task<AddContactsToSequenceResponse> AddContactsToCampaignSequenceUsingPOST1Async(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Contacts to Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddContactsToSequenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddContactsToSequenceResponse>> AddContactsToCampaignSequenceUsingPOST1WithHttpInfoAsync(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves a single campaign
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignUsingGET1Async(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Campaign
        /// </summary>
        /// <remarks>
        /// Retrieves a single campaign
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignUsingGET1WithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieves a list of campaigns for the authenticated user
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCampaignsResponse</returns>
        System.Threading.Tasks.Task<ListCampaignsResponse> ListCampaignsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Campaigns
        /// </summary>
        /// <remarks>
        /// Retrieves a list of campaigns for the authenticated user
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCampaignsResponse>> ListCampaignsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove Contacts from Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveContactsFromSequenceResponse</returns>
        System.Threading.Tasks.Task<RemoveContactsFromSequenceResponse> RemoveContactsFromCampaignSequenceUsingPOSTAsync(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove Contacts from Campaign Sequence
        /// </summary>
        /// <remarks>
        /// Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveContactsFromSequenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveContactsFromSequenceResponse>> RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfoAsync(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignApi : ICampaignApiSync, ICampaignApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignApi : ICampaignApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CampaignApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Contacts to Campaign Sequence Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddContactsToSequenceResponse</returns>
        public AddContactsToSequenceResponse AddContactsToCampaignSequenceUsingPOST1(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AddContactsToSequenceResponse> localVarResponse = AddContactsToCampaignSequenceUsingPOST1WithHttpInfo(campaignId, sequenceId, addContactsToSequenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to Campaign Sequence Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddContactsToSequenceResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AddContactsToSequenceResponse> AddContactsToCampaignSequenceUsingPOST1WithHttpInfo(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }

            // verify the required parameter 'addContactsToSequenceRequest' is set
            if (addContactsToSequenceRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'addContactsToSequenceRequest' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = addContactsToSequenceRequest;

            localVarRequestOptions.Operation = "CampaignApi.AddContactsToCampaignSequenceUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddContactsToSequenceResponse>("/v2/campaigns/{campaign_id}/sequences/{sequence_id}:addContacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContactsToCampaignSequenceUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contacts to Campaign Sequence Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddContactsToSequenceResponse</returns>
        public async System.Threading.Tasks.Task<AddContactsToSequenceResponse> AddContactsToCampaignSequenceUsingPOST1Async(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AddContactsToSequenceResponse> localVarResponse = await AddContactsToCampaignSequenceUsingPOST1WithHttpInfoAsync(campaignId, sequenceId, addContactsToSequenceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to Campaign Sequence Adds a list of contacts to a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addContactsToSequenceRequest">addContactsToSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddContactsToSequenceResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AddContactsToSequenceResponse>> AddContactsToCampaignSequenceUsingPOST1WithHttpInfoAsync(string campaignId, string sequenceId, AddContactsToSequenceRequest addContactsToSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }

            // verify the required parameter 'addContactsToSequenceRequest' is set
            if (addContactsToSequenceRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'addContactsToSequenceRequest' when calling CampaignApi->AddContactsToCampaignSequenceUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = addContactsToSequenceRequest;

            localVarRequestOptions.Operation = "CampaignApi.AddContactsToCampaignSequenceUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddContactsToSequenceResponse>("/v2/campaigns/{campaign_id}/sequences/{sequence_id}:addContacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContactsToCampaignSequenceUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Campaign Retrieves a single campaign
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaignUsingGET1(string campaignId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Campaign> localVarResponse = GetCampaignUsingGET1WithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Campaign Retrieves a single campaign
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Campaign</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Campaign> GetCampaignUsingGET1WithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->GetCampaignUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignApi.GetCampaignUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Campaign>("/v2/campaigns/{campaign_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Campaign Retrieves a single campaign
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignUsingGET1Async(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Campaign> localVarResponse = await GetCampaignUsingGET1WithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Campaign Retrieves a single campaign
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Campaign>> GetCampaignUsingGET1WithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->GetCampaignUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "CampaignApi.GetCampaignUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Campaign>("/v2/campaigns/{campaign_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaigns Retrieves a list of campaigns for the authenticated user
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCampaignsResponse</returns>
        public ListCampaignsResponse ListCampaignsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCampaignsResponse> localVarResponse = ListCampaignsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken, stats);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaigns Retrieves a list of campaigns for the authenticated user
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCampaignsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListCampaignsResponse> ListCampaignsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "CampaignApi.ListCampaignsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCampaignsResponse>("/v2/campaigns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Campaigns Retrieves a list of campaigns for the authenticated user
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<ListCampaignsResponse> ListCampaignsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCampaignsResponse> localVarResponse = await ListCampaignsUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, stats, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Campaigns Retrieves a list of campaigns for the authenticated user
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched  text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the campaign name.   - &#x60;filter&#x3D;name%3D%3DSpring Campaign&#x60;  - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - publisheddate   - id   - completedContactCount   - activeContacts   - datecreated   - lastupdated   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListCampaignsResponse>> ListCampaignsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "CampaignApi.ListCampaignsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCampaignsResponse>("/v2/campaigns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCampaignsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from Campaign Sequence Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveContactsFromSequenceResponse</returns>
        public RemoveContactsFromSequenceResponse RemoveContactsFromCampaignSequenceUsingPOST(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RemoveContactsFromSequenceResponse> localVarResponse = RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfo(campaignId, sequenceId, removeContactsFromSequenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Contacts from Campaign Sequence Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveContactsFromSequenceResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RemoveContactsFromSequenceResponse> RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfo(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }

            // verify the required parameter 'removeContactsFromSequenceRequest' is set
            if (removeContactsFromSequenceRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'removeContactsFromSequenceRequest' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = removeContactsFromSequenceRequest;

            localVarRequestOptions.Operation = "CampaignApi.RemoveContactsFromCampaignSequenceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RemoveContactsFromSequenceResponse>("/v2/campaigns/{campaign_id}/sequences/{sequence_id}:removeContacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveContactsFromCampaignSequenceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from Campaign Sequence Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveContactsFromSequenceResponse</returns>
        public async System.Threading.Tasks.Task<RemoveContactsFromSequenceResponse> RemoveContactsFromCampaignSequenceUsingPOSTAsync(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RemoveContactsFromSequenceResponse> localVarResponse = await RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfoAsync(campaignId, sequenceId, removeContactsFromSequenceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Contacts from Campaign Sequence Removes a list of contacts from a campaign sequence Response contains a map of the provided list of Contact Ids related to their individual result.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">campaign_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="removeContactsFromSequenceRequest">removeContactsFromSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveContactsFromSequenceResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RemoveContactsFromSequenceResponse>> RemoveContactsFromCampaignSequenceUsingPOSTWithHttpInfoAsync(string campaignId, string sequenceId, RemoveContactsFromSequenceRequest removeContactsFromSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'campaignId' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }

            // verify the required parameter 'removeContactsFromSequenceRequest' is set
            if (removeContactsFromSequenceRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'removeContactsFromSequenceRequest' when calling CampaignApi->RemoveContactsFromCampaignSequenceUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = removeContactsFromSequenceRequest;

            localVarRequestOptions.Operation = "CampaignApi.RemoveContactsFromCampaignSequenceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RemoveContactsFromSequenceResponse>("/v2/campaigns/{campaign_id}/sequences/{sequence_id}:removeContacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveContactsFromCampaignSequenceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
