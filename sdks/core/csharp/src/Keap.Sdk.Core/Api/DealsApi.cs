/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.762682-hf-202501071525
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new note for a specific deal.
        /// </summary>
        /// <remarks>
        /// Creates a new note for a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        DealNote CreateNote(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a new note for a specific deal.
        /// </summary>
        /// <remarks>
        /// Creates a new note for a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        ApiResponse<DealNote> CreateNoteWithHttpInfo(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Deletes a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete(string noteId, int operationIndex = 0);

        /// <summary>
        /// Deletes a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Deletes a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo(string noteId, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Retrieves a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        DealNote GetNote(string noteId, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Retrieves a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        ApiResponse<DealNote> GetNoteWithHttpInfo(string noteId, int operationIndex = 0);
        /// <summary>
        /// Lists all notes associated with a specific deal.
        /// </summary>
        /// <remarks>
        /// Lists all notes associated with a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNoteListResponse</returns>
        DealNoteListResponse ListNotes(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Lists all notes associated with a specific deal.
        /// </summary>
        /// <remarks>
        /// Lists all notes associated with a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNoteListResponse</returns>
        ApiResponse<DealNoteListResponse> ListNotesWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Updates a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Updates a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        DealNote Update(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0);

        /// <summary>
        /// Updates a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Updates a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        ApiResponse<DealNote> UpdateWithHttpInfo(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new note for a specific deal.
        /// </summary>
        /// <remarks>
        /// Creates a new note for a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        System.Threading.Tasks.Task<DealNote> CreateNoteAsync(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new note for a specific deal.
        /// </summary>
        /// <remarks>
        /// Creates a new note for a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealNote>> CreateNoteWithHttpInfoAsync(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Deletes a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Deletes a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Retrieves a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        System.Threading.Tasks.Task<DealNote> GetNoteAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Retrieves a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealNote>> GetNoteWithHttpInfoAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists all notes associated with a specific deal.
        /// </summary>
        /// <remarks>
        /// Lists all notes associated with a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNoteListResponse</returns>
        System.Threading.Tasks.Task<DealNoteListResponse> ListNotesAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists all notes associated with a specific deal.
        /// </summary>
        /// <remarks>
        /// Lists all notes associated with a specific deal.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNoteListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealNoteListResponse>> ListNotesWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Updates a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        System.Threading.Tasks.Task<DealNote> UpdateAsync(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates a specific deal note by its ID.
        /// </summary>
        /// <remarks>
        /// Updates a specific deal note by its ID.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        System.Threading.Tasks.Task<ApiResponse<DealNote>> UpdateWithHttpInfoAsync(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDealsApi : IDealsApiSync, IDealsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DealsApi : IDealsApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DealsApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DealsApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DealsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DealsApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new note for a specific deal. Creates a new note for a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        public DealNote CreateNote(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = CreateNoteWithHttpInfo(id, createDealNoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new note for a specific deal. Creates a new note for a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        public Keap.Sdk.Core.Client.ApiResponse<DealNote> CreateNoteWithHttpInfo(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DealsApi->CreateNote");
            }

            // verify the required parameter 'createDealNoteRequest' is set
            if (createDealNoteRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createDealNoteRequest' when calling DealsApi->CreateNote");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createDealNoteRequest;

            localVarRequestOptions.Operation = "DealsApi.CreateNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<DealNote>("/v2/deals/{id}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new note for a specific deal. Creates a new note for a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        public async System.Threading.Tasks.Task<DealNote> CreateNoteAsync(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = await CreateNoteWithHttpInfoAsync(id, createDealNoteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new note for a specific deal. Creates a new note for a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to associate the new note with</param>
        /// <param name="createDealNoteRequest">the request body containing note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<DealNote>> CreateNoteWithHttpInfoAsync(string id, CreateDealNoteRequest createDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DealsApi->CreateNote");
            }

            // verify the required parameter 'createDealNoteRequest' is set
            if (createDealNoteRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createDealNoteRequest' when calling DealsApi->CreateNote");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createDealNoteRequest;

            localVarRequestOptions.Operation = "DealsApi.CreateNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DealNote>("/v2/deals/{id}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific deal note by its ID. Deletes a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete(string noteId, int operationIndex = 0)
        {
            DeleteWithHttpInfo(noteId);
        }

        /// <summary>
        /// Deletes a specific deal note by its ID. Deletes a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteWithHttpInfo(string noteId, int operationIndex = 0)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->Delete");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "DealsApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a specific deal note by its ID. Deletes a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteWithHttpInfoAsync(noteId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a specific deal note by its ID. Deletes a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to delete</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteWithHttpInfoAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->Delete");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "DealsApi.Delete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific deal note by its ID. Retrieves a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        public DealNote GetNote(string noteId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = GetNoteWithHttpInfo(noteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific deal note by its ID. Retrieves a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        public Keap.Sdk.Core.Client.ApiResponse<DealNote> GetNoteWithHttpInfo(string noteId, int operationIndex = 0)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->GetNote");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "DealsApi.GetNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DealNote>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific deal note by its ID. Retrieves a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        public async System.Threading.Tasks.Task<DealNote> GetNoteAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = await GetNoteWithHttpInfoAsync(noteId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific deal note by its ID. Retrieves a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<DealNote>> GetNoteWithHttpInfoAsync(string noteId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->GetNote");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter

            localVarRequestOptions.Operation = "DealsApi.GetNote";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealNote>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all notes associated with a specific deal. Lists all notes associated with a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNoteListResponse</returns>
        public DealNoteListResponse ListNotes(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNoteListResponse> localVarResponse = ListNotesWithHttpInfo(id, filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all notes associated with a specific deal. Lists all notes associated with a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNoteListResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<DealNoteListResponse> ListNotesWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DealsApi->ListNotes");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DealsApi.ListNotes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<DealNoteListResponse>("/v2/deals/{id}/notes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists all notes associated with a specific deal. Lists all notes associated with a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNoteListResponse</returns>
        public async System.Threading.Tasks.Task<DealNoteListResponse> ListNotesAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNoteListResponse> localVarResponse = await ListNotesWithHttpInfoAsync(id, filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all notes associated with a specific deal. Lists all notes associated with a specific deal.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the deal ID to list notes for</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNoteListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<DealNoteListResponse>> ListNotesWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling DealsApi->ListNotes");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "DealsApi.ListNotes";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DealNoteListResponse>("/v2/deals/{id}/notes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific deal note by its ID. Updates a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DealNote</returns>
        public DealNote Update(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = UpdateWithHttpInfo(noteId, updateDealNoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific deal note by its ID. Updates a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DealNote</returns>
        public Keap.Sdk.Core.Client.ApiResponse<DealNote> UpdateWithHttpInfo(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->Update");
            }

            // verify the required parameter 'updateDealNoteRequest' is set
            if (updateDealNoteRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateDealNoteRequest' when calling DealsApi->Update");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.Data = updateDealNoteRequest;

            localVarRequestOptions.Operation = "DealsApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<DealNote>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates a specific deal note by its ID. Updates a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DealNote</returns>
        public async System.Threading.Tasks.Task<DealNote> UpdateAsync(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<DealNote> localVarResponse = await UpdateWithHttpInfoAsync(noteId, updateDealNoteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a specific deal note by its ID. Updates a specific deal note by its ID.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="noteId">the ID of the note to update</param>
        /// <param name="updateDealNoteRequest">the request body containing updated note details</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DealNote)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<DealNote>> UpdateWithHttpInfoAsync(string noteId, UpdateDealNoteRequest updateDealNoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'noteId' is set
            if (noteId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'noteId' when calling DealsApi->Update");
            }

            // verify the required parameter 'updateDealNoteRequest' is set
            if (updateDealNoteRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateDealNoteRequest' when calling DealsApi->Update");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("note_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(noteId)); // path parameter
            localVarRequestOptions.Data = updateDealNoteRequest;

            localVarRequestOptions.Operation = "DealsApi.Update";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DealNote>("/v2/deals/-/notes/{note_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
