/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.752995
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreReleaseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddAffiliateToProgramUsingPOST(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddAffiliateToProgramUsingPOSTWithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        AffiliateCommissionProgramResponse AddCommissionProgramUsingPOST(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOSTWithHttpInfo(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product AdjustInventoryUsingPOST(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0);

        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> AdjustInventoryUsingPOSTWithHttpInfo(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0);
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram AssignProductCommissionProgramUsingPOST(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram AssignSubscriptionCommissionProgramUsingPOST(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelSubscriptionUsingPOST(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSubscriptionUsingPOSTWithHttpInfo(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateAffiliateCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse CreateDefaultCommissionProgramUsingPOST(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a Category Discount
        /// </summary>
        /// <remarks>
        /// Create a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        CategoryDiscount CreateDiscountUsingPOST(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Category Discount
        /// </summary>
        /// <remarks>
        /// Create a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        ApiResponse<CategoryDiscount> CreateDiscountUsingPOSTWithHttpInfo(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Creates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        ShippingDiscount CreateDiscountUsingPOST1(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Creates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        ApiResponse<ShippingDiscount> CreateDiscountUsingPOST1WithHttpInfo(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0);
        /// <summary>
        /// Create a file
        /// </summary>
        /// <remarks>
        /// Creates a file and uploads it
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        FileMetadata CreateFileUsingPOST1(CreateFileRequest createFileRequest, int operationIndex = 0);

        /// <summary>
        /// Create a file
        /// </summary>
        /// <remarks>
        /// Creates a file and uploads it
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        ApiResponse<FileMetadata> CreateFileUsingPOST1WithHttpInfo(CreateFileRequest createFileRequest, int operationIndex = 0);
        /// <summary>
        /// Create Funnel Integrations into the app.
        /// </summary>
        /// <remarks>
        /// Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CreateFunnelIntegrationUsingPOST(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0);

        /// <summary>
        /// Create Funnel Integrations into the app.
        /// </summary>
        /// <remarks>
        /// Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateFunnelIntegrationUsingPOSTWithHttpInfo(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0);
        /// <summary>
        /// Achieve Funnel Integration Trigger Goal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        List<FunnelIntegrationTriggerResultDTO> CreateIntegrationTriggerEventUsingPOST(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0);

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        ApiResponse<List<FunnelIntegrationTriggerResultDTO>> CreateIntegrationTriggerEventUsingPOSTWithHttpInfo(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0);
        /// <summary>
        /// Create a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Create a Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceCategory</returns>
        LeadSourceCategory CreateLeadSourceCategoryUsingPOST(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Create a Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceCategory</returns>
        ApiResponse<LeadSourceCategory> CreateLeadSourceCategoryUsingPOSTWithHttpInfo(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a Lead Source
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSource</returns>
        LeadSource CreateLeadSourceUsingPOST(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a Lead Source
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSource</returns>
        ApiResponse<LeadSource> CreateLeadSourceUsingPOSTWithHttpInfo(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateNoteCustomFieldUsingPOST1(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateNoteCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Opportunity Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateOpportunityCustomFieldsUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Opportunity Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateOpportunityCustomFieldsUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Creates a new Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        RestOpportunityStage CreateOpportunityStageUsingPOST(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Creates a new Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        ApiResponse<RestOpportunityStage> CreateOpportunityStageUsingPOSTWithHttpInfo(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0);
        /// <summary>
        /// Create an Opportunity
        /// </summary>
        /// <remarks>
        /// Creates a new opportunity as the authenticated user.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        RestV2Opportunity CreateOpportunityUsingPOST1(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0);

        /// <summary>
        /// Create an Opportunity
        /// </summary>
        /// <remarks>
        /// Creates a new opportunity as the authenticated user.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        ApiResponse<RestV2Opportunity> CreateOpportunityUsingPOST1WithHttpInfo(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0);
        /// <summary>
        /// Create an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateOrderCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateOrderCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Order Item
        /// </summary>
        /// <remarks>
        /// Creates an order item on an existing order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2OrderItem</returns>
        RestV2OrderItem CreateOrderItemsOnOrderUsingPOST1(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Order Item
        /// </summary>
        /// <remarks>
        /// Creates an order item on an existing order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2OrderItem</returns>
        ApiResponse<RestV2OrderItem> CreateOrderItemsOnOrderUsingPOST1WithHttpInfo(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Creates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        OrderTotalDiscount CreateOrderTotalDiscountUsingPOST(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Creates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        ApiResponse<OrderTotalDiscount> CreateOrderTotalDiscountUsingPOSTWithHttpInfo(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// Create a one time Order with Order items.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        RestV2Order CreateOrderUsingPOST1(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// Create a one time Order with Order items.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        ApiResponse<RestV2Order> CreateOrderUsingPOST1WithHttpInfo(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product CreateProductUsingPOST1(CreateProductRequest createProductRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> CreateProductUsingPOST1WithHttpInfo(CreateProductRequest createProductRequest, int operationIndex = 0);
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink CreateRedirectLinkUsingPOST(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0);

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> CreateRedirectLinkUsingPOSTWithHttpInfo(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Referral
        /// </summary>
        /// <remarks>
        /// Creates a new referral partner referral on the provided contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Referral</returns>
        Referral CreateReferralUsingPOST(CreateReferralRequest createReferralRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Referral
        /// </summary>
        /// <remarks>
        /// Creates a new referral partner referral on the provided contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> CreateReferralUsingPOSTWithHttpInfo(CreateReferralRequest createReferralRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateSubscriptionCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFieldResponse</returns>
        CreateCustomFieldResponse CreateTaskCustomFieldUsingPOST1(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFieldResponse</returns>
        ApiResponse<CreateCustomFieldResponse> CreateTaskCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Task
        /// </summary>
        /// <remarks>
        /// Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task CreateTaskUsingPOST1(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0);

        /// <summary>
        /// Create a Task
        /// </summary>
        /// <remarks>
        /// Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> CreateTaskUsingPOST1WithHttpInfo(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0);
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User CreateUserUsingPOST1(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0);

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserUsingPOST1WithHttpInfo(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0);
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateCommissionProgramUsingDELETE(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAffiliateUsingDELETE(string id, int operationIndex = 0);

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAffiliateUsingDELETEWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Delete a Category Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDiscountUsingDELETE(string discountId, int operationIndex = 0);

        /// <summary>
        /// Delete a Category Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDiscountUsingDELETEWithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Delete a Free Trial Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Free Trial Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDiscountUsingDELETE1(string discountId, int operationIndex = 0);

        /// <summary>
        /// Delete a Free Trial Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Free Trial Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDiscountUsingDELETE1WithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Delete a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDiscountUsingDELETE2(string discountId, int operationIndex = 0);

        /// <summary>
        /// Delete a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDiscountUsingDELETE2WithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// Deletes a specified file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFileUsingDELETE1(string fileId, int operationIndex = 0);

        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// Deletes a specified file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileUsingDELETE1WithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// Deletes Funnel Integrations from the app.
        /// </summary>
        /// <remarks>
        /// Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteFunnelIntegrationUsingPOST(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0);

        /// <summary>
        /// Deletes Funnel Integrations from the app.
        /// </summary>
        /// <remarks>
        /// Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFunnelIntegrationUsingPOSTWithHttpInfo(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Deletes the specified Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLeadSourceCategoryUsingDELETE(string categoryId, int operationIndex = 0);

        /// <summary>
        /// Delete a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Deletes the specified Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLeadSourceCategoryUsingDELETEWithHttpInfo(string categoryId, int operationIndex = 0);
        /// <summary>
        /// Delete an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOpportunityStageUsingDELETE(string stageId, int operationIndex = 0);

        /// <summary>
        /// Delete an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOpportunityStageUsingDELETEWithHttpInfo(string stageId, int operationIndex = 0);
        /// <summary>
        /// Delete an Opportunity
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOpportunityUsingDELETE(string opportunityId, int operationIndex = 0);

        /// <summary>
        /// Delete an Opportunity
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOpportunityUsingDELETEWithHttpInfo(string opportunityId, int operationIndex = 0);
        /// <summary>
        /// Delete an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOrderCustomFieldUsingDELETE(string customFieldId, int operationIndex = 0);

        /// <summary>
        /// Delete an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderCustomFieldUsingDELETEWithHttpInfo(string customFieldId, int operationIndex = 0);
        /// <summary>
        /// Delete an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOrderTotalDiscountUsingDELETE(string discountId, int operationIndex = 0);

        /// <summary>
        /// Delete an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderTotalDiscountUsingDELETEWithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        ///   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteOrderUsingDELETE1(string orderId, int operationIndex = 0);

        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        ///   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOrderUsingDELETE1WithHttpInfo(string orderId, int operationIndex = 0);
        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteProductUsingDELETE1(string productId, int operationIndex = 0);

        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProductUsingDELETE1WithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteRedirectLinkUsingDELETE(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRedirectLinkUsingDELETEWithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Task.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTaskCustomFieldUsingDELETE(string customFieldId, int operationIndex = 0);

        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Task.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskCustomFieldUsingDELETEWithHttpInfo(string customFieldId, int operationIndex = 0);
        /// <summary>
        /// Delete a Task
        /// </summary>
        /// <remarks>
        /// Deletes a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteTaskUsingDELETE1(string taskId, int operationIndex = 0);

        /// <summary>
        /// Delete a Task
        /// </summary>
        /// <remarks>
        /// Deletes a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTaskUsingDELETE1WithHttpInfo(string taskId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        AffiliateCommissionEarned GetAffiliateCommissionTotalUsingGET(string affiliateId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGETWithHttpInfo(string affiliateId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionResponse</returns>
        ListAffiliateCommissionResponse GetAffiliateCommissionsUsingGET(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionResponse</returns>
        ApiResponse<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGETWithHttpInfo(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel GetAffiliateCustomFieldsUsingGET(int operationIndex = 0);

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> GetAffiliateCustomFieldsUsingGETWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        AffiliateProgramV2 GetCommissionProgramUsingGET(string commissionProgramId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        ApiResponse<AffiliateProgramV2> GetCommissionProgramUsingGETWithHttpInfo(string commissionProgramId, int operationIndex = 0);
        /// <summary>
        /// Search for Contacts
        /// </summary>
        /// <remarks>
        /// Get a list of Contacts based search parameters.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBasicContactResponse</returns>
        ListBasicContactResponse GetContactsBySearchTermUsingGET(string searchParam, int operationIndex = 0);

        /// <summary>
        /// Search for Contacts
        /// </summary>
        /// <remarks>
        /// Get a list of Contacts based search parameters.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBasicContactResponse</returns>
        ApiResponse<ListBasicContactResponse> GetContactsBySearchTermUsingGETWithHttpInfo(string searchParam, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Category Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a single Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        CategoryDiscount GetDiscountUsingGET(string discountId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Category Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a single Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        ApiResponse<CategoryDiscount> GetDiscountUsingGETWithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        ShippingDiscount GetDiscountUsingGET1(string discountId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        ApiResponse<ShippingDiscount> GetDiscountUsingGET1WithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a file&#39;s data
        /// </summary>
        /// <remarks>
        /// Retrieves a file&#39;s data
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        byte[] GetFileDataUsingGET(string fileId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a file&#39;s data
        /// </summary>
        /// <remarks>
        /// Retrieves a file&#39;s data
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetFileDataUsingGETWithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a file
        /// </summary>
        /// <remarks>
        /// Retrieves a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        FileMetadata GetFileUsingGET1(string fileId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a file
        /// </summary>
        /// <remarks>
        /// Retrieves a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        ApiResponse<FileMetadata> GetFileUsingGET1WithHttpInfo(string fileId, int operationIndex = 0);
        /// <summary>
        /// Retrieve Lead Score of a Contact
        /// </summary>
        /// <remarks>
        /// Retrieves information about the Lead Score of a Contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadScore</returns>
        LeadScore GetLeadScoreDetailsUsingGET(string contactId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Lead Score of a Contact
        /// </summary>
        /// <remarks>
        /// Retrieves information about the Lead Score of a Contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadScore</returns>
        ApiResponse<LeadScore> GetLeadScoreDetailsUsingGETWithHttpInfo(string contactId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Category for a given id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceCategory</returns>
        LeadSourceCategory GetLeadSourceCategoryUsingGET(string categoryId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Category for a given id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceCategory</returns>
        ApiResponse<LeadSourceCategory> GetLeadSourceCategoryUsingGETWithHttpInfo(string categoryId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        RestOpportunityStage GetOpportunityStageUsingGET(string stageId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        ApiResponse<RestOpportunityStage> GetOpportunityStageUsingGETWithHttpInfo(string stageId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Opportunity
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        RestV2Opportunity GetOpportunityUsingGET1(string opportunityId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Opportunity
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        ApiResponse<RestV2Opportunity> GetOpportunityUsingGET1WithHttpInfo(string opportunityId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Retrieves an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        OrderTotalDiscount GetOrderTotalDiscountUsingGET(string discountId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Retrieves an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        ApiResponse<OrderTotalDiscount> GetOrderTotalDiscountUsingGETWithHttpInfo(string discountId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Order
        /// </summary>
        /// <remarks>
        /// Retrieves a single Order for a given order id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        RestV2Order GetOrderUsingGET1(string orderId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Order
        /// </summary>
        /// <remarks>
        /// Retrieves a single Order for a given order id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        ApiResponse<RestV2Order> GetOrderUsingGET1WithHttpInfo(string orderId, int operationIndex = 0);
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        RestV2Product GetProductUsingGET(string productId, int operationIndex = 0);

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        ApiResponse<RestV2Product> GetProductUsingGETWithHttpInfo(string productId, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink GetRedirectLinkUsingGET(string redirectId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> GetRedirectLinkUsingGETWithHttpInfo(string redirectId, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Task
        /// </summary>
        /// <remarks>
        /// Retrieves a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        Task GetTaskUsingGET1(string taskId, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Task
        /// </summary>
        /// <remarks>
        /// Retrieves a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        ApiResponse<Task> GetTaskUsingGET1WithHttpInfo(string taskId, int operationIndex = 0);
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetUserByIdUsingGET(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserByIdUsingGETWithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserInfoResponse</returns>
        GetUserInfoResponse GetUserInfoUsingGET1(int operationIndex = 0);

        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserInfoResponse</returns>
        ApiResponse<GetUserInfoResponse> GetUserInfoUsingGET1WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetUserSignatureUsingGET1(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetUserSignatureUsingGET1WithHttpInfo(string userId, int operationIndex = 0);
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        ListAffiliateCommissionProgramsResponse ListAffiliateCommissionProgramsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        ListAffiliateLinksResponse ListAffiliateLinksUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Category Discounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Category Discounts.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCategoryDiscountsResponse</returns>
        ListCategoryDiscountsResponse ListCategoryDiscountsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Category Discounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Category Discounts.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCategoryDiscountsResponse</returns>
        ApiResponse<ListCategoryDiscountsResponse> ListCategoryDiscountsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Countries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCountriesResponse</returns>
        ListCountriesResponse ListCountriesUsingGET2(int operationIndex = 0);

        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        ApiResponse<ListCountriesResponse> ListCountriesUsingGET2WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List all Shipping Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Shipping Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListShippingDiscountsResponse</returns>
        ListShippingDiscountsResponse ListDiscountsUsingGET(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List all Shipping Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Shipping Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListShippingDiscountsResponse</returns>
        ApiResponse<ListShippingDiscountsResponse> ListDiscountsUsingGETWithHttpInfo(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// Retrieves all files
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFilesResponse</returns>
        ListFilesResponse ListFilesUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// Retrieves all files
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFilesResponse</returns>
        ApiResponse<ListFilesResponse> ListFilesUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Landing Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all landing pages
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLandingPagesResponse</returns>
        ListLandingPagesResponse ListLandingPagesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Landing Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all landing pages
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLandingPagesResponse</returns>
        ApiResponse<ListLandingPagesResponse> ListLandingPagesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Lead Sources
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead sources
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLeadSourcesResponse</returns>
        ListLeadSourcesResponse ListLeadSourcesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Lead Sources
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead sources
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLeadSourcesResponse</returns>
        ApiResponse<ListLeadSourcesResponse> ListLeadSourcesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Merchant accounts
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Merchant accounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRestMerchantResponse</returns>
        ListRestMerchantResponse ListMerchantsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Merchant accounts
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Merchant accounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRestMerchantResponse</returns>
        ApiResponse<ListRestMerchantResponse> ListMerchantsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Note Templates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Note Templates
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListNoteTemplateResponse</returns>
        ListNoteTemplateResponse ListNoteTemplatesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Note Templates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Note Templates
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListNoteTemplateResponse</returns>
        ApiResponse<ListNoteTemplateResponse> ListNoteTemplatesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Opportunities
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all Opportunities.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOpportunitiesResponse</returns>
        ListOpportunitiesResponse ListOpportunitiesUsingGET1(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Opportunities
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all Opportunities.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOpportunitiesResponse</returns>
        ApiResponse<ListOpportunitiesResponse> ListOpportunitiesUsingGET1WithHttpInfo(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List of Opportunity Stages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Opportunity Stages.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOpportunityStagesResponse</returns>
        ListOpportunityStagesResponse ListOpportunityStagesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List of Opportunity Stages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Opportunity Stages.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOpportunityStagesResponse</returns>
        ApiResponse<ListOpportunityStagesResponse> ListOpportunityStagesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Order Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrderPaymentsResponse</returns>
        ListOrderPaymentsResponse ListOrderPaymentsUsingGET1(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Order Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrderPaymentsResponse</returns>
        ApiResponse<ListOrderPaymentsResponse> ListOrderPaymentsUsingGET1WithHttpInfo(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List all Order Total Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Order Total Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrderTotalDiscountsResponse</returns>
        ListOrderTotalDiscountsResponse ListOrderTotalDiscountsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List all Order Total Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Order Total Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrderTotalDiscountsResponse</returns>
        ApiResponse<ListOrderTotalDiscountsResponse> ListOrderTotalDiscountsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Retrieves a list of orders
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrders</returns>
        ListOrders ListOrdersUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Retrieves a list of orders
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrders</returns>
        ApiResponse<ListOrders> ListOrdersUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductsResponse</returns>
        ListProductsResponse ListProductsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductsResponse</returns>
        ApiResponse<ListProductsResponse> ListProductsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List a Country&#39;s Provinces
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProvincesResponse</returns>
        ListProvincesResponse ListProvincesForCountryUsingGET(string countryCode, int operationIndex = 0);

        /// <summary>
        /// List a Country&#39;s Provinces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProvincesResponse</returns>
        ApiResponse<ListProvincesResponse> ListProvincesForCountryUsingGETWithHttpInfo(string countryCode, int operationIndex = 0);
        /// <summary>
        /// List Shipping methods
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Shipping methods
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRestShippingMethodsResponse</returns>
        ListRestShippingMethodsResponse ListShippingMethodsUsingGET(int operationIndex = 0);

        /// <summary>
        /// List Shipping methods
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Shipping methods
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRestShippingMethodsResponse</returns>
        ApiResponse<ListRestShippingMethodsResponse> ListShippingMethodsUsingGETWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionPlansResponse</returns>
        ListSubscriptionPlansResponse ListSubscriptionPlansUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionPlansResponse</returns>
        ApiResponse<ListSubscriptionPlansResponse> ListSubscriptionPlansUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsResponse</returns>
        ListSubscriptionsResponse ListSubscriptionsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsResponse</returns>
        ApiResponse<ListSubscriptionsResponse> ListSubscriptionsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        ListAffiliateSummariesResponse ListSummariesUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        ApiResponse<ListAffiliateSummariesResponse> ListSummariesUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Tasks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTasksResponse</returns>
        ListTasksResponse ListTasksUsingGET1(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Tasks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTasksResponse</returns>
        ApiResponse<ListTasksResponse> ListTasksUsingGET1WithHttpInfo(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUserResponse</returns>
        ListUserResponse ListUsersUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUserResponse</returns>
        ApiResponse<ListUserResponse> ListUsersUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        SetDefaultCommissionProgramResponse PatchDefaultCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        ApiResponse<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Update an Order
        /// </summary>
        /// <remarks>
        /// Updates an Order
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        RestV2Order PatchOrderUsingPATCH(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0);

        /// <summary>
        /// Update an Order
        /// </summary>
        /// <remarks>
        /// Updates an Order
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        ApiResponse<RestV2Order> PatchOrderUsingPATCHWithHttpInfo(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        ProductCommissionProgram PatchProductCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        ApiResponse<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        SubscriptionCommissionProgram PatchSubscriptionCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        ApiResponse<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0);
        /// <summary>
        /// Update a Task
        /// </summary>
        /// <remarks>
        /// Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTaskResponse</returns>
        UpdateTaskResponse PatchTaskUsingPATCH(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0);

        /// <summary>
        /// Update a Task
        /// </summary>
        /// <remarks>
        /// Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTaskResponse</returns>
        ApiResponse<UpdateTaskResponse> PatchTaskUsingPATCHWithHttpInfo(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0);
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User PatchUserUsingPATCH(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0);

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> PatchUserUsingPATCHWithHttpInfo(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0);
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveAffiliateFromProgramUsingPOST(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0);

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAffiliateFromProgramUsingPOSTWithHttpInfo(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0);
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve Note Model
        /// </summary>
        /// <remarks>
        /// Gets the custom fields for the Note object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel RetrieveNoteModelUsingGET1(int operationIndex = 0);

        /// <summary>
        /// Retrieve Note Model
        /// </summary>
        /// <remarks>
        /// Gets the custom fields for the Note object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> RetrieveNoteModelUsingGET1WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Order object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel RetrieveOrderCustomFieldModelUsingGET(int operationIndex = 0);

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Order object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> RetrieveOrderCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel RetrieveSubscriptionCustomFieldModelUsingGET(int operationIndex = 0);

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve Task Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields for the Task object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel RetrieveTaskModelUsingGET1(int operationIndex = 0);

        /// <summary>
        /// Retrieve Task Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields for the Task object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> RetrieveTaskModelUsingGET1WithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateAffiliateCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Category Discount
        /// </summary>
        /// <remarks>
        /// Update a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        CategoryDiscount UpdateDiscountUsingPATCH(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Category Discount
        /// </summary>
        /// <remarks>
        /// Update a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        ApiResponse<CategoryDiscount> UpdateDiscountUsingPATCHWithHttpInfo(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Updates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        ShippingDiscount UpdateDiscountUsingPATCH1(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Updates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        ApiResponse<ShippingDiscount> UpdateDiscountUsingPATCH1WithHttpInfo(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        FileMetadata UpdateFileUsingPATCH(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        ApiResponse<FileMetadata> UpdateFileUsingPATCHWithHttpInfo(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateNotesCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateNotesCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Opportunity&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateOpportunityCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateOpportunityCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        RestOpportunityStage UpdateOpportunityStageUsingPATCH(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        ApiResponse<RestOpportunityStage> UpdateOpportunityStageUsingPATCHWithHttpInfo(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an opportunity
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        RestV2Opportunity UpdateOpportunityUsingPATCH(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update an opportunity
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        ApiResponse<RestV2Opportunity> UpdateOpportunityUsingPATCHWithHttpInfo(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateOrderCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateOrderCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Updates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        OrderTotalDiscount UpdateOrderTotalDiscountUsingPATCH(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Updates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        ApiResponse<OrderTotalDiscount> UpdateOrderTotalDiscountUsingPATCHWithHttpInfo(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        AffiliateLink UpdateRedirectLinkUsingPATCH(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0);

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        ApiResponse<AffiliateLink> UpdateRedirectLinkUsingPATCHWithHttpInfo(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0);
        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateSubscriptionCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        /// <summary>
        /// Update a Task&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateTaskCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Task&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateTaskCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreReleaseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddAffiliateToProgramUsingPOSTAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign Affiliate to Commission program
        /// </summary>
        /// <remarks>
        /// Assigns an Affiliate to Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddAffiliateToProgramUsingPOSTWithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOSTAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Commission Program
        /// </summary>
        /// <remarks>
        /// Creates an Affiliate Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramUsingPOSTWithHttpInfoAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> AdjustInventoryUsingPOSTAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Adjust Inventory of a Product
        /// </summary>
        /// <remarks>
        /// Increase or decrease the quantity of the Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> AdjustInventoryUsingPOSTWithHttpInfoAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Product Commission Program to a Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Assign a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Assigns a Subscription Commission Program to a Subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSubscriptionUsingPOSTAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSubscriptionUsingPOSTWithHttpInfoAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Custom Field
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Custom Field
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Creates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Category Discount
        /// </summary>
        /// <remarks>
        /// Create a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        System.Threading.Tasks.Task<CategoryDiscount> CreateDiscountUsingPOSTAsync(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Category Discount
        /// </summary>
        /// <remarks>
        /// Create a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryDiscount>> CreateDiscountUsingPOSTWithHttpInfoAsync(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Creates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        System.Threading.Tasks.Task<ShippingDiscount> CreateDiscountUsingPOST1Async(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Creates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingDiscount>> CreateDiscountUsingPOST1WithHttpInfoAsync(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a file
        /// </summary>
        /// <remarks>
        /// Creates a file and uploads it
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        System.Threading.Tasks.Task<FileMetadata> CreateFileUsingPOST1Async(CreateFileRequest createFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a file
        /// </summary>
        /// <remarks>
        /// Creates a file and uploads it
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileMetadata>> CreateFileUsingPOST1WithHttpInfoAsync(CreateFileRequest createFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Funnel Integrations into the app.
        /// </summary>
        /// <remarks>
        /// Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateFunnelIntegrationUsingPOSTAsync(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Funnel Integrations into the app.
        /// </summary>
        /// <remarks>
        /// Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateFunnelIntegrationUsingPOSTWithHttpInfoAsync(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Achieve Funnel Integration Trigger Goal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        System.Threading.Tasks.Task<List<FunnelIntegrationTriggerResultDTO>> CreateIntegrationTriggerEventUsingPOSTAsync(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FunnelIntegrationTriggerResultDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FunnelIntegrationTriggerResultDTO>>> CreateIntegrationTriggerEventUsingPOSTWithHttpInfoAsync(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Create a Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceCategory</returns>
        System.Threading.Tasks.Task<LeadSourceCategory> CreateLeadSourceCategoryUsingPOSTAsync(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Create a Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSourceCategory>> CreateLeadSourceCategoryUsingPOSTWithHttpInfoAsync(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Lead Source
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSource</returns>
        System.Threading.Tasks.Task<LeadSource> CreateLeadSourceUsingPOSTAsync(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Lead Source
        /// </summary>
        /// <remarks>
        /// Creates a new Lead Source
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSource>> CreateLeadSourceUsingPOSTWithHttpInfoAsync(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateNoteCustomFieldUsingPOST1Async(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateNoteCustomFieldUsingPOST1WithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Opportunity Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateOpportunityCustomFieldsUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Opportunity Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateOpportunityCustomFieldsUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Creates a new Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        System.Threading.Tasks.Task<RestOpportunityStage> CreateOpportunityStageUsingPOSTAsync(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Creates a new Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestOpportunityStage>> CreateOpportunityStageUsingPOSTWithHttpInfoAsync(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Opportunity
        /// </summary>
        /// <remarks>
        /// Creates a new opportunity as the authenticated user.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        System.Threading.Tasks.Task<RestV2Opportunity> CreateOpportunityUsingPOST1Async(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Opportunity
        /// </summary>
        /// <remarks>
        /// Creates a new opportunity as the authenticated user.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Opportunity>> CreateOpportunityUsingPOST1WithHttpInfoAsync(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateOrderCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateOrderCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Order Item
        /// </summary>
        /// <remarks>
        /// Creates an order item on an existing order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2OrderItem</returns>
        System.Threading.Tasks.Task<RestV2OrderItem> CreateOrderItemsOnOrderUsingPOST1Async(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Order Item
        /// </summary>
        /// <remarks>
        /// Creates an order item on an existing order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2OrderItem)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2OrderItem>> CreateOrderItemsOnOrderUsingPOST1WithHttpInfoAsync(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Creates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        System.Threading.Tasks.Task<OrderTotalDiscount> CreateOrderTotalDiscountUsingPOSTAsync(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Creates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTotalDiscount>> CreateOrderTotalDiscountUsingPOSTWithHttpInfoAsync(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// Create a one time Order with Order items.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        System.Threading.Tasks.Task<RestV2Order> CreateOrderUsingPOST1Async(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Order
        /// </summary>
        /// <remarks>
        /// Create a one time Order with Order items.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Order>> CreateOrderUsingPOST1WithHttpInfoAsync(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> CreateProductUsingPOST1Async(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Product
        /// </summary>
        /// <remarks>
        /// Creates a new product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> CreateProductUsingPOST1WithHttpInfoAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkUsingPOSTAsync(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Creates a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> CreateRedirectLinkUsingPOSTWithHttpInfoAsync(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Referral
        /// </summary>
        /// <remarks>
        /// Creates a new referral partner referral on the provided contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> CreateReferralUsingPOSTAsync(CreateReferralRequest createReferralRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Referral
        /// </summary>
        /// <remarks>
        /// Creates a new referral partner referral on the provided contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> CreateReferralUsingPOSTWithHttpInfoAsync(CreateReferralRequest createReferralRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFieldResponse</returns>
        System.Threading.Tasks.Task<CreateCustomFieldResponse> CreateTaskCustomFieldUsingPOST1Async(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCustomFieldResponse>> CreateTaskCustomFieldUsingPOST1WithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Task
        /// </summary>
        /// <remarks>
        /// Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> CreateTaskUsingPOST1Async(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Task
        /// </summary>
        /// <remarks>
        /// Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> CreateTaskUsingPOST1WithHttpInfoAsync(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserUsingPOST1Async(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a User
        /// </summary>
        /// <remarks>
        /// Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserUsingPOST1WithHttpInfoAsync(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateCommissionProgramUsingDELETEAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Commission Program
        /// </summary>
        /// <remarks>
        /// Deletes a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAffiliateUsingDELETEAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Affiliate
        /// </summary>
        /// <remarks>
        /// Deletes the specified Affiliate
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAffiliateUsingDELETEWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Category Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDiscountUsingDELETEAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Category Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDiscountUsingDELETEWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Free Trial Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Free Trial Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDiscountUsingDELETE1Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Free Trial Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Free Trial Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDiscountUsingDELETE1WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDiscountUsingDELETE2Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDiscountUsingDELETE2WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// Deletes a specified file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileUsingDELETE1Async(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a file
        /// </summary>
        /// <remarks>
        /// Deletes a specified file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileUsingDELETE1WithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes Funnel Integrations from the app.
        /// </summary>
        /// <remarks>
        /// Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFunnelIntegrationUsingPOSTAsync(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes Funnel Integrations from the app.
        /// </summary>
        /// <remarks>
        /// Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFunnelIntegrationUsingPOSTWithHttpInfoAsync(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Deletes the specified Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLeadSourceCategoryUsingDELETEAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Deletes the specified Lead Source Category.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLeadSourceCategoryUsingDELETEWithHttpInfoAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOpportunityStageUsingDELETEAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOpportunityStageUsingDELETEWithHttpInfoAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Opportunity
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOpportunityUsingDELETEAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Opportunity
        /// </summary>
        /// <remarks>
        /// Deletes the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOpportunityUsingDELETEWithHttpInfoAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderCustomFieldUsingDELETEAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Order.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderCustomFieldUsingDELETEWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderTotalDiscountUsingDELETEAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Deletes a specified Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderTotalDiscountUsingDELETEWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        ///   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOrderUsingDELETE1Async(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Order
        /// </summary>
        /// <remarks>
        ///   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOrderUsingDELETE1WithHttpInfoAsync(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProductUsingDELETE1Async(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Product
        /// </summary>
        /// <remarks>
        /// Deletes a single product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProductUsingDELETE1WithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRedirectLinkUsingDELETEAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Deletes an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRedirectLinkUsingDELETEWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Task.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskCustomFieldUsingDELETEAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Custom Field
        /// </summary>
        /// <remarks>
        /// Deletes a Custom Field from Task.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskCustomFieldUsingDELETEWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete a Task
        /// </summary>
        /// <remarks>
        /// Deletes a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTaskUsingDELETE1Async(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete a Task
        /// </summary>
        /// <remarks>
        /// Deletes a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTaskUsingDELETE1WithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGETAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <remarks>
        /// Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalUsingGETWithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGETAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionResponse>> GetAffiliateCommissionsUsingGETWithHttpInfoAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Affiliate Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields and optional properties for the Affiliate object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> GetAffiliateCustomFieldsUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramUsingGETAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Commission Program
        /// </summary>
        /// <remarks>
        /// Retrieves a single Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateProgramV2>> GetCommissionProgramUsingGETWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Search for Contacts
        /// </summary>
        /// <remarks>
        /// Get a list of Contacts based search parameters.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBasicContactResponse</returns>
        System.Threading.Tasks.Task<ListBasicContactResponse> GetContactsBySearchTermUsingGETAsync(string searchParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Search for Contacts
        /// </summary>
        /// <remarks>
        /// Get a list of Contacts based search parameters.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBasicContactResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListBasicContactResponse>> GetContactsBySearchTermUsingGETWithHttpInfoAsync(string searchParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Category Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a single Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        System.Threading.Tasks.Task<CategoryDiscount> GetDiscountUsingGETAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Category Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a single Category Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryDiscount>> GetDiscountUsingGETWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        System.Threading.Tasks.Task<ShippingDiscount> GetDiscountUsingGET1Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Retrieves a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingDiscount>> GetDiscountUsingGET1WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a file&#39;s data
        /// </summary>
        /// <remarks>
        /// Retrieves a file&#39;s data
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetFileDataUsingGETAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a file&#39;s data
        /// </summary>
        /// <remarks>
        /// Retrieves a file&#39;s data
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetFileDataUsingGETWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a file
        /// </summary>
        /// <remarks>
        /// Retrieves a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        System.Threading.Tasks.Task<FileMetadata> GetFileUsingGET1Async(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a file
        /// </summary>
        /// <remarks>
        /// Retrieves a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileMetadata>> GetFileUsingGET1WithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Lead Score of a Contact
        /// </summary>
        /// <remarks>
        /// Retrieves information about the Lead Score of a Contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadScore</returns>
        System.Threading.Tasks.Task<LeadScore> GetLeadScoreDetailsUsingGETAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Lead Score of a Contact
        /// </summary>
        /// <remarks>
        /// Retrieves information about the Lead Score of a Contact
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadScore)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadScore>> GetLeadScoreDetailsUsingGETWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Category for a given id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceCategory</returns>
        System.Threading.Tasks.Task<LeadSourceCategory> GetLeadSourceCategoryUsingGETAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Lead Source Category
        /// </summary>
        /// <remarks>
        /// Retrieves a single Lead Source Category for a given id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeadSourceCategory>> GetLeadSourceCategoryUsingGETWithHttpInfoAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        System.Threading.Tasks.Task<RestOpportunityStage> GetOpportunityStageUsingGETAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestOpportunityStage>> GetOpportunityStageUsingGETWithHttpInfoAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Opportunity
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        System.Threading.Tasks.Task<RestV2Opportunity> GetOpportunityUsingGET1Async(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Opportunity
        /// </summary>
        /// <remarks>
        /// Retrieves the specified Opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Opportunity>> GetOpportunityUsingGET1WithHttpInfoAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Retrieves an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        System.Threading.Tasks.Task<OrderTotalDiscount> GetOrderTotalDiscountUsingGETAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Retrieves an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTotalDiscount>> GetOrderTotalDiscountUsingGETWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Order
        /// </summary>
        /// <remarks>
        /// Retrieves a single Order for a given order id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        System.Threading.Tasks.Task<RestV2Order> GetOrderUsingGET1Async(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Order
        /// </summary>
        /// <remarks>
        /// Retrieves a single Order for a given order id
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Order>> GetOrderUsingGET1WithHttpInfoAsync(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        System.Threading.Tasks.Task<RestV2Product> GetProductUsingGETAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get a Product
        /// </summary>
        /// <remarks>
        /// Gets a single Product
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Product>> GetProductUsingGETWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkUsingGETAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Retrieves information about a single Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> GetRedirectLinkUsingGETWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Task
        /// </summary>
        /// <remarks>
        /// Retrieves a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        System.Threading.Tasks.Task<Task> GetTaskUsingGET1Async(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Task
        /// </summary>
        /// <remarks>
        /// Retrieves a single task
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskUsingGET1WithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserByIdUsingGETAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get User
        /// </summary>
        /// <remarks>
        /// Retrieves a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserByIdUsingGETWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfoResponse</returns>
        System.Threading.Tasks.Task<GetUserInfoResponse> GetUserInfoUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve User Info
        /// </summary>
        /// <remarks>
        /// Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserInfoResponse>> GetUserInfoUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetUserSignatureUsingGET1Async(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get User email signature
        /// </summary>
        /// <remarks>
        /// Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetUserSignatureUsingGET1WithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Commission Programs
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Commission Programs
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Links
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Affiliate Links
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Category Discounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Category Discounts.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCategoryDiscountsResponse</returns>
        System.Threading.Tasks.Task<ListCategoryDiscountsResponse> ListCategoryDiscountsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Category Discounts
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Category Discounts.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCategoryDiscountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCategoryDiscountsResponse>> ListCategoryDiscountsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesUsingGET2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Countries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListCountriesResponse>> ListCountriesUsingGET2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all Shipping Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Shipping Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListShippingDiscountsResponse</returns>
        System.Threading.Tasks.Task<ListShippingDiscountsResponse> ListDiscountsUsingGETAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all Shipping Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Shipping Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListShippingDiscountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListShippingDiscountsResponse>> ListDiscountsUsingGETWithHttpInfoAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// Retrieves all files
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFilesResponse</returns>
        System.Threading.Tasks.Task<ListFilesResponse> ListFilesUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all files
        /// </summary>
        /// <remarks>
        /// Retrieves all files
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFilesResponse>> ListFilesUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Landing Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all landing pages
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLandingPagesResponse</returns>
        System.Threading.Tasks.Task<ListLandingPagesResponse> ListLandingPagesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Landing Pages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all landing pages
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLandingPagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLandingPagesResponse>> ListLandingPagesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Lead Sources
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead sources
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLeadSourcesResponse</returns>
        System.Threading.Tasks.Task<ListLeadSourcesResponse> ListLeadSourcesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Lead Sources
        /// </summary>
        /// <remarks>
        /// Retrieves a list of lead sources
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLeadSourcesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListLeadSourcesResponse>> ListLeadSourcesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Merchant accounts
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Merchant accounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRestMerchantResponse</returns>
        System.Threading.Tasks.Task<ListRestMerchantResponse> ListMerchantsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Merchant accounts
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Merchant accounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRestMerchantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRestMerchantResponse>> ListMerchantsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Note Templates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Note Templates
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNoteTemplateResponse</returns>
        System.Threading.Tasks.Task<ListNoteTemplateResponse> ListNoteTemplatesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Note Templates
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Note Templates
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNoteTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNoteTemplateResponse>> ListNoteTemplatesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Opportunities
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all Opportunities.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOpportunitiesResponse</returns>
        System.Threading.Tasks.Task<ListOpportunitiesResponse> ListOpportunitiesUsingGET1Async(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Opportunities
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all Opportunities.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOpportunitiesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOpportunitiesResponse>> ListOpportunitiesUsingGET1WithHttpInfoAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List of Opportunity Stages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Opportunity Stages.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOpportunityStagesResponse</returns>
        System.Threading.Tasks.Task<ListOpportunityStagesResponse> ListOpportunityStagesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List of Opportunity Stages
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Opportunity Stages.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOpportunityStagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOpportunityStagesResponse>> ListOpportunityStagesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Order Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrderPaymentsResponse</returns>
        System.Threading.Tasks.Task<ListOrderPaymentsResponse> ListOrderPaymentsUsingGET1Async(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Order Payments
        /// </summary>
        /// <remarks>
        /// Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrderPaymentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOrderPaymentsResponse>> ListOrderPaymentsUsingGET1WithHttpInfoAsync(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List all Order Total Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Order Total Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrderTotalDiscountsResponse</returns>
        System.Threading.Tasks.Task<ListOrderTotalDiscountsResponse> ListOrderTotalDiscountsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List all Order Total Discounts
        /// </summary>
        /// <remarks>
        /// Retrieves all Order Total Discounts
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrderTotalDiscountsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOrderTotalDiscountsResponse>> ListOrderTotalDiscountsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Retrieves a list of orders
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrders</returns>
        System.Threading.Tasks.Task<ListOrders> ListOrdersUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List orders
        /// </summary>
        /// <remarks>
        /// Retrieves a list of orders
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrders)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListOrders>> ListOrdersUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductsResponse</returns>
        System.Threading.Tasks.Task<ListProductsResponse> ListProductsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Products
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Products
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProductsResponse>> ListProductsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List a Country&#39;s Provinces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProvincesResponse</returns>
        System.Threading.Tasks.Task<ListProvincesResponse> ListProvincesForCountryUsingGETAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List a Country&#39;s Provinces
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProvincesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListProvincesResponse>> ListProvincesForCountryUsingGETWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Shipping methods
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Shipping methods
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRestShippingMethodsResponse</returns>
        System.Threading.Tasks.Task<ListRestShippingMethodsResponse> ListShippingMethodsUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Shipping methods
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Shipping methods
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRestShippingMethodsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRestShippingMethodsResponse>> ListShippingMethodsUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionPlansResponse</returns>
        System.Threading.Tasks.Task<ListSubscriptionPlansResponse> ListSubscriptionPlansUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Subscription Plans
        /// </summary>
        /// <remarks>
        /// Retrieves a list of Subscription Plans
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionPlansResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubscriptionPlansResponse>> ListSubscriptionPlansUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<ListSubscriptionsResponse> ListSubscriptionsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubscriptionsResponse>> ListSubscriptionsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Affiliate Summaries
        /// </summary>
        /// <remarks>
        /// Retrieve a list of Affiliate Summaries
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAffiliateSummariesResponse>> ListSummariesUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Tasks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTasksResponse</returns>
        System.Threading.Tasks.Task<ListTasksResponse> ListTasksUsingGET1Async(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Tasks
        /// </summary>
        /// <remarks>
        /// Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTasksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTasksResponse>> ListTasksUsingGET1WithHttpInfoAsync(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUserResponse</returns>
        System.Threading.Tasks.Task<ListUserResponse> ListUsersUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Users
        /// </summary>
        /// <remarks>
        /// Retrieves a list of users
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUserResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUserResponse>> ListUsersUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Default Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Default Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SetDefaultCommissionProgramResponse>> PatchDefaultCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Order
        /// </summary>
        /// <remarks>
        /// Updates an Order
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        System.Threading.Tasks.Task<RestV2Order> PatchOrderUsingPATCHAsync(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Order
        /// </summary>
        /// <remarks>
        /// Updates an Order
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Order>> PatchOrderUsingPATCHWithHttpInfoAsync(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        System.Threading.Tasks.Task<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Product Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Product Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductCommissionProgram>> PatchProductCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        System.Threading.Tasks.Task<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Subscription Commission Program
        /// </summary>
        /// <remarks>
        /// Updates a Subscription Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionCommissionProgram>> PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Task
        /// </summary>
        /// <remarks>
        /// Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTaskResponse</returns>
        System.Threading.Tasks.Task<UpdateTaskResponse> PatchTaskUsingPATCHAsync(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Task
        /// </summary>
        /// <remarks>
        /// Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTaskResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTaskResponse>> PatchTaskUsingPATCHWithHttpInfoAsync(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> PatchUserUsingPATCHAsync(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update User
        /// </summary>
        /// <remarks>
        /// Updates information on a specific User
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> PatchUserUsingPATCHWithHttpInfoAsync(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAffiliateFromProgramUsingPOSTAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Affiliate from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes an Affiliate from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAffiliateFromProgramUsingPOSTWithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Remove a Subscription from a Commission Program
        /// </summary>
        /// <remarks>
        /// Removes a Subscription from a Commission Program
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Note Model
        /// </summary>
        /// <remarks>
        /// Gets the custom fields for the Note object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> RetrieveNoteModelUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Note Model
        /// </summary>
        /// <remarks>
        /// Gets the custom fields for the Note object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> RetrieveNoteModelUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Order object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> RetrieveOrderCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Order object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> RetrieveOrderCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Task Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields for the Task object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> RetrieveTaskModelUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Task Model
        /// </summary>
        /// <remarks>
        /// Get the custom fields for the Task object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> RetrieveTaskModelUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Affiliate object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Category Discount
        /// </summary>
        /// <remarks>
        /// Update a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        System.Threading.Tasks.Task<CategoryDiscount> UpdateDiscountUsingPATCHAsync(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Category Discount
        /// </summary>
        /// <remarks>
        /// Update a Category Discount.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<CategoryDiscount>> UpdateDiscountUsingPATCHWithHttpInfoAsync(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Updates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        System.Threading.Tasks.Task<ShippingDiscount> UpdateDiscountUsingPATCH1Async(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Shipping Discount
        /// </summary>
        /// <remarks>
        /// Updates a Shipping Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShippingDiscount>> UpdateDiscountUsingPATCH1WithHttpInfoAsync(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        System.Threading.Tasks.Task<FileMetadata> UpdateFileUsingPATCHAsync(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a file
        /// </summary>
        /// <remarks>
        /// Updates a file
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileMetadata>> UpdateFileUsingPATCHWithHttpInfoAsync(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateNotesCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Note object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateNotesCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Opportunity&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateOpportunityCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Opportunity object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateOpportunityCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        System.Threading.Tasks.Task<RestOpportunityStage> UpdateOpportunityStageUsingPATCHAsync(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Opportunity Stage
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given Opportunity Stage
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestOpportunityStage>> UpdateOpportunityStageUsingPATCHWithHttpInfoAsync(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an opportunity
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        System.Threading.Tasks.Task<RestV2Opportunity> UpdateOpportunityUsingPATCHAsync(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an opportunity
        /// </summary>
        /// <remarks>
        /// Updates specified values of a given opportunity
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestV2Opportunity>> UpdateOpportunityUsingPATCHWithHttpInfoAsync(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateOrderCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Order&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Order object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateOrderCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Updates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        System.Threading.Tasks.Task<OrderTotalDiscount> UpdateOrderTotalDiscountUsingPATCHAsync(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Order Total Discount
        /// </summary>
        /// <remarks>
        /// Updates an Order Total Discount
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrderTotalDiscount>> UpdateOrderTotalDiscountUsingPATCHWithHttpInfoAsync(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkUsingPATCHAsync(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Affiliate Link
        /// </summary>
        /// <remarks>
        /// Updates an Affiliate Link
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        System.Threading.Tasks.Task<ApiResponse<AffiliateLink>> UpdateRedirectLinkUsingPATCHWithHttpInfoAsync(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Task&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateTaskCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Task&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Task object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateTaskCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreReleaseApi : IPreReleaseApiSync, IPreReleaseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreReleaseApi : IPreReleaseApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreReleaseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreReleaseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreReleaseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreReleaseApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreReleaseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreReleaseApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreReleaseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PreReleaseApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddAffiliateToProgramUsingPOST(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            AddAffiliateToProgramUsingPOSTWithHttpInfo(id, affiliateAddToProgramRequest);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> AddAffiliateToProgramUsingPOSTWithHttpInfo(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->AddAffiliateToProgramUsingPOST");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling PreReleaseApi->AddAffiliateToProgramUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AddAffiliateToProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddAffiliateToProgramUsingPOSTAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddAffiliateToProgramUsingPOSTWithHttpInfoAsync(id, affiliateAddToProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Assign Affiliate to Commission program Assigns an Affiliate to Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateAddToProgramRequest">affiliateAddToProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> AddAffiliateToProgramUsingPOSTWithHttpInfoAsync(string id, AffiliateAddToProgramRequest affiliateAddToProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->AddAffiliateToProgramUsingPOST");
            }

            // verify the required parameter 'affiliateAddToProgramRequest' is set
            if (affiliateAddToProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateAddToProgramRequest' when calling PreReleaseApi->AddAffiliateToProgramUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateAddToProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AddAffiliateToProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:assignToProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAffiliateToProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionProgramResponse</returns>
        public AffiliateCommissionProgramResponse AddCommissionProgramUsingPOST(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = AddCommissionProgramUsingPOSTWithHttpInfo(createCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOSTWithHttpInfo(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AddCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionProgramResponse> AddCommissionProgramUsingPOSTAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = await AddCommissionProgramUsingPOSTWithHttpInfoAsync(createCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Commission Program Creates an Affiliate Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCommissionProgramRequest">Commission Program to insert (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionProgramResponse>> AddCommissionProgramUsingPOSTWithHttpInfoAsync(CreateCommissionProgramRequest? createCommissionProgramRequest = default(CreateCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AddCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateCommissionProgramResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product AdjustInventoryUsingPOST(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = AdjustInventoryUsingPOSTWithHttpInfo(productId, updateProductInventoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Product> AdjustInventoryUsingPOSTWithHttpInfo(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->AdjustInventoryUsingPOST");
            }

            // verify the required parameter 'updateProductInventoryRequest' is set
            if (updateProductInventoryRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateProductInventoryRequest' when calling PreReleaseApi->AdjustInventoryUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = updateProductInventoryRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AdjustInventoryUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Product>("/v2/products/{product_id}:adjustInventory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInventoryUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> AdjustInventoryUsingPOSTAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = await AdjustInventoryUsingPOSTWithHttpInfoAsync(productId, updateProductInventoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Adjust Inventory of a Product Increase or decrease the quantity of the Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="updateProductInventoryRequest">updateProductInventoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Product>> AdjustInventoryUsingPOSTWithHttpInfoAsync(string productId, UpdateProductInventoryRequest updateProductInventoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->AdjustInventoryUsingPOST");
            }

            // verify the required parameter 'updateProductInventoryRequest' is set
            if (updateProductInventoryRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateProductInventoryRequest' when calling PreReleaseApi->AdjustInventoryUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter
            localVarRequestOptions.Data = updateProductInventoryRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AdjustInventoryUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Product>("/v2/products/{product_id}:adjustInventory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AdjustInventoryUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram AssignProductCommissionProgramUsingPOST(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = AssignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createProductCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> AssignProductCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->AssignProductCommissionProgramUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AssignProductCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> AssignProductCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await AssignProductCommissionProgramUsingPOSTWithHttpInfoAsync(commissionProgramId, createProductCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Product Commission Program Assigns a Product Commission Program to a Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createProductCommissionProgramRequest">Product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram>> AssignProductCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateProductCommissionProgramRequest? createProductCommissionProgramRequest = default(CreateProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->AssignProductCommissionProgramUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AssignProductCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignProductCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram AssignSubscriptionCommissionProgramUsingPOST(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createSubscriptionCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->AssignSubscriptionCommissionProgramUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AssignSubscriptionCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> AssignSubscriptionCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfoAsync(commissionProgramId, createSubscriptionCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a Subscription Commission Program Assigns a Subscription Commission Program to a Subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createSubscriptionCommissionProgramRequest">Subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram>> AssignSubscriptionCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateSubscriptionCommissionProgramRequest? createSubscriptionCommissionProgramRequest = default(CreateSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->AssignSubscriptionCommissionProgramUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.AssignSubscriptionCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssignSubscriptionCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelSubscriptionUsingPOST(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0)
        {
            CancelSubscriptionUsingPOSTWithHttpInfo(subscriptionId, cancelSubscriptionsRequest);
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> CancelSubscriptionUsingPOSTWithHttpInfo(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling PreReleaseApi->CancelSubscriptionUsingPOST");
            }

            // verify the required parameter 'cancelSubscriptionsRequest' is set
            if (cancelSubscriptionsRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'cancelSubscriptionsRequest' when calling PreReleaseApi->CancelSubscriptionUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = cancelSubscriptionsRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CancelSubscriptionUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/subscriptions/{subscription_id}:deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscriptionUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSubscriptionUsingPOSTAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CancelSubscriptionUsingPOSTWithHttpInfoAsync(subscriptionId, cancelSubscriptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> CancelSubscriptionUsingPOSTWithHttpInfoAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling PreReleaseApi->CancelSubscriptionUsingPOST");
            }

            // verify the required parameter 'cancelSubscriptionsRequest' is set
            if (cancelSubscriptionsRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'cancelSubscriptionsRequest' when calling PreReleaseApi->CancelSubscriptionUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = cancelSubscriptionsRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CancelSubscriptionUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/subscriptions/{subscription_id}:deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscriptionUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateAffiliateCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateAffiliateCustomFieldUsingPOSTWithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateAffiliateCustomFieldUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateAffiliateCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateAffiliateCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateAffiliateCustomFieldUsingPOSTWithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Custom Field Creates a single Affiliate Custom Field
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateAffiliateCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateAffiliateCustomFieldUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateAffiliateCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAffiliateCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse CreateDefaultCommissionProgramUsingPOST(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = CreateDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOSTWithHttpInfo(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->CreateDefaultCommissionProgramUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDefaultCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> CreateDefaultCommissionProgramUsingPOSTAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await CreateDefaultCommissionProgramUsingPOSTWithHttpInfoAsync(commissionProgramId, createDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Default Commission Program Creates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="createDefaultCommissionProgramRequest">Values of the Default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse>> CreateDefaultCommissionProgramUsingPOSTWithHttpInfoAsync(string commissionProgramId, CreateDefaultCommissionProgramRequest? createDefaultCommissionProgramRequest = default(CreateDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->CreateDefaultCommissionProgramUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            localVarRequestOptions.Data = createDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDefaultCommissionProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDefaultCommissionProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Category Discount Create a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        public CategoryDiscount CreateDiscountUsingPOST(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = CreateDiscountUsingPOSTWithHttpInfo(createUpdateDiscountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Category Discount Create a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> CreateDiscountUsingPOSTWithHttpInfo(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createUpdateDiscountRequest' is set
            if (createUpdateDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createUpdateDiscountRequest' when calling PreReleaseApi->CreateDiscountUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUpdateDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDiscountUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CategoryDiscount>("/v2/discounts/productCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiscountUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Category Discount Create a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        public async System.Threading.Tasks.Task<CategoryDiscount> CreateDiscountUsingPOSTAsync(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = await CreateDiscountUsingPOSTWithHttpInfoAsync(createUpdateDiscountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Category Discount Create a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount>> CreateDiscountUsingPOSTWithHttpInfoAsync(CreateUpdateDiscountRequest createUpdateDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createUpdateDiscountRequest' is set
            if (createUpdateDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createUpdateDiscountRequest' when calling PreReleaseApi->CreateDiscountUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUpdateDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDiscountUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CategoryDiscount>("/v2/discounts/productCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiscountUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Shipping Discount Creates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        public ShippingDiscount CreateDiscountUsingPOST1(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = CreateDiscountUsingPOST1WithHttpInfo(createShippingDiscountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Shipping Discount Creates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> CreateDiscountUsingPOST1WithHttpInfo(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createShippingDiscountRequest' is set
            if (createShippingDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createShippingDiscountRequest' when calling PreReleaseApi->CreateDiscountUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createShippingDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDiscountUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ShippingDiscount>("/v2/discounts/shipping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiscountUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Shipping Discount Creates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        public async System.Threading.Tasks.Task<ShippingDiscount> CreateDiscountUsingPOST1Async(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = await CreateDiscountUsingPOST1WithHttpInfoAsync(createShippingDiscountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Shipping Discount Creates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createShippingDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount>> CreateDiscountUsingPOST1WithHttpInfoAsync(CreateShippingDiscountRequest createShippingDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createShippingDiscountRequest' is set
            if (createShippingDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createShippingDiscountRequest' when calling PreReleaseApi->CreateDiscountUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createShippingDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateDiscountUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ShippingDiscount>("/v2/discounts/shipping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDiscountUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a file Creates a file and uploads it
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        public FileMetadata CreateFileUsingPOST1(CreateFileRequest createFileRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = CreateFileUsingPOST1WithHttpInfo(createFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a file Creates a file and uploads it
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        public Keap.Sdk.Core.Client.ApiResponse<FileMetadata> CreateFileUsingPOST1WithHttpInfo(CreateFileRequest createFileRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createFileRequest' is set
            if (createFileRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFileRequest' when calling PreReleaseApi->CreateFileUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFileRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateFileUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<FileMetadata>("/v2/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a file Creates a file and uploads it
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        public async System.Threading.Tasks.Task<FileMetadata> CreateFileUsingPOST1Async(CreateFileRequest createFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = await CreateFileUsingPOST1WithHttpInfoAsync(createFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a file Creates a file and uploads it
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFileRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<FileMetadata>> CreateFileUsingPOST1WithHttpInfoAsync(CreateFileRequest createFileRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFileRequest' is set
            if (createFileRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFileRequest' when calling PreReleaseApi->CreateFileUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFileRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateFileUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FileMetadata>("/v2/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Funnel Integrations into the app. Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CreateFunnelIntegrationUsingPOST(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0)
        {
            CreateFunnelIntegrationUsingPOSTWithHttpInfo(createFunnelIntegrationRequest);
        }

        /// <summary>
        /// Create Funnel Integrations into the app. Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> CreateFunnelIntegrationUsingPOSTWithHttpInfo(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createFunnelIntegrationRequest' is set
            if (createFunnelIntegrationRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFunnelIntegrationRequest' when calling PreReleaseApi->CreateFunnelIntegrationUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunnelIntegrationRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateFunnelIntegrationUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/funnelIntegration", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunnelIntegrationUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Funnel Integrations into the app. Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateFunnelIntegrationUsingPOSTAsync(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CreateFunnelIntegrationUsingPOSTWithHttpInfoAsync(createFunnelIntegrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create Funnel Integrations into the app. Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationRequest">createFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> CreateFunnelIntegrationUsingPOSTWithHttpInfoAsync(CreateFunnelIntegrationRequest createFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFunnelIntegrationRequest' is set
            if (createFunnelIntegrationRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFunnelIntegrationRequest' when calling PreReleaseApi->CreateFunnelIntegrationUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunnelIntegrationRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateFunnelIntegrationUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/funnelIntegration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunnelIntegrationUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        public List<FunnelIntegrationTriggerResultDTO> CreateIntegrationTriggerEventUsingPOST(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<List<FunnelIntegrationTriggerResultDTO>> localVarResponse = CreateIntegrationTriggerEventUsingPOSTWithHttpInfo(createFunnelIntegrationTriggerEvents);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        public Keap.Sdk.Core.Client.ApiResponse<List<FunnelIntegrationTriggerResultDTO>> CreateIntegrationTriggerEventUsingPOSTWithHttpInfo(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0)
        {
            // verify the required parameter 'createFunnelIntegrationTriggerEvents' is set
            if (createFunnelIntegrationTriggerEvents == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFunnelIntegrationTriggerEvents' when calling PreReleaseApi->CreateIntegrationTriggerEventUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunnelIntegrationTriggerEvents;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateIntegrationTriggerEventUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<FunnelIntegrationTriggerResultDTO>>("/v2/funnelIntegration/trigger", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIntegrationTriggerEventUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FunnelIntegrationTriggerResultDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<FunnelIntegrationTriggerResultDTO>> CreateIntegrationTriggerEventUsingPOSTAsync(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<List<FunnelIntegrationTriggerResultDTO>> localVarResponse = await CreateIntegrationTriggerEventUsingPOSTWithHttpInfoAsync(createFunnelIntegrationTriggerEvents, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Achieve Funnel Integration Trigger Goal 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunnelIntegrationTriggerEvents">createFunnelIntegrationTriggerEvents</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FunnelIntegrationTriggerResultDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<List<FunnelIntegrationTriggerResultDTO>>> CreateIntegrationTriggerEventUsingPOSTWithHttpInfoAsync(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFunnelIntegrationTriggerEvents' is set
            if (createFunnelIntegrationTriggerEvents == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createFunnelIntegrationTriggerEvents' when calling PreReleaseApi->CreateIntegrationTriggerEventUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunnelIntegrationTriggerEvents;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateIntegrationTriggerEventUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<FunnelIntegrationTriggerResultDTO>>("/v2/funnelIntegration/trigger", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateIntegrationTriggerEventUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Lead Source Category Create a Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceCategory</returns>
        public LeadSourceCategory CreateLeadSourceCategoryUsingPOST(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> localVarResponse = CreateLeadSourceCategoryUsingPOSTWithHttpInfo(createUpdateLeadSourceCategoryRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Category Create a Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceCategory</returns>
        public Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> CreateLeadSourceCategoryUsingPOSTWithHttpInfo(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUpdateLeadSourceCategoryRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateLeadSourceCategoryUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LeadSourceCategory>("/v2/leadSourceCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceCategoryUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Lead Source Category Create a Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceCategory</returns>
        public async System.Threading.Tasks.Task<LeadSourceCategory> CreateLeadSourceCategoryUsingPOSTAsync(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> localVarResponse = await CreateLeadSourceCategoryUsingPOSTWithHttpInfoAsync(createUpdateLeadSourceCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Category Create a Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUpdateLeadSourceCategoryRequest">leadSourceCategory (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceCategory)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory>> CreateLeadSourceCategoryUsingPOSTWithHttpInfoAsync(CreateUpdateLeadSourceCategoryRequest? createUpdateLeadSourceCategoryRequest = default(CreateUpdateLeadSourceCategoryRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUpdateLeadSourceCategoryRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateLeadSourceCategoryUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LeadSourceCategory>("/v2/leadSourceCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceCategoryUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Lead Source Creates a new Lead Source
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSource</returns>
        public LeadSource CreateLeadSourceUsingPOST(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSource> localVarResponse = CreateLeadSourceUsingPOSTWithHttpInfo(createLeadSourceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Creates a new Lead Source
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSource</returns>
        public Keap.Sdk.Core.Client.ApiResponse<LeadSource> CreateLeadSourceUsingPOSTWithHttpInfo(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLeadSourceRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateLeadSourceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<LeadSource>("/v2/leadsources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Lead Source Creates a new Lead Source
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSource</returns>
        public async System.Threading.Tasks.Task<LeadSource> CreateLeadSourceUsingPOSTAsync(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSource> localVarResponse = await CreateLeadSourceUsingPOSTWithHttpInfoAsync(createLeadSourceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Lead Source Creates a new Lead Source
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLeadSourceRequest">leadsource (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSource)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<LeadSource>> CreateLeadSourceUsingPOSTWithHttpInfoAsync(CreateLeadSourceRequest? createLeadSourceRequest = default(CreateLeadSourceRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createLeadSourceRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateLeadSourceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<LeadSource>("/v2/leadsources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateLeadSourceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateNoteCustomFieldUsingPOST1(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateNoteCustomFieldUsingPOST1WithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateNoteCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateNoteCustomFieldUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateNoteCustomFieldUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/notes/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNoteCustomFieldUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateNoteCustomFieldUsingPOST1Async(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateNoteCustomFieldUsingPOST1WithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateNoteCustomFieldUsingPOST1WithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateNoteCustomFieldUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateNoteCustomFieldUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/notes/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNoteCustomFieldUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Custom Field Adds a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateOpportunityCustomFieldsUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateOpportunityCustomFieldsUsingPOSTWithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Custom Field Adds a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateOpportunityCustomFieldsUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateOpportunityCustomFieldsUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityCustomFieldsUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/opportunities/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityCustomFieldsUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Custom Field Adds a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateOpportunityCustomFieldsUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateOpportunityCustomFieldsUsingPOSTWithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Custom Field Adds a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateOpportunityCustomFieldsUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateOpportunityCustomFieldsUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityCustomFieldsUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/opportunities/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityCustomFieldsUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Stage Creates a new Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        public RestOpportunityStage CreateOpportunityStageUsingPOST(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = CreateOpportunityStageUsingPOSTWithHttpInfo(createOpportunityStageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Stage Creates a new Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> CreateOpportunityStageUsingPOSTWithHttpInfo(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityStageRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityStageUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestOpportunityStage>("/v2/opportunities/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityStageUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Stage Creates a new Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        public async System.Threading.Tasks.Task<RestOpportunityStage> CreateOpportunityStageUsingPOSTAsync(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = await CreateOpportunityStageUsingPOSTWithHttpInfoAsync(createOpportunityStageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Stage Creates a new Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityStageRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage>> CreateOpportunityStageUsingPOSTWithHttpInfoAsync(CreateOpportunityStageRequest? createOpportunityStageRequest = default(CreateOpportunityStageRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityStageRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityStageUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestOpportunityStage>("/v2/opportunities/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityStageUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Creates a new opportunity as the authenticated user.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        public RestV2Opportunity CreateOpportunityUsingPOST1(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = CreateOpportunityUsingPOST1WithHttpInfo(createOpportunityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Creates a new opportunity as the authenticated user.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> CreateOpportunityUsingPOST1WithHttpInfo(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Opportunity>("/v2/opportunities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Opportunity Creates a new opportunity as the authenticated user.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        public async System.Threading.Tasks.Task<RestV2Opportunity> CreateOpportunityUsingPOST1Async(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = await CreateOpportunityUsingPOST1WithHttpInfoAsync(createOpportunityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Opportunity Creates a new opportunity as the authenticated user.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOpportunityRequest">opportunity (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity>> CreateOpportunityUsingPOST1WithHttpInfoAsync(CreateOpportunityRequest? createOpportunityRequest = default(CreateOpportunityRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOpportunityRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOpportunityUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Opportunity>("/v2/opportunities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOpportunityUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order&#39;s Custom Field Adds a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateOrderCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateOrderCustomFieldUsingPOSTWithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order&#39;s Custom Field Adds a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateOrderCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateOrderCustomFieldUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/orders/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order&#39;s Custom Field Adds a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateOrderCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateOrderCustomFieldUsingPOSTWithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order&#39;s Custom Field Adds a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateOrderCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateOrderCustomFieldUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/orders/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Item Creates an order item on an existing order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2OrderItem</returns>
        public RestV2OrderItem CreateOrderItemsOnOrderUsingPOST1(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2OrderItem> localVarResponse = CreateOrderItemsOnOrderUsingPOST1WithHttpInfo(orderId, createRestOrderItemRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Item Creates an order item on an existing order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2OrderItem</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2OrderItem> CreateOrderItemsOnOrderUsingPOST1WithHttpInfo(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->CreateOrderItemsOnOrderUsingPOST1");
            }

            // verify the required parameter 'createRestOrderItemRequest' is set
            if (createRestOrderItemRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createRestOrderItemRequest' when calling PreReleaseApi->CreateOrderItemsOnOrderUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createRestOrderItemRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderItemsOnOrderUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2OrderItem>("/v2/orders/{order_id}/items", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderItemsOnOrderUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Item Creates an order item on an existing order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2OrderItem</returns>
        public async System.Threading.Tasks.Task<RestV2OrderItem> CreateOrderItemsOnOrderUsingPOST1Async(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2OrderItem> localVarResponse = await CreateOrderItemsOnOrderUsingPOST1WithHttpInfoAsync(orderId, createRestOrderItemRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Item Creates an order item on an existing order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="createRestOrderItemRequest">createRestOrderItemRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2OrderItem)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2OrderItem>> CreateOrderItemsOnOrderUsingPOST1WithHttpInfoAsync(string orderId, CreateRestOrderItemRequest createRestOrderItemRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->CreateOrderItemsOnOrderUsingPOST1");
            }

            // verify the required parameter 'createRestOrderItemRequest' is set
            if (createRestOrderItemRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createRestOrderItemRequest' when calling PreReleaseApi->CreateOrderItemsOnOrderUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = createRestOrderItemRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderItemsOnOrderUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2OrderItem>("/v2/orders/{order_id}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderItemsOnOrderUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Total Discount Creates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        public OrderTotalDiscount CreateOrderTotalDiscountUsingPOST(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = CreateOrderTotalDiscountUsingPOSTWithHttpInfo(createOrderTotalDiscountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Total Discount Creates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> CreateOrderTotalDiscountUsingPOSTWithHttpInfo(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOrderTotalDiscountRequest' is set
            if (createOrderTotalDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrderTotalDiscountRequest' when calling PreReleaseApi->CreateOrderTotalDiscountUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrderTotalDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderTotalDiscountUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<OrderTotalDiscount>("/v2/discounts/orderTotals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderTotalDiscountUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Total Discount Creates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        public async System.Threading.Tasks.Task<OrderTotalDiscount> CreateOrderTotalDiscountUsingPOSTAsync(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = await CreateOrderTotalDiscountUsingPOSTWithHttpInfoAsync(createOrderTotalDiscountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Total Discount Creates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrderTotalDiscountRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount>> CreateOrderTotalDiscountUsingPOSTWithHttpInfoAsync(CreateOrderTotalDiscountRequest createOrderTotalDiscountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOrderTotalDiscountRequest' is set
            if (createOrderTotalDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrderTotalDiscountRequest' when calling PreReleaseApi->CreateOrderTotalDiscountUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrderTotalDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderTotalDiscountUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<OrderTotalDiscount>("/v2/discounts/orderTotals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderTotalDiscountUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Create a one time Order with Order items.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        public RestV2Order CreateOrderUsingPOST1(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = CreateOrderUsingPOST1WithHttpInfo(restCreateOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Create a one time Order with Order items.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Order> CreateOrderUsingPOST1WithHttpInfo(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'restCreateOrderRequest' is set
            if (restCreateOrderRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'restCreateOrderRequest' when calling PreReleaseApi->CreateOrderUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = restCreateOrderRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Order>("/v2/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Order Create a one time Order with Order items.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        public async System.Threading.Tasks.Task<RestV2Order> CreateOrderUsingPOST1Async(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = await CreateOrderUsingPOST1WithHttpInfoAsync(restCreateOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Order Create a one time Order with Order items.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="restCreateOrderRequest">createOrderRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Order>> CreateOrderUsingPOST1WithHttpInfoAsync(RestCreateOrderRequest restCreateOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'restCreateOrderRequest' is set
            if (restCreateOrderRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'restCreateOrderRequest' when calling PreReleaseApi->CreateOrderUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = restCreateOrderRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateOrderUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Order>("/v2/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrderUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product CreateProductUsingPOST1(CreateProductRequest createProductRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = CreateProductUsingPOST1WithHttpInfo(createProductRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Product> CreateProductUsingPOST1WithHttpInfo(CreateProductRequest createProductRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createProductRequest' is set
            if (createProductRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createProductRequest' when calling PreReleaseApi->CreateProductUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateProductUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestV2Product>("/v2/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> CreateProductUsingPOST1Async(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = await CreateProductUsingPOST1WithHttpInfoAsync(createProductRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Product Creates a new product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProductRequest">createProductRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Product>> CreateProductUsingPOST1WithHttpInfoAsync(CreateProductRequest createProductRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createProductRequest' is set
            if (createProductRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createProductRequest' when calling PreReleaseApi->CreateProductUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createProductRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateProductUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestV2Product>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProductUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink CreateRedirectLinkUsingPOST(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = CreateRedirectLinkUsingPOSTWithHttpInfo(createOrPatchAffiliateLinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> CreateRedirectLinkUsingPOSTWithHttpInfo(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
            if (createOrPatchAffiliateLinkRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrPatchAffiliateLinkRequest' when calling PreReleaseApi->CreateRedirectLinkUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrPatchAffiliateLinkRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateRedirectLinkUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLinkUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> CreateRedirectLinkUsingPOSTAsync(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await CreateRedirectLinkUsingPOSTWithHttpInfoAsync(createOrPatchAffiliateLinkRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Affiliate Link Creates a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> CreateRedirectLinkUsingPOSTWithHttpInfoAsync(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
            if (createOrPatchAffiliateLinkRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrPatchAffiliateLinkRequest' when calling PreReleaseApi->CreateRedirectLinkUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrPatchAffiliateLinkRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateRedirectLinkUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AffiliateLink>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRedirectLinkUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Referral Creates a new referral partner referral on the provided contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Referral</returns>
        public Referral CreateReferralUsingPOST(CreateReferralRequest createReferralRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Referral> localVarResponse = CreateReferralUsingPOSTWithHttpInfo(createReferralRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Referral Creates a new referral partner referral on the provided contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Referral</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Referral> CreateReferralUsingPOSTWithHttpInfo(CreateReferralRequest createReferralRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createReferralRequest' is set
            if (createReferralRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createReferralRequest' when calling PreReleaseApi->CreateReferralUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReferralRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateReferralUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Referral>("/v2/referrals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReferralUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Referral Creates a new referral partner referral on the provided contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> CreateReferralUsingPOSTAsync(CreateReferralRequest createReferralRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Referral> localVarResponse = await CreateReferralUsingPOSTWithHttpInfoAsync(createReferralRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Referral Creates a new referral partner referral on the provided contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReferralRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Referral>> CreateReferralUsingPOSTWithHttpInfoAsync(CreateReferralRequest createReferralRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createReferralRequest' is set
            if (createReferralRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createReferralRequest' when calling PreReleaseApi->CreateReferralUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReferralRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateReferralUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Referral>("/v2/referrals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReferralUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateSubscriptionCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateSubscriptionCustomFieldUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateSubscriptionCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/subscriptions/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateSubscriptionCustomFieldUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateSubscriptionCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/subscriptions/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCustomFieldResponse</returns>
        public CreateCustomFieldResponse CreateTaskCustomFieldUsingPOST1(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CreateCustomFieldResponse> localVarResponse = CreateTaskCustomFieldUsingPOST1WithHttpInfo(createCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCustomFieldResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CreateCustomFieldResponse> CreateTaskCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateTaskCustomFieldUsingPOST1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateTaskCustomFieldUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCustomFieldResponse>("/v2/tasks/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskCustomFieldUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCustomFieldResponse</returns>
        public async System.Threading.Tasks.Task<CreateCustomFieldResponse> CreateTaskCustomFieldUsingPOST1Async(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CreateCustomFieldResponse> localVarResponse = await CreateTaskCustomFieldUsingPOST1WithHttpInfoAsync(createCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Custom Field Adds a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createCustomFieldRequest">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCustomFieldResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CreateCustomFieldResponse>> CreateTaskCustomFieldUsingPOST1WithHttpInfoAsync(CreateCustomFieldRequest createCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createCustomFieldRequest' is set
            if (createCustomFieldRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createCustomFieldRequest' when calling PreReleaseApi->CreateTaskCustomFieldUsingPOST1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createCustomFieldRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateTaskCustomFieldUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCustomFieldResponse>("/v2/tasks/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskCustomFieldUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Task Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task CreateTaskUsingPOST1(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Task> localVarResponse = CreateTaskUsingPOST1WithHttpInfo(createTaskRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Task Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Task> CreateTaskUsingPOST1WithHttpInfo(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTaskRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateTaskUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Task>("/v2/tasks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Task Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> CreateTaskUsingPOST1Async(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Task> localVarResponse = await CreateTaskUsingPOST1WithHttpInfoAsync(createTaskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Task Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Task>> CreateTaskUsingPOST1WithHttpInfoAsync(CreateTaskRequest? createTaskRequest = default(CreateTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTaskRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateTaskUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Task>("/v2/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTaskUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a User Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User CreateUserUsingPOST1(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = CreateUserUsingPOST1WithHttpInfo(createUserRequestV2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Keap.Sdk.Core.Client.ApiResponse<User> CreateUserUsingPOST1WithHttpInfo(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequestV2;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateUserUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/v2/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a User Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserUsingPOST1Async(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = await CreateUserUsingPOST1WithHttpInfoAsync(createUserRequestV2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a User Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<User>> CreateUserUsingPOST1WithHttpInfoAsync(CreateUserRequestV2? createUserRequestV2 = default(CreateUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserRequestV2;

            localVarRequestOptions.Operation = "PreReleaseApi.CreateUserUsingPOST1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/v2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserUsingPOST1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateCommissionProgramUsingDELETE(string commissionProgramId, int operationIndex = 0)
        {
            DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->DeleteAffiliateCommissionProgramUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteAffiliateCommissionProgramUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgramUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateCommissionProgramUsingDELETEAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Commission Program Deletes a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteAffiliateCommissionProgramUsingDELETEWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->DeleteAffiliateCommissionProgramUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteAffiliateCommissionProgramUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateCommissionProgramUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAffiliateUsingDELETE(string id, int operationIndex = 0)
        {
            DeleteAffiliateUsingDELETEWithHttpInfo(id);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteAffiliateUsingDELETEWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->DeleteAffiliateUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteAffiliateUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAffiliateUsingDELETEAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAffiliateUsingDELETEWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Affiliate Deletes the specified Affiliate
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteAffiliateUsingDELETEWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->DeleteAffiliateUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteAffiliateUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAffiliateUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Category Discount Deletes a specified Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDiscountUsingDELETE(string discountId, int operationIndex = 0)
        {
            DeleteDiscountUsingDELETEWithHttpInfo(discountId);
        }

        /// <summary>
        /// Delete a Category Discount Deletes a specified Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteDiscountUsingDELETEWithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Category Discount Deletes a specified Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDiscountUsingDELETEAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteDiscountUsingDELETEWithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Category Discount Deletes a specified Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteDiscountUsingDELETEWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Free Trial Discount Deletes a specified Free Trial Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDiscountUsingDELETE1(string discountId, int operationIndex = 0)
        {
            DeleteDiscountUsingDELETE1WithHttpInfo(discountId);
        }

        /// <summary>
        /// Delete a Free Trial Discount Deletes a specified Free Trial Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteDiscountUsingDELETE1WithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/discounts/freeTrials/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Free Trial Discount Deletes a specified Free Trial Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDiscountUsingDELETE1Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteDiscountUsingDELETE1WithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Free Trial Discount Deletes a specified Free Trial Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteDiscountUsingDELETE1WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/discounts/freeTrials/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Shipping Discount Deletes a specified Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDiscountUsingDELETE2(string discountId, int operationIndex = 0)
        {
            DeleteDiscountUsingDELETE2WithHttpInfo(discountId);
        }

        /// <summary>
        /// Delete a Shipping Discount Deletes a specified Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteDiscountUsingDELETE2WithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE2");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Shipping Discount Deletes a specified Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDiscountUsingDELETE2Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteDiscountUsingDELETE2WithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Shipping Discount Deletes a specified Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteDiscountUsingDELETE2WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteDiscountUsingDELETE2");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteDiscountUsingDELETE2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDiscountUsingDELETE2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a file Deletes a specified file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFileUsingDELETE1(string fileId, int operationIndex = 0)
        {
            DeleteFileUsingDELETE1WithHttpInfo(fileId);
        }

        /// <summary>
        /// Delete a file Deletes a specified file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteFileUsingDELETE1WithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->DeleteFileUsingDELETE1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteFileUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a file Deletes a specified file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileUsingDELETE1Async(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteFileUsingDELETE1WithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a file Deletes a specified file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteFileUsingDELETE1WithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->DeleteFileUsingDELETE1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteFileUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes Funnel Integrations from the app. Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteFunnelIntegrationUsingPOST(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0)
        {
            DeleteFunnelIntegrationUsingPOSTWithHttpInfo(deleteFunnelIntegrationRequest);
        }

        /// <summary>
        /// Deletes Funnel Integrations from the app. Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteFunnelIntegrationUsingPOSTWithHttpInfo(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0)
        {
            // verify the required parameter 'deleteFunnelIntegrationRequest' is set
            if (deleteFunnelIntegrationRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteFunnelIntegrationRequest' when calling PreReleaseApi->DeleteFunnelIntegrationUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFunnelIntegrationRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteFunnelIntegrationUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/funnelIntegration/uninstall", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFunnelIntegrationUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes Funnel Integrations from the app. Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFunnelIntegrationUsingPOSTAsync(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteFunnelIntegrationUsingPOSTWithHttpInfoAsync(deleteFunnelIntegrationRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes Funnel Integrations from the app. Deletes all triggers / goals, and actions / sequence items for the given funnel integration
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteFunnelIntegrationRequest">deleteFunnelIntegrationRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteFunnelIntegrationUsingPOSTWithHttpInfoAsync(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteFunnelIntegrationRequest' is set
            if (deleteFunnelIntegrationRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteFunnelIntegrationRequest' when calling PreReleaseApi->DeleteFunnelIntegrationUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = deleteFunnelIntegrationRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteFunnelIntegrationUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/funnelIntegration/uninstall", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFunnelIntegrationUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Lead Source Category Deletes the specified Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLeadSourceCategoryUsingDELETE(string categoryId, int operationIndex = 0)
        {
            DeleteLeadSourceCategoryUsingDELETEWithHttpInfo(categoryId);
        }

        /// <summary>
        /// Delete a Lead Source Category Deletes the specified Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteLeadSourceCategoryUsingDELETEWithHttpInfo(string categoryId, int operationIndex = 0)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'categoryId' when calling PreReleaseApi->DeleteLeadSourceCategoryUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteLeadSourceCategoryUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/leadSourceCategories/{category_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLeadSourceCategoryUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Lead Source Category Deletes the specified Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLeadSourceCategoryUsingDELETEAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteLeadSourceCategoryUsingDELETEWithHttpInfoAsync(categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Lead Source Category Deletes the specified Lead Source Category.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteLeadSourceCategoryUsingDELETEWithHttpInfoAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'categoryId' when calling PreReleaseApi->DeleteLeadSourceCategoryUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteLeadSourceCategoryUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/leadSourceCategories/{category_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLeadSourceCategoryUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Opportunity Stage Deletes the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOpportunityStageUsingDELETE(string stageId, int operationIndex = 0)
        {
            DeleteOpportunityStageUsingDELETEWithHttpInfo(stageId);
        }

        /// <summary>
        /// Delete an Opportunity Stage Deletes the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteOpportunityStageUsingDELETEWithHttpInfo(string stageId, int operationIndex = 0)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->DeleteOpportunityStageUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOpportunityStageUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunityStageUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Opportunity Stage Deletes the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOpportunityStageUsingDELETEAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOpportunityStageUsingDELETEWithHttpInfoAsync(stageId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Opportunity Stage Deletes the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteOpportunityStageUsingDELETEWithHttpInfoAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->DeleteOpportunityStageUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOpportunityStageUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunityStageUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Opportunity Deletes the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOpportunityUsingDELETE(string opportunityId, int operationIndex = 0)
        {
            DeleteOpportunityUsingDELETEWithHttpInfo(opportunityId);
        }

        /// <summary>
        /// Delete an Opportunity Deletes the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteOpportunityUsingDELETEWithHttpInfo(string opportunityId, int operationIndex = 0)
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->DeleteOpportunityUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOpportunityUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunityUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Opportunity Deletes the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOpportunityUsingDELETEAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOpportunityUsingDELETEWithHttpInfoAsync(opportunityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Opportunity Deletes the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteOpportunityUsingDELETEWithHttpInfoAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->DeleteOpportunityUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOpportunityUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOpportunityUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order&#39;s Custom Field Deletes a Custom Field from Order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOrderCustomFieldUsingDELETE(string customFieldId, int operationIndex = 0)
        {
            DeleteOrderCustomFieldUsingDELETEWithHttpInfo(customFieldId);
        }

        /// <summary>
        /// Delete an Order&#39;s Custom Field Deletes a Custom Field from Order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteOrderCustomFieldUsingDELETEWithHttpInfo(string customFieldId, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->DeleteOrderCustomFieldUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderCustomFieldUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/orders/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderCustomFieldUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order&#39;s Custom Field Deletes a Custom Field from Order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderCustomFieldUsingDELETEAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOrderCustomFieldUsingDELETEWithHttpInfoAsync(customFieldId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Order&#39;s Custom Field Deletes a Custom Field from Order.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteOrderCustomFieldUsingDELETEWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->DeleteOrderCustomFieldUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderCustomFieldUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/orders/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderCustomFieldUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order Total Discount Deletes a specified Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOrderTotalDiscountUsingDELETE(string discountId, int operationIndex = 0)
        {
            DeleteOrderTotalDiscountUsingDELETEWithHttpInfo(discountId);
        }

        /// <summary>
        /// Delete an Order Total Discount Deletes a specified Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteOrderTotalDiscountUsingDELETEWithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteOrderTotalDiscountUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderTotalDiscountUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderTotalDiscountUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order Total Discount Deletes a specified Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderTotalDiscountUsingDELETEAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOrderTotalDiscountUsingDELETEWithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Order Total Discount Deletes a specified Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteOrderTotalDiscountUsingDELETEWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->DeleteOrderTotalDiscountUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderTotalDiscountUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderTotalDiscountUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteOrderUsingDELETE1(string orderId, int operationIndex = 0)
        {
            DeleteOrderUsingDELETE1WithHttpInfo(orderId);
        }

        /// <summary>
        /// Delete an Order   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteOrderUsingDELETE1WithHttpInfo(string orderId, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->DeleteOrderUsingDELETE1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Order   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOrderUsingDELETE1Async(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteOrderUsingDELETE1WithHttpInfoAsync(orderId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Order   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteOrderUsingDELETE1WithHttpInfoAsync(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->DeleteOrderUsingDELETE1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteOrderUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOrderUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteProductUsingDELETE1(string productId, int operationIndex = 0)
        {
            DeleteProductUsingDELETE1WithHttpInfo(productId);
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteProductUsingDELETE1WithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->DeleteProductUsingDELETE1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteProductUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProductUsingDELETE1Async(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteProductUsingDELETE1WithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Product Deletes a single product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteProductUsingDELETE1WithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->DeleteProductUsingDELETE1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteProductUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteProductUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteRedirectLinkUsingDELETE(string redirectId, int operationIndex = 0)
        {
            DeleteRedirectLinkUsingDELETEWithHttpInfo(redirectId);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteRedirectLinkUsingDELETEWithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->DeleteRedirectLinkUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteRedirectLinkUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLinkUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRedirectLinkUsingDELETEAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteRedirectLinkUsingDELETEWithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Affiliate Link Deletes an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteRedirectLinkUsingDELETEWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->DeleteRedirectLinkUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteRedirectLinkUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRedirectLinkUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Task.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTaskCustomFieldUsingDELETE(string customFieldId, int operationIndex = 0)
        {
            DeleteTaskCustomFieldUsingDELETEWithHttpInfo(customFieldId);
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Task.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteTaskCustomFieldUsingDELETEWithHttpInfo(string customFieldId, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->DeleteTaskCustomFieldUsingDELETE");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteTaskCustomFieldUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/tasks/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskCustomFieldUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Task.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskCustomFieldUsingDELETEAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteTaskCustomFieldUsingDELETEWithHttpInfoAsync(customFieldId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Custom Field Deletes a Custom Field from Task.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteTaskCustomFieldUsingDELETEWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->DeleteTaskCustomFieldUsingDELETE");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteTaskCustomFieldUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/tasks/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskCustomFieldUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Task Deletes a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteTaskUsingDELETE1(string taskId, int operationIndex = 0)
        {
            DeleteTaskUsingDELETE1WithHttpInfo(taskId);
        }

        /// <summary>
        /// Delete a Task Deletes a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> DeleteTaskUsingDELETE1WithHttpInfo(string taskId, int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->DeleteTaskUsingDELETE1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteTaskUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a Task Deletes a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTaskUsingDELETE1Async(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteTaskUsingDELETE1WithHttpInfoAsync(taskId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a Task Deletes a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> DeleteTaskUsingDELETE1WithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->DeleteTaskUsingDELETE1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.DeleteTaskUsingDELETE1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTaskUsingDELETE1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateCommissionEarned</returns>
        public AffiliateCommissionEarned GetAffiliateCommissionTotalUsingGET(string affiliateId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = GetAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateCommissionEarned</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGETWithHttpInfo(string affiliateId, int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling PreReleaseApi->GetAffiliateCommissionTotalUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCommissionTotalUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotalUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateCommissionEarned</returns>
        public async System.Threading.Tasks.Task<AffiliateCommissionEarned> GetAffiliateCommissionTotalUsingGETAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned> localVarResponse = await GetAffiliateCommissionTotalUsingGETWithHttpInfoAsync(affiliateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission Earned and View LedgerURl for portal Get the Affiliate Commission Earned and View LedgerURl for portal
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateCommissionEarned)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateCommissionEarned>> GetAffiliateCommissionTotalUsingGETWithHttpInfoAsync(string affiliateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling PreReleaseApi->GetAffiliateCommissionTotalUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCommissionTotalUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateCommissionEarned>("/v2/affiliates/{affiliate_id}/commissionTotal", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionTotalUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionResponse</returns>
        public ListAffiliateCommissionResponse GetAffiliateCommissionsUsingGET(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> localVarResponse = GetAffiliateCommissionsUsingGETWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGETWithHttpInfo(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling PreReleaseApi->GetAffiliateCommissionsUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCommissionsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionResponse> GetAffiliateCommissionsUsingGETAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse> localVarResponse = await GetAffiliateCommissionsUsingGETWithHttpInfoAsync(affiliateId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Commission and Clawbacks Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="affiliateId">affiliate_id</param>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionResponse>> GetAffiliateCommissionsUsingGETWithHttpInfoAsync(string affiliateId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'affiliateId' is set
            if (affiliateId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateId' when calling PreReleaseApi->GetAffiliateCommissionsUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("affiliate_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(affiliateId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCommissionsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionResponse>("/v2/affiliates/{affiliate_id}:commissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCommissionsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel GetAffiliateCustomFieldsUsingGET(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = GetAffiliateCustomFieldsUsingGETWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> GetAffiliateCustomFieldsUsingGETWithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCustomFieldsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFieldsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> GetAffiliateCustomFieldsUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await GetAffiliateCustomFieldsUsingGETWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Affiliate Model Get the custom fields and optional properties for the Affiliate object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> GetAffiliateCustomFieldsUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.GetAffiliateCustomFieldsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/affiliates/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAffiliateCustomFieldsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateProgramV2</returns>
        public AffiliateProgramV2 GetCommissionProgramUsingGET(string commissionProgramId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> localVarResponse = GetCommissionProgramUsingGETWithHttpInfo(commissionProgramId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateProgramV2</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> GetCommissionProgramUsingGETWithHttpInfo(string commissionProgramId, int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->GetCommissionProgramUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetCommissionProgramUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgramUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateProgramV2</returns>
        public async System.Threading.Tasks.Task<AffiliateProgramV2> GetCommissionProgramUsingGETAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2> localVarResponse = await GetCommissionProgramUsingGETWithHttpInfoAsync(commissionProgramId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Commission Program Retrieves a single Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateProgramV2)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateProgramV2>> GetCommissionProgramUsingGETWithHttpInfoAsync(string commissionProgramId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->GetCommissionProgramUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetCommissionProgramUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateProgramV2>("/v2/affiliates/commissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCommissionProgramUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Contacts Get a list of Contacts based search parameters.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListBasicContactResponse</returns>
        public ListBasicContactResponse GetContactsBySearchTermUsingGET(string searchParam, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListBasicContactResponse> localVarResponse = GetContactsBySearchTermUsingGETWithHttpInfo(searchParam);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Contacts Get a list of Contacts based search parameters.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListBasicContactResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListBasicContactResponse> GetContactsBySearchTermUsingGETWithHttpInfo(string searchParam, int operationIndex = 0)
        {
            // verify the required parameter 'searchParam' is set
            if (searchParam == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'searchParam' when calling PreReleaseApi->GetContactsBySearchTermUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "searchParam", searchParam));

            localVarRequestOptions.Operation = "PreReleaseApi.GetContactsBySearchTermUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListBasicContactResponse>("/v2/contacts:search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactsBySearchTermUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search for Contacts Get a list of Contacts based search parameters.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListBasicContactResponse</returns>
        public async System.Threading.Tasks.Task<ListBasicContactResponse> GetContactsBySearchTermUsingGETAsync(string searchParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListBasicContactResponse> localVarResponse = await GetContactsBySearchTermUsingGETWithHttpInfoAsync(searchParam, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search for Contacts Get a list of Contacts based search parameters.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchParam">searchParam</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListBasicContactResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListBasicContactResponse>> GetContactsBySearchTermUsingGETWithHttpInfoAsync(string searchParam, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'searchParam' is set
            if (searchParam == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'searchParam' when calling PreReleaseApi->GetContactsBySearchTermUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "searchParam", searchParam));

            localVarRequestOptions.Operation = "PreReleaseApi.GetContactsBySearchTermUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListBasicContactResponse>("/v2/contacts:search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactsBySearchTermUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Category Discount Retrieves a single Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        public CategoryDiscount GetDiscountUsingGET(string discountId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = GetDiscountUsingGETWithHttpInfo(discountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Category Discount Retrieves a single Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> GetDiscountUsingGETWithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetDiscountUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetDiscountUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CategoryDiscount>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiscountUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Category Discount Retrieves a single Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        public async System.Threading.Tasks.Task<CategoryDiscount> GetDiscountUsingGETAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = await GetDiscountUsingGETWithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Category Discount Retrieves a single Category Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount>> GetDiscountUsingGETWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetDiscountUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetDiscountUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CategoryDiscount>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiscountUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Shipping Discount Retrieves a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        public ShippingDiscount GetDiscountUsingGET1(string discountId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = GetDiscountUsingGET1WithHttpInfo(discountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Shipping Discount Retrieves a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> GetDiscountUsingGET1WithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetDiscountUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetDiscountUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ShippingDiscount>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiscountUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Shipping Discount Retrieves a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        public async System.Threading.Tasks.Task<ShippingDiscount> GetDiscountUsingGET1Async(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = await GetDiscountUsingGET1WithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Shipping Discount Retrieves a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount>> GetDiscountUsingGET1WithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetDiscountUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetDiscountUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ShippingDiscount>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDiscountUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a file&#39;s data Retrieves a file&#39;s data
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>byte[]</returns>
        public byte[] GetFileDataUsingGET(string fileId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<byte[]> localVarResponse = GetFileDataUsingGETWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a file&#39;s data Retrieves a file&#39;s data
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public Keap.Sdk.Core.Client.ApiResponse<byte[]> GetFileDataUsingGETWithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->GetFileDataUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetFileDataUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<byte[]>("/v2/files/{file_id}:data", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileDataUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a file&#39;s data Retrieves a file&#39;s data
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GetFileDataUsingGETAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<byte[]> localVarResponse = await GetFileDataUsingGETWithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a file&#39;s data Retrieves a file&#39;s data
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<byte[]>> GetFileDataUsingGETWithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->GetFileDataUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetFileDataUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<byte[]>("/v2/files/{file_id}:data", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileDataUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a file Retrieves a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        public FileMetadata GetFileUsingGET1(string fileId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = GetFileUsingGET1WithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a file Retrieves a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        public Keap.Sdk.Core.Client.ApiResponse<FileMetadata> GetFileUsingGET1WithHttpInfo(string fileId, int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->GetFileUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetFileUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileMetadata>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a file Retrieves a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        public async System.Threading.Tasks.Task<FileMetadata> GetFileUsingGET1Async(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = await GetFileUsingGET1WithHttpInfoAsync(fileId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a file Retrieves a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<FileMetadata>> GetFileUsingGET1WithHttpInfoAsync(string fileId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->GetFileUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetFileUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FileMetadata>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Lead Score of a Contact Retrieves information about the Lead Score of a Contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadScore</returns>
        public LeadScore GetLeadScoreDetailsUsingGET(string contactId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadScore> localVarResponse = GetLeadScoreDetailsUsingGETWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Lead Score of a Contact Retrieves information about the Lead Score of a Contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadScore</returns>
        public Keap.Sdk.Core.Client.ApiResponse<LeadScore> GetLeadScoreDetailsUsingGETWithHttpInfo(string contactId, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'contactId' when calling PreReleaseApi->GetLeadScoreDetailsUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetLeadScoreDetailsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadScore>("/v2/contact/{contact_id}/leadScore", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadScoreDetailsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Lead Score of a Contact Retrieves information about the Lead Score of a Contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadScore</returns>
        public async System.Threading.Tasks.Task<LeadScore> GetLeadScoreDetailsUsingGETAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadScore> localVarResponse = await GetLeadScoreDetailsUsingGETWithHttpInfoAsync(contactId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Lead Score of a Contact Retrieves information about the Lead Score of a Contact
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">contact_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadScore)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<LeadScore>> GetLeadScoreDetailsUsingGETWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'contactId' when calling PreReleaseApi->GetLeadScoreDetailsUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetLeadScoreDetailsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadScore>("/v2/contact/{contact_id}/leadScore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadScoreDetailsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Lead Source Category Retrieves a single Lead Source Category for a given id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>LeadSourceCategory</returns>
        public LeadSourceCategory GetLeadSourceCategoryUsingGET(string categoryId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> localVarResponse = GetLeadSourceCategoryUsingGETWithHttpInfo(categoryId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Lead Source Category Retrieves a single Lead Source Category for a given id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of LeadSourceCategory</returns>
        public Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> GetLeadSourceCategoryUsingGETWithHttpInfo(string categoryId, int operationIndex = 0)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'categoryId' when calling PreReleaseApi->GetLeadSourceCategoryUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetLeadSourceCategoryUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<LeadSourceCategory>("/v2/leadSourceCategories/{category_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadSourceCategoryUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Lead Source Category Retrieves a single Lead Source Category for a given id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeadSourceCategory</returns>
        public async System.Threading.Tasks.Task<LeadSourceCategory> GetLeadSourceCategoryUsingGETAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory> localVarResponse = await GetLeadSourceCategoryUsingGETWithHttpInfoAsync(categoryId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Lead Source Category Retrieves a single Lead Source Category for a given id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">category_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeadSourceCategory)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<LeadSourceCategory>> GetLeadSourceCategoryUsingGETWithHttpInfoAsync(string categoryId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'categoryId' when calling PreReleaseApi->GetLeadSourceCategoryUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("category_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(categoryId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetLeadSourceCategoryUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<LeadSourceCategory>("/v2/leadSourceCategories/{category_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeadSourceCategoryUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Opportunity Stage Retrieves the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        public RestOpportunityStage GetOpportunityStageUsingGET(string stageId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = GetOpportunityStageUsingGETWithHttpInfo(stageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Opportunity Stage Retrieves the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> GetOpportunityStageUsingGETWithHttpInfo(string stageId, int operationIndex = 0)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->GetOpportunityStageUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOpportunityStageUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestOpportunityStage>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityStageUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Opportunity Stage Retrieves the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        public async System.Threading.Tasks.Task<RestOpportunityStage> GetOpportunityStageUsingGETAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = await GetOpportunityStageUsingGETWithHttpInfoAsync(stageId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Opportunity Stage Retrieves the specified Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage>> GetOpportunityStageUsingGETWithHttpInfoAsync(string stageId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->GetOpportunityStageUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOpportunityStageUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestOpportunityStage>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityStageUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Opportunity Retrieves the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        public RestV2Opportunity GetOpportunityUsingGET1(string opportunityId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = GetOpportunityUsingGET1WithHttpInfo(opportunityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Opportunity Retrieves the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> GetOpportunityUsingGET1WithHttpInfo(string opportunityId, int operationIndex = 0)
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->GetOpportunityUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOpportunityUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestV2Opportunity>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Opportunity Retrieves the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        public async System.Threading.Tasks.Task<RestV2Opportunity> GetOpportunityUsingGET1Async(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = await GetOpportunityUsingGET1WithHttpInfoAsync(opportunityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Opportunity Retrieves the specified Opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity>> GetOpportunityUsingGET1WithHttpInfoAsync(string opportunityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->GetOpportunityUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOpportunityUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestV2Opportunity>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOpportunityUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order Total Discount Retrieves an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        public OrderTotalDiscount GetOrderTotalDiscountUsingGET(string discountId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = GetOrderTotalDiscountUsingGETWithHttpInfo(discountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order Total Discount Retrieves an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> GetOrderTotalDiscountUsingGETWithHttpInfo(string discountId, int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetOrderTotalDiscountUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOrderTotalDiscountUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<OrderTotalDiscount>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderTotalDiscountUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order Total Discount Retrieves an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        public async System.Threading.Tasks.Task<OrderTotalDiscount> GetOrderTotalDiscountUsingGETAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = await GetOrderTotalDiscountUsingGETWithHttpInfoAsync(discountId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order Total Discount Retrieves an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount>> GetOrderTotalDiscountUsingGETWithHttpInfoAsync(string discountId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->GetOrderTotalDiscountUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOrderTotalDiscountUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OrderTotalDiscount>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderTotalDiscountUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order Retrieves a single Order for a given order id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        public RestV2Order GetOrderUsingGET1(string orderId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = GetOrderUsingGET1WithHttpInfo(orderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order Retrieves a single Order for a given order id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Order> GetOrderUsingGET1WithHttpInfo(string orderId, int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->GetOrderUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOrderUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestV2Order>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order Retrieves a single Order for a given order id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        public async System.Threading.Tasks.Task<RestV2Order> GetOrderUsingGET1Async(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = await GetOrderUsingGET1WithHttpInfoAsync(orderId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order Retrieves a single Order for a given order id
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Order>> GetOrderUsingGET1WithHttpInfoAsync(string orderId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->GetOrderUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetOrderUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestV2Order>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOrderUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Product</returns>
        public RestV2Product GetProductUsingGET(string productId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = GetProductUsingGETWithHttpInfo(productId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Product</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Product> GetProductUsingGETWithHttpInfo(string productId, int operationIndex = 0)
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->GetProductUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetProductUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Product</returns>
        public async System.Threading.Tasks.Task<RestV2Product> GetProductUsingGETAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Product> localVarResponse = await GetProductUsingGETWithHttpInfoAsync(productId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Product Gets a single Product
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="productId">product_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Product)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Product>> GetProductUsingGETWithHttpInfoAsync(string productId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'productId' is set
            if (productId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'productId' when calling PreReleaseApi->GetProductUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("product_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(productId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetProductUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RestV2Product>("/v2/products/{product_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProductUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink GetRedirectLinkUsingGET(string redirectId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = GetRedirectLinkUsingGETWithHttpInfo(redirectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> GetRedirectLinkUsingGETWithHttpInfo(string redirectId, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->GetRedirectLinkUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetRedirectLinkUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLinkUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> GetRedirectLinkUsingGETAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await GetRedirectLinkUsingGETWithHttpInfoAsync(redirectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Affiliate Link Retrieves information about a single Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> GetRedirectLinkUsingGETWithHttpInfoAsync(string redirectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->GetRedirectLinkUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetRedirectLinkUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRedirectLinkUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Task Retrieves a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Task</returns>
        public Task GetTaskUsingGET1(string taskId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Task> localVarResponse = GetTaskUsingGET1WithHttpInfo(taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Task Retrieves a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Task</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Task> GetTaskUsingGET1WithHttpInfo(string taskId, int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->GetTaskUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetTaskUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Task>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Task Retrieves a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Task</returns>
        public async System.Threading.Tasks.Task<Task> GetTaskUsingGET1Async(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Task> localVarResponse = await GetTaskUsingGET1WithHttpInfoAsync(taskId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Task Retrieves a single task
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Task)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Task>> GetTaskUsingGET1WithHttpInfoAsync(string taskId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->GetTaskUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetTaskUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Task>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTaskUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetUserByIdUsingGET(string userId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = GetUserByIdUsingGETWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Keap.Sdk.Core.Client.ApiResponse<User> GetUserByIdUsingGETWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->GetUserByIdUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetUserByIdUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserByIdUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserByIdUsingGETAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = await GetUserByIdUsingGETWithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Retrieves a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<User>> GetUserByIdUsingGETWithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->GetUserByIdUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetUserByIdUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserByIdUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserInfoResponse</returns>
        public GetUserInfoResponse GetUserInfoUsingGET1(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<GetUserInfoResponse> localVarResponse = GetUserInfoUsingGET1WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserInfoResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<GetUserInfoResponse> GetUserInfoUsingGET1WithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.GetUserInfoUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserInfoResponse>("/v2/oauth/connect/userinfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfoUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetUserInfoResponse> GetUserInfoUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<GetUserInfoResponse> localVarResponse = await GetUserInfoUsingGET1WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve User Info Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserInfoResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<GetUserInfoResponse>> GetUserInfoUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.GetUserInfoUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserInfoResponse>("/v2/oauth/connect/userinfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserInfoUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetUserSignatureUsingGET1(string userId, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<string> localVarResponse = GetUserSignatureUsingGET1WithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Keap.Sdk.Core.Client.ApiResponse<string> GetUserSignatureUsingGET1WithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->GetUserSignatureUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetUserSignatureUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/v2/users/{user_id}/signature", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSignatureUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetUserSignatureUsingGET1Async(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<string> localVarResponse = await GetUserSignatureUsingGET1WithHttpInfoAsync(userId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User email signature Retrieves a HTML snippet that contains the user&#39;s email signature.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<string>> GetUserSignatureUsingGET1WithHttpInfoAsync(string userId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->GetUserSignatureUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.GetUserSignatureUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/v2/users/{user_id}/signature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserSignatureUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateCommissionProgramsResponse</returns>
        public ListAffiliateCommissionProgramsResponse ListAffiliateCommissionProgramsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = ListAffiliateCommissionProgramsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateCommissionProgramsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListAffiliateCommissionProgramsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionProgramsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateCommissionProgramsResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateCommissionProgramsResponse> ListAffiliateCommissionProgramsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = await ListAffiliateCommissionProgramsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Commission Programs Retrieves a list of Affiliate Commission Programs
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateCommissionProgramsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateCommissionProgramsResponse>> ListAffiliateCommissionProgramsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListAffiliateCommissionProgramsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateCommissionProgramsResponse>("/v2/affiliates/commissionPrograms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateCommissionProgramsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateLinksResponse</returns>
        public ListAffiliateLinksResponse ListAffiliateLinksUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = ListAffiliateLinksUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateLinksResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> ListAffiliateLinksUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListAffiliateLinksUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinksUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateLinksResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateLinksResponse> ListAffiliateLinksUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse> localVarResponse = await ListAffiliateLinksUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Links Retrieves a list of Affiliate Links
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateLinksResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateLinksResponse>> ListAffiliateLinksUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListAffiliateLinksUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateLinksResponse>("/v2/affiliates/redirects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAffiliateLinksUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Category Discounts Retrieve a list of Category Discounts.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCategoryDiscountsResponse</returns>
        public ListCategoryDiscountsResponse ListCategoryDiscountsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCategoryDiscountsResponse> localVarResponse = ListCategoryDiscountsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Category Discounts Retrieve a list of Category Discounts.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCategoryDiscountsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListCategoryDiscountsResponse> ListCategoryDiscountsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListCategoryDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCategoryDiscountsResponse>("/v2/discounts/productCategories", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategoryDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Category Discounts Retrieve a list of Category Discounts.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCategoryDiscountsResponse</returns>
        public async System.Threading.Tasks.Task<ListCategoryDiscountsResponse> ListCategoryDiscountsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCategoryDiscountsResponse> localVarResponse = await ListCategoryDiscountsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Category Discounts Retrieve a list of Category Discounts.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, the allowed field is: - (String) product_category_id You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_category_id%3D%3D4&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - name One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCategoryDiscountsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListCategoryDiscountsResponse>> ListCategoryDiscountsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListCategoryDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCategoryDiscountsResponse>("/v2/discounts/productCategories", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCategoryDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Countries 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListCountriesResponse</returns>
        public ListCountriesResponse ListCountriesUsingGET2(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCountriesResponse> localVarResponse = ListCountriesUsingGET2WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Countries 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListCountriesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListCountriesResponse> ListCountriesUsingGET2WithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.ListCountriesUsingGET2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListCountriesResponse>("/v2/locales/countries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCountriesUsingGET2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Countries 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListCountriesResponse</returns>
        public async System.Threading.Tasks.Task<ListCountriesResponse> ListCountriesUsingGET2Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListCountriesResponse> localVarResponse = await ListCountriesUsingGET2WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Countries 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListCountriesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListCountriesResponse>> ListCountriesUsingGET2WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.ListCountriesUsingGET2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListCountriesResponse>("/v2/locales/countries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCountriesUsingGET2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Shipping Discounts Retrieves all Shipping Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListShippingDiscountsResponse</returns>
        public ListShippingDiscountsResponse ListDiscountsUsingGET(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListShippingDiscountsResponse> localVarResponse = ListDiscountsUsingGETWithHttpInfo(fields, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Shipping Discounts Retrieves all Shipping Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListShippingDiscountsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListShippingDiscountsResponse> ListDiscountsUsingGETWithHttpInfo(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "fields", fields));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListShippingDiscountsResponse>("/v2/discounts/shipping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Shipping Discounts Retrieves all Shipping Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListShippingDiscountsResponse</returns>
        public async System.Threading.Tasks.Task<ListShippingDiscountsResponse> ListDiscountsUsingGETAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListShippingDiscountsResponse> localVarResponse = await ListDiscountsUsingGETWithHttpInfoAsync(fields, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Shipping Discounts Retrieves all Shipping Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">TODO: PAPI-1449 (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListShippingDiscountsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListShippingDiscountsResponse>> ListDiscountsUsingGETWithHttpInfoAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "fields", fields));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListShippingDiscountsResponse>("/v2/discounts/shipping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all files Retrieves all files
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFilesResponse</returns>
        public ListFilesResponse ListFilesUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListFilesResponse> localVarResponse = ListFilesUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all files Retrieves all files
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFilesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListFilesResponse> ListFilesUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListFilesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFilesResponse>("/v2/files", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFilesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all files Retrieves all files
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFilesResponse</returns>
        public async System.Threading.Tasks.Task<ListFilesResponse> ListFilesUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListFilesResponse> localVarResponse = await ListFilesUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all files Retrieves all files
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (Boolean) is_public - (String) contact_id - (String) user_id - (String) category - (String) file_box_type  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;contact_id%3D%3D123&#x60; - &#x60;filter&#x3D;category%3D%3DATTACHMENTS&#x60; - &#x60;filter&#x3D;file_box_type%3D%3DTICKET%3Bcategory%3D%3DATTACHMENTS&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - file_name - updated_time - ... One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFilesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListFilesResponse>> ListFilesUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListFilesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFilesResponse>("/v2/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFilesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Landing Pages Retrieves a list of all landing pages
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLandingPagesResponse</returns>
        public ListLandingPagesResponse ListLandingPagesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListLandingPagesResponse> localVarResponse = ListLandingPagesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Landing Pages Retrieves a list of all landing pages
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLandingPagesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListLandingPagesResponse> ListLandingPagesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListLandingPagesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLandingPagesResponse>("/v2/landingpages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLandingPagesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Landing Pages Retrieves a list of all landing pages
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLandingPagesResponse</returns>
        public async System.Threading.Tasks.Task<ListLandingPagesResponse> ListLandingPagesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListLandingPagesResponse> localVarResponse = await ListLandingPagesUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Landing Pages Retrieves a list of all landing pages
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLandingPagesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListLandingPagesResponse>> ListLandingPagesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListLandingPagesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLandingPagesResponse>("/v2/landingpages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLandingPagesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Lead Sources Retrieves a list of lead sources
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListLeadSourcesResponse</returns>
        public ListLeadSourcesResponse ListLeadSourcesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListLeadSourcesResponse> localVarResponse = ListLeadSourcesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Lead Sources Retrieves a list of lead sources
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListLeadSourcesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListLeadSourcesResponse> ListLeadSourcesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListLeadSourcesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListLeadSourcesResponse>("/v2/leadsources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLeadSourcesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Lead Sources Retrieves a list of lead sources
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListLeadSourcesResponse</returns>
        public async System.Threading.Tasks.Task<ListLeadSourcesResponse> ListLeadSourcesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListLeadSourcesResponse> localVarResponse = await ListLeadSourcesUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Lead Sources Retrieves a list of lead sources
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListLeadSourcesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListLeadSourcesResponse>> ListLeadSourcesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListLeadSourcesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListLeadSourcesResponse>("/v2/leadsources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListLeadSourcesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Merchant accounts Retrieves a list of Merchant accounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRestMerchantResponse</returns>
        public ListRestMerchantResponse ListMerchantsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListRestMerchantResponse> localVarResponse = ListMerchantsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Merchant accounts Retrieves a list of Merchant accounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRestMerchantResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListRestMerchantResponse> ListMerchantsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListMerchantsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRestMerchantResponse>("/v2/merchants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchantsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Merchant accounts Retrieves a list of Merchant accounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRestMerchantResponse</returns>
        public async System.Threading.Tasks.Task<ListRestMerchantResponse> ListMerchantsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListRestMerchantResponse> localVarResponse = await ListMerchantsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Merchant accounts Retrieves a list of Merchant accounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRestMerchantResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListRestMerchantResponse>> ListMerchantsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListMerchantsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRestMerchantResponse>("/v2/merchants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListMerchantsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Note Templates Retrieves a list of Note Templates
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListNoteTemplateResponse</returns>
        public ListNoteTemplateResponse ListNoteTemplatesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListNoteTemplateResponse> localVarResponse = ListNoteTemplatesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Note Templates Retrieves a list of Note Templates
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListNoteTemplateResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListNoteTemplateResponse> ListNoteTemplatesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListNoteTemplatesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNoteTemplateResponse>("/v2/notes/templates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNoteTemplatesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Note Templates Retrieves a list of Note Templates
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNoteTemplateResponse</returns>
        public async System.Threading.Tasks.Task<ListNoteTemplateResponse> ListNoteTemplatesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListNoteTemplateResponse> localVarResponse = await ListNoteTemplatesUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Note Templates Retrieves a list of Note Templates
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNoteTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListNoteTemplateResponse>> ListNoteTemplatesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListNoteTemplatesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListNoteTemplateResponse>("/v2/notes/templates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListNoteTemplatesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Opportunities Retrieves a list of all Opportunities.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOpportunitiesResponse</returns>
        public ListOpportunitiesResponse ListOpportunitiesUsingGET1(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOpportunitiesResponse> localVarResponse = ListOpportunitiesUsingGET1WithHttpInfo(fields, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Opportunities Retrieves a list of all Opportunities.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOpportunitiesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListOpportunitiesResponse> ListOpportunitiesUsingGET1WithHttpInfo(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "fields", fields));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOpportunitiesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOpportunitiesResponse>("/v2/opportunities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOpportunitiesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Opportunities Retrieves a list of all Opportunities.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOpportunitiesResponse</returns>
        public async System.Threading.Tasks.Task<ListOpportunitiesResponse> ListOpportunitiesUsingGET1Async(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOpportunitiesResponse> localVarResponse = await ListOpportunitiesUsingGET1WithHttpInfoAsync(fields, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Opportunities Retrieves a list of all Opportunities.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fields">fields (optional)</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOpportunitiesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListOpportunitiesResponse>> ListOpportunitiesUsingGET1WithHttpInfoAsync(List<string>? fields = default(List<string>?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "fields", fields));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOpportunitiesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOpportunitiesResponse>("/v2/opportunities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOpportunitiesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of Opportunity Stages Retrieves a list of Opportunity Stages.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOpportunityStagesResponse</returns>
        public ListOpportunityStagesResponse ListOpportunityStagesUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOpportunityStagesResponse> localVarResponse = ListOpportunityStagesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Opportunity Stages Retrieves a list of Opportunity Stages.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOpportunityStagesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListOpportunityStagesResponse> ListOpportunityStagesUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOpportunityStagesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOpportunityStagesResponse>("/v2/opportunities/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOpportunityStagesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of Opportunity Stages Retrieves a list of Opportunity Stages.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOpportunityStagesResponse</returns>
        public async System.Threading.Tasks.Task<ListOpportunityStagesResponse> ListOpportunityStagesUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOpportunityStagesResponse> localVarResponse = await ListOpportunityStagesUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of Opportunity Stages Retrieves a list of Opportunity Stages.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOpportunityStagesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListOpportunityStagesResponse>> ListOpportunityStagesUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOpportunityStagesUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOpportunityStagesResponse>("/v2/opportunities/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOpportunityStagesUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Order Payments Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrderPaymentsResponse</returns>
        public ListOrderPaymentsResponse ListOrderPaymentsUsingGET1(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrderPaymentsResponse> localVarResponse = ListOrderPaymentsUsingGET1WithHttpInfo(orderId, filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Order Payments Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrderPaymentsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListOrderPaymentsResponse> ListOrderPaymentsUsingGET1WithHttpInfo(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->ListOrderPaymentsUsingGET1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrderPaymentsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOrderPaymentsResponse>("/v2/orders/{order_id}/payments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderPaymentsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Order Payments Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrderPaymentsResponse</returns>
        public async System.Threading.Tasks.Task<ListOrderPaymentsResponse> ListOrderPaymentsUsingGET1Async(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrderPaymentsResponse> localVarResponse = await ListOrderPaymentsUsingGET1WithHttpInfoAsync(orderId, filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Order Payments Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrderPaymentsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListOrderPaymentsResponse>> ListOrderPaymentsUsingGET1WithHttpInfoAsync(string orderId, string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->ListOrderPaymentsUsingGET1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrderPaymentsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOrderPaymentsResponse>("/v2/orders/{order_id}/payments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderPaymentsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Order Total Discounts Retrieves all Order Total Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrderTotalDiscountsResponse</returns>
        public ListOrderTotalDiscountsResponse ListOrderTotalDiscountsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrderTotalDiscountsResponse> localVarResponse = ListOrderTotalDiscountsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Order Total Discounts Retrieves all Order Total Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrderTotalDiscountsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListOrderTotalDiscountsResponse> ListOrderTotalDiscountsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrderTotalDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOrderTotalDiscountsResponse>("/v2/discounts/orderTotals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderTotalDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all Order Total Discounts Retrieves all Order Total Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrderTotalDiscountsResponse</returns>
        public async System.Threading.Tasks.Task<ListOrderTotalDiscountsResponse> ListOrderTotalDiscountsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrderTotalDiscountsResponse> localVarResponse = await ListOrderTotalDiscountsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all Order Total Discounts Retrieves all Order Total Discounts
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrderTotalDiscountsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListOrderTotalDiscountsResponse>> ListOrderTotalDiscountsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrderTotalDiscountsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOrderTotalDiscountsResponse>("/v2/discounts/orderTotals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrderTotalDiscountsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders Retrieves a list of orders
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListOrders</returns>
        public ListOrders ListOrdersUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrders> localVarResponse = ListOrdersUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List orders Retrieves a list of orders
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListOrders</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListOrders> ListOrdersUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrdersUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListOrders>("/v2/orders", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrdersUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List orders Retrieves a list of orders
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListOrders</returns>
        public async System.Threading.Tasks.Task<ListOrders> ListOrdersUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListOrders> localVarResponse = await ListOrdersUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List orders Retrieves a list of orders
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListOrders)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListOrders>> ListOrdersUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListOrdersUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListOrders>("/v2/orders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOrdersUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProductsResponse</returns>
        public ListProductsResponse ListProductsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListProductsResponse> localVarResponse = ListProductsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProductsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListProductsResponse> ListProductsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListProductsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListProductsResponse>("/v2/products", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProductsResponse</returns>
        public async System.Threading.Tasks.Task<ListProductsResponse> ListProductsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListProductsResponse> localVarResponse = await ListProductsUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Products Retrieves a list of Products
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProductsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListProductsResponse>> ListProductsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListProductsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListProductsResponse>("/v2/products", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProductsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a Country&#39;s Provinces 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListProvincesResponse</returns>
        public ListProvincesResponse ListProvincesForCountryUsingGET(string countryCode, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListProvincesResponse> localVarResponse = ListProvincesForCountryUsingGETWithHttpInfo(countryCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a Country&#39;s Provinces 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListProvincesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListProvincesResponse> ListProvincesForCountryUsingGETWithHttpInfo(string countryCode, int operationIndex = 0)
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'countryCode' when calling PreReleaseApi->ListProvincesForCountryUsingGET");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.ListProvincesForCountryUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListProvincesResponse>("/v2/locales/countries/{country_code}/provinces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProvincesForCountryUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List a Country&#39;s Provinces 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListProvincesResponse</returns>
        public async System.Threading.Tasks.Task<ListProvincesResponse> ListProvincesForCountryUsingGETAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListProvincesResponse> localVarResponse = await ListProvincesForCountryUsingGETWithHttpInfoAsync(countryCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List a Country&#39;s Provinces 
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryCode">country_code</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListProvincesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListProvincesResponse>> ListProvincesForCountryUsingGETWithHttpInfoAsync(string countryCode, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'countryCode' is set
            if (countryCode == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'countryCode' when calling PreReleaseApi->ListProvincesForCountryUsingGET");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("country_code", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(countryCode)); // path parameter

            localVarRequestOptions.Operation = "PreReleaseApi.ListProvincesForCountryUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListProvincesResponse>("/v2/locales/countries/{country_code}/provinces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListProvincesForCountryUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Shipping methods Retrieves a list of Shipping methods
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRestShippingMethodsResponse</returns>
        public ListRestShippingMethodsResponse ListShippingMethodsUsingGET(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListRestShippingMethodsResponse> localVarResponse = ListShippingMethodsUsingGETWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Shipping methods Retrieves a list of Shipping methods
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRestShippingMethodsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListRestShippingMethodsResponse> ListShippingMethodsUsingGETWithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.ListShippingMethodsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRestShippingMethodsResponse>("/v2/shipping", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShippingMethodsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Shipping methods Retrieves a list of Shipping methods
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRestShippingMethodsResponse</returns>
        public async System.Threading.Tasks.Task<ListRestShippingMethodsResponse> ListShippingMethodsUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListRestShippingMethodsResponse> localVarResponse = await ListShippingMethodsUsingGETWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Shipping methods Retrieves a list of Shipping methods
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRestShippingMethodsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListRestShippingMethodsResponse>> ListShippingMethodsUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.ListShippingMethodsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRestShippingMethodsResponse>("/v2/shipping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListShippingMethodsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionPlansResponse</returns>
        public ListSubscriptionPlansResponse ListSubscriptionPlansUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionPlansResponse> localVarResponse = ListSubscriptionPlansUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionPlansResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionPlansResponse> ListSubscriptionPlansUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSubscriptionPlansUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubscriptionPlansResponse>("/v2/subscriptionPlans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionPlansUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionPlansResponse</returns>
        public async System.Threading.Tasks.Task<ListSubscriptionPlansResponse> ListSubscriptionPlansUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionPlansResponse> localVarResponse = await ListSubscriptionPlansUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscription Plans Retrieves a list of Subscription Plans
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are:   - (String) name    (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionPlansResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionPlansResponse>> ListSubscriptionPlansUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSubscriptionPlansUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubscriptionPlansResponse>("/v2/subscriptionPlans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionPlansUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsResponse</returns>
        public ListSubscriptionsResponse ListSubscriptionsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> localVarResponse = ListSubscriptionsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> ListSubscriptionsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSubscriptionsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubscriptionsResponse>("/v2/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubscriptionsResponse> ListSubscriptionsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> localVarResponse = await ListSubscriptionsUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse>> ListSubscriptionsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSubscriptionsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubscriptionsResponse>("/v2/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAffiliateSummariesResponse</returns>
        public ListAffiliateSummariesResponse ListSummariesUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = ListSummariesUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAffiliateSummariesResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> ListSummariesUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSummariesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummariesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAffiliateSummariesResponse</returns>
        public async System.Threading.Tasks.Task<ListAffiliateSummariesResponse> ListSummariesUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse> localVarResponse = await ListSummariesUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Affiliate Summaries Retrieve a list of Affiliate Summaries
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAffiliateSummariesResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListAffiliateSummariesResponse>> ListSummariesUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListSummariesUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAffiliateSummariesResponse>("/v2/affiliates/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummariesUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tasks Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTasksResponse</returns>
        public ListTasksResponse ListTasksUsingGET1(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListTasksResponse> localVarResponse = ListTasksUsingGET1WithHttpInfo(endDueTime, filter, orderBy, pageSize, pageToken, startDueTime);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tasks Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTasksResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListTasksResponse> ListTasksUsingGET1WithHttpInfo(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endDueTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "end_due_time", endDueTime));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (startDueTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "start_due_time", startDueTime));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListTasksUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTasksResponse>("/v2/tasks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTasksUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tasks Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTasksResponse</returns>
        public async System.Threading.Tasks.Task<ListTasksResponse> ListTasksUsingGET1Async(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListTasksResponse> localVarResponse = await ListTasksUsingGET1WithHttpInfoAsync(endDueTime, filter, orderBy, pageSize, pageToken, startDueTime, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tasks Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endDueTime"> (optional)</param>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="startDueTime"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTasksResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListTasksResponse>> ListTasksUsingGET1WithHttpInfoAsync(string? endDueTime = default(string?), string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), string? startDueTime = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (endDueTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "end_due_time", endDueTime));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (startDueTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "start_due_time", startDueTime));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListTasksUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTasksResponse>("/v2/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTasksUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUserResponse</returns>
        public ListUserResponse ListUsersUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListUserResponse> localVarResponse = ListUsersUsingGET1WithHttpInfo(filter, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUserResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListUserResponse> ListUsersUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListUsersUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUserResponse>("/v2/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUserResponse</returns>
        public async System.Threading.Tasks.Task<ListUserResponse> ListUsersUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListUserResponse> localVarResponse = await ListUsersUsingGET1WithHttpInfoAsync(filter, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users Retrieves a list of users
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Search filter to apply to results (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUserResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListUserResponse>> ListUsersUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "PreReleaseApi.ListUsersUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUserResponse>("/v2/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SetDefaultCommissionProgramResponse</returns>
        public SetDefaultCommissionProgramResponse PatchDefaultCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = PatchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SetDefaultCommissionProgramResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchDefaultCommissionProgramUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchDefaultCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDefaultCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SetDefaultCommissionProgramResponse</returns>
        public async System.Threading.Tasks.Task<SetDefaultCommissionProgramResponse> PatchDefaultCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = await PatchDefaultCommissionProgramUsingPATCHWithHttpInfoAsync(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Default Commission Program Updates a Default Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchDefaultCommissionProgramRequest">Values of the default Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SetDefaultCommissionProgramResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SetDefaultCommissionProgramResponse>> PatchDefaultCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchDefaultCommissionProgramRequest? patchDefaultCommissionProgramRequest = default(PatchDefaultCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchDefaultCommissionProgramUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchDefaultCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchDefaultCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SetDefaultCommissionProgramResponse>("/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchDefaultCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order Updates an Order
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Order</returns>
        public RestV2Order PatchOrderUsingPATCH(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = PatchOrderUsingPATCHWithHttpInfo(orderId, updateMask, restV2PatchOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order Updates an Order
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Order</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Order> PatchOrderUsingPATCHWithHttpInfo(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->PatchOrderUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = restV2PatchOrderRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchOrderUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestV2Order>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrderUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order Updates an Order
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Order</returns>
        public async System.Threading.Tasks.Task<RestV2Order> PatchOrderUsingPATCHAsync(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Order> localVarResponse = await PatchOrderUsingPATCHWithHttpInfoAsync(orderId, updateMask, restV2PatchOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order Updates an Order
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">order_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="restV2PatchOrderRequest">order (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Order)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Order>> PatchOrderUsingPATCHWithHttpInfoAsync(string orderId, List<string>? updateMask = default(List<string>?), RestV2PatchOrderRequest? restV2PatchOrderRequest = default(RestV2PatchOrderRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'orderId' is set
            if (orderId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'orderId' when calling PreReleaseApi->PatchOrderUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("order_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = restV2PatchOrderRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchOrderUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestV2Order>("/v2/orders/{order_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchOrderUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ProductCommissionProgram</returns>
        public ProductCommissionProgram PatchProductCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = PatchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchProductCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ProductCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchProductCommissionProgramUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchProductCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProductCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProductCommissionProgram</returns>
        public async System.Threading.Tasks.Task<ProductCommissionProgram> PatchProductCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram> localVarResponse = await PatchProductCommissionProgramUsingPATCHWithHttpInfoAsync(commissionProgramId, updateMask, patchProductCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Product Commission Program Updates a Product Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchProductCommissionProgramRequest">Values of the product Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProductCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ProductCommissionProgram>> PatchProductCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchProductCommissionProgramRequest? patchProductCommissionProgramRequest = default(PatchProductCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchProductCommissionProgramUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchProductCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchProductCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProductCommissionProgram>("/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchProductCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionCommissionProgram</returns>
        public SubscriptionCommissionProgram PatchSubscriptionCommissionProgramUsingPATCH(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionCommissionProgram</returns>
        public Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchSubscriptionCommissionProgramUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchSubscriptionCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubscriptionCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionCommissionProgram</returns>
        public async System.Threading.Tasks.Task<SubscriptionCommissionProgram> PatchSubscriptionCommissionProgramUsingPATCHAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram> localVarResponse = await PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfoAsync(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription Commission Program Updates a Subscription Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionProgramId">commission_program_id</param>
        /// <param name="updateMask">update_mask (optional)</param>
        /// <param name="patchSubscriptionCommissionProgramRequest">Values of the subscription Commission Program (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionCommissionProgram)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<SubscriptionCommissionProgram>> PatchSubscriptionCommissionProgramUsingPATCHWithHttpInfoAsync(string commissionProgramId, List<string>? updateMask = default(List<string>?), PatchSubscriptionCommissionProgramRequest? patchSubscriptionCommissionProgramRequest = default(PatchSubscriptionCommissionProgramRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionProgramId' is set
            if (commissionProgramId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionProgramId' when calling PreReleaseApi->PatchSubscriptionCommissionProgramUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_program_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionProgramId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchSubscriptionCommissionProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchSubscriptionCommissionProgramUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<SubscriptionCommissionProgram>("/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchSubscriptionCommissionProgramUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Task Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTaskResponse</returns>
        public UpdateTaskResponse PatchTaskUsingPATCH(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<UpdateTaskResponse> localVarResponse = PatchTaskUsingPATCHWithHttpInfo(taskId, updateMask, createPatchTaskRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Task Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTaskResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<UpdateTaskResponse> PatchTaskUsingPATCHWithHttpInfo(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->PatchTaskUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = createPatchTaskRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchTaskUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateTaskResponse>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTaskUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Task Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTaskResponse</returns>
        public async System.Threading.Tasks.Task<UpdateTaskResponse> PatchTaskUsingPATCHAsync(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<UpdateTaskResponse> localVarResponse = await PatchTaskUsingPATCHWithHttpInfoAsync(taskId, updateMask, createPatchTaskRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Task Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">task_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="createPatchTaskRequest">task (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTaskResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<UpdateTaskResponse>> PatchTaskUsingPATCHWithHttpInfoAsync(string taskId, List<string>? updateMask = default(List<string>?), CreatePatchTaskRequest? createPatchTaskRequest = default(CreatePatchTaskRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'taskId' is set
            if (taskId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'taskId' when calling PreReleaseApi->PatchTaskUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("task_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(taskId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = createPatchTaskRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchTaskUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateTaskResponse>("/v2/tasks/{task_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchTaskUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User PatchUserUsingPATCH(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = PatchUserUsingPATCHWithHttpInfo(userId, updateMask, patchUserRequestV2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public Keap.Sdk.Core.Client.ApiResponse<User> PatchUserUsingPATCHWithHttpInfo(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->PatchUserUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchUserRequestV2;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchUserUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> PatchUserUsingPATCHAsync(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<User> localVarResponse = await PatchUserUsingPATCHWithHttpInfoAsync(userId, updateMask, patchUserRequestV2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Updates information on a specific User
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">user_id</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="patchUserRequestV2">user (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<User>> PatchUserUsingPATCHWithHttpInfoAsync(string userId, List<string>? updateMask = default(List<string>?), PatchUserRequestV2? patchUserRequestV2 = default(PatchUserRequestV2?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'userId' when calling PreReleaseApi->PatchUserUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("user_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchUserRequestV2;

            localVarRequestOptions.Operation = "PreReleaseApi.PatchUserUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<User>("/v2/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchUserUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveAffiliateFromProgramUsingPOST(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0)
        {
            RemoveAffiliateFromProgramUsingPOSTWithHttpInfo(id, affiliateRemoveFromProgramRequest);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> RemoveAffiliateFromProgramUsingPOSTWithHttpInfo(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->RemoveAffiliateFromProgramUsingPOST");
            }

            // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
            if (affiliateRemoveFromProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateRemoveFromProgramRequest' when calling PreReleaseApi->RemoveAffiliateFromProgramUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateRemoveFromProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.RemoveAffiliateFromProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAffiliateFromProgramUsingPOSTAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveAffiliateFromProgramUsingPOSTWithHttpInfoAsync(id, affiliateRemoveFromProgramRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove an Affiliate from a Commission Program Removes an Affiliate from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id</param>
        /// <param name="affiliateRemoveFromProgramRequest">removeFromProgramRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> RemoveAffiliateFromProgramUsingPOSTWithHttpInfoAsync(string id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling PreReleaseApi->RemoveAffiliateFromProgramUsingPOST");
            }

            // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
            if (affiliateRemoveFromProgramRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'affiliateRemoveFromProgramRequest' when calling PreReleaseApi->RemoveAffiliateFromProgramUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = affiliateRemoveFromProgramRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.RemoveAffiliateFromProgramUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/{id}:removeFromProgram", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveAffiliateFromProgramUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionId' when calling PreReleaseApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling PreReleaseApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfoAsync(commissionId, deleteSubscriptionPlanCommissionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Remove a Subscription from a Commission Program Removes a Subscription from a Commission Program
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commissionId">commission_id</param>
        /// <param name="deleteSubscriptionPlanCommissionRequest">deleteSubscriptionPlanCommissionRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> RemoveSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfoAsync(string commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'commissionId' is set
            if (commissionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'commissionId' when calling PreReleaseApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST");
            }

            // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
            if (deleteSubscriptionPlanCommissionRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'deleteSubscriptionPlanCommissionRequest' when calling PreReleaseApi->RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("commission_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(commissionId)); // path parameter
            localVarRequestOptions.Data = deleteSubscriptionPlanCommissionRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionPlanCommissionFromCommissionsUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Note Model Gets the custom fields for the Note object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel RetrieveNoteModelUsingGET1(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = RetrieveNoteModelUsingGET1WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Note Model Gets the custom fields for the Note object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> RetrieveNoteModelUsingGET1WithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveNoteModelUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/notes/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveNoteModelUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Note Model Gets the custom fields for the Note object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> RetrieveNoteModelUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await RetrieveNoteModelUsingGET1WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Note Model Gets the custom fields for the Note object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> RetrieveNoteModelUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveNoteModelUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/notes/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveNoteModelUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model Gets the custom field&#39;s model for the Order object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel RetrieveOrderCustomFieldModelUsingGET(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = RetrieveOrderCustomFieldModelUsingGETWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model Gets the custom field&#39;s model for the Order object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> RetrieveOrderCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveOrderCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/orders/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveOrderCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model Gets the custom field&#39;s model for the Order object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> RetrieveOrderCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await RetrieveOrderCustomFieldModelUsingGETWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Order&#39;s Custom Field Model Gets the custom field&#39;s model for the Order object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> RetrieveOrderCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveOrderCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/orders/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveOrderCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel RetrieveSubscriptionCustomFieldModelUsingGET(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveSubscriptionCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/subscriptions/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSubscriptionCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveSubscriptionCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/subscriptions/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSubscriptionCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Task Model Get the custom fields for the Task object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel RetrieveTaskModelUsingGET1(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = RetrieveTaskModelUsingGET1WithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Task Model Get the custom fields for the Task object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> RetrieveTaskModelUsingGET1WithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveTaskModelUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/tasks/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTaskModelUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Task Model Get the custom fields for the Task object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> RetrieveTaskModelUsingGET1Async(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await RetrieveTaskModelUsingGET1WithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Task Model Get the custom fields for the Task object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> RetrieveTaskModelUsingGET1WithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PreReleaseApi.RetrieveTaskModelUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/tasks/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveTaskModelUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateAffiliateCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateAffiliateCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateAffiliateCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateAffiliateCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateAffiliateCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateAffiliateCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Affiliate object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateAffiliateCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateAffiliateCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateAffiliateCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateAffiliateCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/affiliates/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAffiliateCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Category Discount Update a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CategoryDiscount</returns>
        public CategoryDiscount UpdateDiscountUsingPATCH(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = UpdateDiscountUsingPATCHWithHttpInfo(discountId, createUpdateDiscountRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Category Discount Update a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CategoryDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> UpdateDiscountUsingPATCHWithHttpInfo(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateDiscountUsingPATCH");
            }

            // verify the required parameter 'createUpdateDiscountRequest' is set
            if (createUpdateDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createUpdateDiscountRequest' when calling PreReleaseApi->UpdateDiscountUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = createUpdateDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateDiscountUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CategoryDiscount>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDiscountUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Category Discount Update a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CategoryDiscount</returns>
        public async System.Threading.Tasks.Task<CategoryDiscount> UpdateDiscountUsingPATCHAsync(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount> localVarResponse = await UpdateDiscountUsingPATCHWithHttpInfoAsync(discountId, createUpdateDiscountRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Category Discount Update a Category Discount.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="createUpdateDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CategoryDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CategoryDiscount>> UpdateDiscountUsingPATCHWithHttpInfoAsync(string discountId, CreateUpdateDiscountRequest createUpdateDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateDiscountUsingPATCH");
            }

            // verify the required parameter 'createUpdateDiscountRequest' is set
            if (createUpdateDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createUpdateDiscountRequest' when calling PreReleaseApi->UpdateDiscountUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = createUpdateDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateDiscountUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CategoryDiscount>("/v2/discounts/productCategories/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDiscountUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Shipping Discount Updates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ShippingDiscount</returns>
        public ShippingDiscount UpdateDiscountUsingPATCH1(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = UpdateDiscountUsingPATCH1WithHttpInfo(discountId, updateShippingDiscountRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Shipping Discount Updates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ShippingDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> UpdateDiscountUsingPATCH1WithHttpInfo(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateDiscountUsingPATCH1");
            }

            // verify the required parameter 'updateShippingDiscountRequest' is set
            if (updateShippingDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateShippingDiscountRequest' when calling PreReleaseApi->UpdateDiscountUsingPATCH1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateShippingDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateDiscountUsingPATCH1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ShippingDiscount>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDiscountUsingPATCH1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Shipping Discount Updates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShippingDiscount</returns>
        public async System.Threading.Tasks.Task<ShippingDiscount> UpdateDiscountUsingPATCH1Async(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount> localVarResponse = await UpdateDiscountUsingPATCH1WithHttpInfoAsync(discountId, updateShippingDiscountRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Shipping Discount Updates a Shipping Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateShippingDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShippingDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ShippingDiscount>> UpdateDiscountUsingPATCH1WithHttpInfoAsync(string discountId, UpdateShippingDiscountRequest updateShippingDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateDiscountUsingPATCH1");
            }

            // verify the required parameter 'updateShippingDiscountRequest' is set
            if (updateShippingDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateShippingDiscountRequest' when calling PreReleaseApi->UpdateDiscountUsingPATCH1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateShippingDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateDiscountUsingPATCH1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ShippingDiscount>("/v2/discounts/shipping/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDiscountUsingPATCH1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a file Updates a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FileMetadata</returns>
        public FileMetadata UpdateFileUsingPATCH(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = UpdateFileUsingPATCHWithHttpInfo(fileId, updateFileRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a file Updates a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FileMetadata</returns>
        public Keap.Sdk.Core.Client.ApiResponse<FileMetadata> UpdateFileUsingPATCHWithHttpInfo(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->UpdateFileUsingPATCH");
            }

            // verify the required parameter 'updateFileRequest' is set
            if (updateFileRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateFileRequest' when calling PreReleaseApi->UpdateFileUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateFileRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateFileUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<FileMetadata>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a file Updates a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileMetadata</returns>
        public async System.Threading.Tasks.Task<FileMetadata> UpdateFileUsingPATCHAsync(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<FileMetadata> localVarResponse = await UpdateFileUsingPATCHWithHttpInfoAsync(fileId, updateFileRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a file Updates a file
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">file_id</param>
        /// <param name="updateFileRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileMetadata)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<FileMetadata>> UpdateFileUsingPATCHWithHttpInfoAsync(string fileId, UpdateFileRequest updateFileRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'fileId' when calling PreReleaseApi->UpdateFileUsingPATCH");
            }

            // verify the required parameter 'updateFileRequest' is set
            if (updateFileRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateFileRequest' when calling PreReleaseApi->UpdateFileUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateFileRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateFileUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<FileMetadata>("/v2/files/{file_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateNotesCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateNotesCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateNotesCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateNotesCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateNotesCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateNotesCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/notes/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotesCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateNotesCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateNotesCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Custom Field Updates a custom field of the specified type and options to the Note object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateNotesCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateNotesCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateNotesCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateNotesCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/notes/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateNotesCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field Updates a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateOpportunityCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateOpportunityCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field Updates a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateOpportunityCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateOpportunityCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateOpportunityCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/opportunities/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field Updates a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateOpportunityCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateOpportunityCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Opportunity&#39;s Custom Field Updates a custom field of the specified type and options to the Opportunity object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateOpportunityCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateOpportunityCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateOpportunityCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/opportunities/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Opportunity Stage Updates specified values of a given Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestOpportunityStage</returns>
        public RestOpportunityStage UpdateOpportunityStageUsingPATCH(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = UpdateOpportunityStageUsingPATCHWithHttpInfo(stageId, updateOpportunityStageRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Opportunity Stage Updates specified values of a given Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestOpportunityStage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> UpdateOpportunityStageUsingPATCHWithHttpInfo(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->UpdateOpportunityStageUsingPATCH");
            }

            // verify the required parameter 'updateOpportunityStageRequest' is set
            if (updateOpportunityStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateOpportunityStageRequest' when calling PreReleaseApi->UpdateOpportunityStageUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateOpportunityStageRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityStageUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestOpportunityStage>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityStageUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Opportunity Stage Updates specified values of a given Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestOpportunityStage</returns>
        public async System.Threading.Tasks.Task<RestOpportunityStage> UpdateOpportunityStageUsingPATCHAsync(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage> localVarResponse = await UpdateOpportunityStageUsingPATCHWithHttpInfoAsync(stageId, updateOpportunityStageRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Opportunity Stage Updates specified values of a given Opportunity Stage
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stageId">stage_id</param>
        /// <param name="updateOpportunityStageRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestOpportunityStage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestOpportunityStage>> UpdateOpportunityStageUsingPATCHWithHttpInfoAsync(string stageId, UpdateOpportunityStageRequest updateOpportunityStageRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'stageId' is set
            if (stageId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'stageId' when calling PreReleaseApi->UpdateOpportunityStageUsingPATCH");
            }

            // verify the required parameter 'updateOpportunityStageRequest' is set
            if (updateOpportunityStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateOpportunityStageRequest' when calling PreReleaseApi->UpdateOpportunityStageUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("stage_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(stageId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateOpportunityStageRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityStageUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestOpportunityStage>("/v2/opportunities/stages/{stage_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityStageUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an opportunity Updates specified values of a given opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestV2Opportunity</returns>
        public RestV2Opportunity UpdateOpportunityUsingPATCH(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = UpdateOpportunityUsingPATCHWithHttpInfo(opportunityId, patchOpportunityRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an opportunity Updates specified values of a given opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestV2Opportunity</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> UpdateOpportunityUsingPATCHWithHttpInfo(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->UpdateOpportunityUsingPATCH");
            }

            // verify the required parameter 'patchOpportunityRequest' is set
            if (patchOpportunityRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'patchOpportunityRequest' when calling PreReleaseApi->UpdateOpportunityUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchOpportunityRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<RestV2Opportunity>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an opportunity Updates specified values of a given opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestV2Opportunity</returns>
        public async System.Threading.Tasks.Task<RestV2Opportunity> UpdateOpportunityUsingPATCHAsync(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity> localVarResponse = await UpdateOpportunityUsingPATCHWithHttpInfoAsync(opportunityId, patchOpportunityRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an opportunity Updates specified values of a given opportunity
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="opportunityId">opportunity_id</param>
        /// <param name="patchOpportunityRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestV2Opportunity)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestV2Opportunity>> UpdateOpportunityUsingPATCHWithHttpInfoAsync(string opportunityId, PatchOpportunityRequest patchOpportunityRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'opportunityId' is set
            if (opportunityId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'opportunityId' when calling PreReleaseApi->UpdateOpportunityUsingPATCH");
            }

            // verify the required parameter 'patchOpportunityRequest' is set
            if (patchOpportunityRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'patchOpportunityRequest' when calling PreReleaseApi->UpdateOpportunityUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("opportunity_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(opportunityId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = patchOpportunityRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOpportunityUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<RestV2Opportunity>("/v2/opportunities/{opportunity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOpportunityUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order&#39;s Custom Field Updates a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateOrderCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateOrderCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order&#39;s Custom Field Updates a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateOrderCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateOrderCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateOrderCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOrderCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/orders/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrderCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order&#39;s Custom Field Updates a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateOrderCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateOrderCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order&#39;s Custom Field Updates a custom field of the specified type and options to the Order object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateOrderCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateOrderCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateOrderCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOrderCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/orders/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrderCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order Total Discount Updates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OrderTotalDiscount</returns>
        public OrderTotalDiscount UpdateOrderTotalDiscountUsingPATCH(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = UpdateOrderTotalDiscountUsingPATCHWithHttpInfo(discountId, updateOrderTotalDiscountRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order Total Discount Updates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OrderTotalDiscount</returns>
        public Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> UpdateOrderTotalDiscountUsingPATCHWithHttpInfo(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateOrderTotalDiscountUsingPATCH");
            }

            // verify the required parameter 'updateOrderTotalDiscountRequest' is set
            if (updateOrderTotalDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateOrderTotalDiscountRequest' when calling PreReleaseApi->UpdateOrderTotalDiscountUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateOrderTotalDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOrderTotalDiscountUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<OrderTotalDiscount>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrderTotalDiscountUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Order Total Discount Updates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrderTotalDiscount</returns>
        public async System.Threading.Tasks.Task<OrderTotalDiscount> UpdateOrderTotalDiscountUsingPATCHAsync(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount> localVarResponse = await UpdateOrderTotalDiscountUsingPATCHWithHttpInfoAsync(discountId, updateOrderTotalDiscountRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Order Total Discount Updates an Order Total Discount
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="discountId">discount_id</param>
        /// <param name="updateOrderTotalDiscountRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrderTotalDiscount)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<OrderTotalDiscount>> UpdateOrderTotalDiscountUsingPATCHWithHttpInfoAsync(string discountId, UpdateOrderTotalDiscountRequest updateOrderTotalDiscountRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'discountId' is set
            if (discountId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'discountId' when calling PreReleaseApi->UpdateOrderTotalDiscountUsingPATCH");
            }

            // verify the required parameter 'updateOrderTotalDiscountRequest' is set
            if (updateOrderTotalDiscountRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateOrderTotalDiscountRequest' when calling PreReleaseApi->UpdateOrderTotalDiscountUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("discount_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(discountId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateOrderTotalDiscountRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateOrderTotalDiscountUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<OrderTotalDiscount>("/v2/discounts/orderTotals/{discount_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrderTotalDiscountUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AffiliateLink</returns>
        public AffiliateLink UpdateRedirectLinkUsingPATCH(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = UpdateRedirectLinkUsingPATCHWithHttpInfo(redirectId, createOrPatchAffiliateLinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AffiliateLink</returns>
        public Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> UpdateRedirectLinkUsingPATCHWithHttpInfo(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0)
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->UpdateRedirectLinkUsingPATCH");
            }

            // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
            if (createOrPatchAffiliateLinkRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrPatchAffiliateLinkRequest' when calling PreReleaseApi->UpdateRedirectLinkUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = createOrPatchAffiliateLinkRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateRedirectLinkUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLinkUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AffiliateLink</returns>
        public async System.Threading.Tasks.Task<AffiliateLink> UpdateRedirectLinkUsingPATCHAsync(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<AffiliateLink> localVarResponse = await UpdateRedirectLinkUsingPATCHWithHttpInfoAsync(redirectId, createOrPatchAffiliateLinkRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Affiliate Link Updates an Affiliate Link
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirectId">redirect_id</param>
        /// <param name="createOrPatchAffiliateLinkRequest">request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AffiliateLink)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<AffiliateLink>> UpdateRedirectLinkUsingPATCHWithHttpInfoAsync(string redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'redirectId' is set
            if (redirectId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'redirectId' when calling PreReleaseApi->UpdateRedirectLinkUsingPATCH");
            }

            // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
            if (createOrPatchAffiliateLinkRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createOrPatchAffiliateLinkRequest' when calling PreReleaseApi->UpdateRedirectLinkUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("redirect_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(redirectId)); // path parameter
            localVarRequestOptions.Data = createOrPatchAffiliateLinkRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateRedirectLinkUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AffiliateLink>("/v2/affiliates/redirects/{redirect_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRedirectLinkUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateSubscriptionCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateSubscriptionCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/subscriptions/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateSubscriptionCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/subscriptions/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Task&#39;s Custom Field Updates a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateTaskCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateTaskCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Task&#39;s Custom Field Updates a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateTaskCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateTaskCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateTaskCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateTaskCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/tasks/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Task&#39;s Custom Field Updates a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateTaskCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateTaskCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, updateCustomFieldMetaDataRequest, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Task&#39;s Custom Field Updates a custom field of the specified type and options to the Task object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="updateCustomFieldMetaDataRequest">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateTaskCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling PreReleaseApi->UpdateTaskCustomFieldUsingPATCH");
            }

            // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
            if (updateCustomFieldMetaDataRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateCustomFieldMetaDataRequest' when calling PreReleaseApi->UpdateTaskCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = updateCustomFieldMetaDataRequest;

            localVarRequestOptions.Operation = "PreReleaseApi.UpdateTaskCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/tasks/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTaskCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
