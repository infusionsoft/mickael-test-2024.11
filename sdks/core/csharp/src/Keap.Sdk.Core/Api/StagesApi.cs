/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.770650
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStagesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        Stage Create1(CreateStageRequest createStageRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> Create1WithHttpInfo(CreateStageRequest createStageRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <remarks>
        /// Deletes a stage by its identifier for a given tenant.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete2(string id, string? newStageId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <remarks>
        /// Deletes a stage by its identifier for a given tenant.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Delete2WithHttpInfo(string id, string? newStageId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        Stage Get1(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> Get1WithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StageListResponse</returns>
        StageListResponse List1(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StageListResponse</returns>
        ApiResponse<StageListResponse> List1WithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of deals for a specific stage.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StageDealListResponse</returns>
        StageDealListResponse ListStages1(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of deals for a specific stage.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StageDealListResponse</returns>
        ApiResponse<StageDealListResponse> ListStages1WithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        Stage Update2(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        ApiResponse<Stage> Update2WithHttpInfo(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStagesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> Create1Async(CreateStageRequest createStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> Create1WithHttpInfoAsync(CreateStageRequest createStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <remarks>
        /// Deletes a stage by its identifier for a given tenant.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Delete2Async(string id, string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <remarks>
        /// Deletes a stage by its identifier for a given tenant.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Delete2WithHttpInfoAsync(string id, string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> Get1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> Get1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StageListResponse</returns>
        System.Threading.Tasks.Task<StageListResponse> List1Async(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StageListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StageListResponse>> List1WithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of deals for a specific stage.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StageDealListResponse</returns>
        System.Threading.Tasks.Task<StageDealListResponse> ListStages1Async(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of deals for a specific stage.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StageDealListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StageDealListResponse>> ListStages1WithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        System.Threading.Tasks.Task<Stage> Update2Async(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stage>> Update2WithHttpInfoAsync(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStagesApi : IStagesApiSync, IStagesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StagesApi : IStagesApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StagesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StagesApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StagesApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StagesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StagesApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        public Stage Create1(CreateStageRequest createStageRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = Create1WithHttpInfo(createStageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Stage> Create1WithHttpInfo(CreateStageRequest createStageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createStageRequest' is set
            if (createStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createStageRequest' when calling StagesApi->Create1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createStageRequest;

            localVarRequestOptions.Operation = "StagesApi.Create1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Stage>("/v2/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> Create1Async(CreateStageRequest createStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = await Create1WithHttpInfoAsync(createStageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createStageRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Stage>> Create1WithHttpInfoAsync(CreateStageRequest createStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createStageRequest' is set
            if (createStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createStageRequest' when calling StagesApi->Create1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createStageRequest;

            localVarRequestOptions.Operation = "StagesApi.Create1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Stage>("/v2/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant. Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete2(string id, string? newStageId = default(string?), int operationIndex = 0)
        {
            Delete2WithHttpInfo(id, newStageId);
        }

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant. Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> Delete2WithHttpInfo(string id, string? newStageId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Delete2");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (newStageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "new_stage_id", newStageId));
            }

            localVarRequestOptions.Operation = "StagesApi.Delete2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/stages/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant. Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Delete2Async(string id, string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await Delete2WithHttpInfoAsync(id, newStageId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a stage by its identifier for a given tenant. Deletes a stage by its identifier for a given tenant.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> Delete2WithHttpInfoAsync(string id, string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Delete2");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (newStageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "new_stage_id", newStageId));
            }

            localVarRequestOptions.Operation = "StagesApi.Delete2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/stages/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        public Stage Get1(string id, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = Get1WithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Stage> Get1WithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Get1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "StagesApi.Get1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Stage>("/v2/stages/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> Get1Async(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = await Get1WithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Stage>> Get1WithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Get1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "StagesApi.Get1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Stage>("/v2/stages/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StageListResponse</returns>
        public StageListResponse List1(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<StageListResponse> localVarResponse = List1WithHttpInfo(filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StageListResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<StageListResponse> List1WithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StagesApi.List1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StageListResponse>("/v2/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StageListResponse</returns>
        public async System.Threading.Tasks.Task<StageListResponse> List1Async(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<StageListResponse> localVarResponse = await List1WithHttpInfoAsync(filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StageListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<StageListResponse>> List1WithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StagesApi.List1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StageListResponse>("/v2/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of deals for a specific stage. Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StageDealListResponse</returns>
        public StageDealListResponse ListStages1(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<StageDealListResponse> localVarResponse = ListStages1WithHttpInfo(id, filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of deals for a specific stage. Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StageDealListResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<StageDealListResponse> ListStages1WithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->ListStages1");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StagesApi.ListStages1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<StageDealListResponse>("/v2/stages/{id}/deals", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStages1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of deals for a specific stage. Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StageDealListResponse</returns>
        public async System.Threading.Tasks.Task<StageDealListResponse> ListStages1Async(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<StageDealListResponse> localVarResponse = await ListStages1WithHttpInfoAsync(id, filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of deals for a specific stage. Retrieves a list of deals for a specific stage.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the stage identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StageDealListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<StageDealListResponse>> ListStages1WithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->ListStages1");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StagesApi.ListStages1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<StageDealListResponse>("/v2/stages/{id}/deals", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStages1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Stage</returns>
        public Stage Update2(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = Update2WithHttpInfo(id, updateMask, updateStageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Stage</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Stage> Update2WithHttpInfo(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Update2");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateMask' when calling StagesApi->Update2");
            }

            // verify the required parameter 'updateStageRequest' is set
            if (updateStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateStageRequest' when calling StagesApi->Update2");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            localVarRequestOptions.Data = updateStageRequest;

            localVarRequestOptions.Operation = "StagesApi.Update2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Stage>("/v2/stages/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stage</returns>
        public async System.Threading.Tasks.Task<Stage> Update2Async(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<Stage> localVarResponse = await Update2WithHttpInfoAsync(id, updateMask, updateStageRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updateStageRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stage)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Stage>> Update2WithHttpInfoAsync(string id, List<string> updateMask, UpdateStageRequest updateStageRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'id' when calling StagesApi->Update2");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateMask' when calling StagesApi->Update2");
            }

            // verify the required parameter 'updateStageRequest' is set
            if (updateStageRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'updateStageRequest' when calling StagesApi->Update2");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            localVarRequestOptions.Data = updateStageRequest;

            localVarRequestOptions.Operation = "StagesApi.Update2";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Stage>("/v2/stages/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
