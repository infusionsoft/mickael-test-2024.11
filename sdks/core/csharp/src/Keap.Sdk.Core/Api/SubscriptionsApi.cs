/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Sdk.Core.Client;
using Keap.Sdk.Core.Client.Auth;
using Keap.Sdk.Core.Model;

namespace Keap.Sdk.Core.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CancelSubscriptionUsingPOST(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0);

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelSubscriptionUsingPOSTWithHttpInfo(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0);
        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData CreateSubscriptionCustomFieldUsingPOST(CreateCustomFieldRequest customField, int operationIndex = 0);

        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField, int operationIndex = 0);
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a subscription with the specified product and product subscription id.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestSubscriptionV2</returns>
        RestSubscriptionV2 CreateSubscriptionV2UsingPOST(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0);

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a subscription with the specified product and product subscription id.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestSubscriptionV2</returns>
        ApiResponse<RestSubscriptionV2> CreateSubscriptionV2UsingPOSTWithHttpInfo(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0);
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsResponse</returns>
        ListSubscriptionsResponse ListSubscriptionsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsResponse</returns>
        ApiResponse<ListSubscriptionsResponse> ListSubscriptionsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        ObjectModel RetrieveSubscriptionCustomFieldModelUsingGET(int operationIndex = 0);

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        ApiResponse<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        CustomFieldMetaData UpdateSubscriptionCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0);

        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        ApiResponse<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelSubscriptionUsingPOSTAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Subscription
        /// </summary>
        /// <remarks>
        /// Cancels the specified subscription
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelSubscriptionUsingPOSTWithHttpInfoAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Adds a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a subscription with the specified product and product subscription id.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestSubscriptionV2</returns>
        System.Threading.Tasks.Task<RestSubscriptionV2> CreateSubscriptionV2UsingPOSTAsync(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create Subscription
        /// </summary>
        /// <remarks>
        /// Creates a subscription with the specified product and product subscription id.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestSubscriptionV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestSubscriptionV2>> CreateSubscriptionV2UsingPOSTWithHttpInfoAsync(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsResponse</returns>
        System.Threading.Tasks.Task<ListSubscriptionsResponse> ListSubscriptionsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Subscriptions
        /// </summary>
        /// <remarks>
        /// Retrieves a list of subscriptions using the specified search criteria.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubscriptionsResponse>> ListSubscriptionsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        System.Threading.Tasks.Task<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model
        /// </summary>
        /// <remarks>
        /// Gets the custom field&#39;s model for the Subscription object
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectModel>> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        System.Threading.Tasks.Task<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update a Subscription&#39;s Custom Field
        /// </summary>
        /// <remarks>
        /// Updates a custom field of the specified type and options to the Subscription object.
        /// </remarks>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomFieldMetaData>> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : ISubscriptionsApiSync, ISubscriptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private Keap.Sdk.Core.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(string basePath)
        {
            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                new Keap.Sdk.Core.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(Keap.Sdk.Core.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Sdk.Core.Client.Configuration.MergeConfigurations(
                Keap.Sdk.Core.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Sdk.Core.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SubscriptionsApi(Keap.Sdk.Core.Client.ISynchronousClient client, Keap.Sdk.Core.Client.IAsynchronousClient asyncClient, Keap.Sdk.Core.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Sdk.Core.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Sdk.Core.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Sdk.Core.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Sdk.Core.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CancelSubscriptionUsingPOST(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0)
        {
            CancelSubscriptionUsingPOSTWithHttpInfo(subscriptionId, cancelSubscriptionsRequest);
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Sdk.Core.Client.ApiResponse<Object> CancelSubscriptionUsingPOSTWithHttpInfo(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->CancelSubscriptionUsingPOST");
            }

            // verify the required parameter 'cancelSubscriptionsRequest' is set
            if (cancelSubscriptionsRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'cancelSubscriptionsRequest' when calling SubscriptionsApi->CancelSubscriptionUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = cancelSubscriptionsRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.CancelSubscriptionUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/subscriptions/{subscription_id}:deactivate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscriptionUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelSubscriptionUsingPOSTAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await CancelSubscriptionUsingPOSTWithHttpInfoAsync(subscriptionId, cancelSubscriptionsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Cancel Subscription Cancels the specified subscription
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subscriptionId">subscription_id</param>
        /// <param name="cancelSubscriptionsRequest">cancelSubscriptionsRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<Object>> CancelSubscriptionUsingPOSTWithHttpInfoAsync(string subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling SubscriptionsApi->CancelSubscriptionUsingPOST");
            }

            // verify the required parameter 'cancelSubscriptionsRequest' is set
            if (cancelSubscriptionsRequest == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'cancelSubscriptionsRequest' when calling SubscriptionsApi->CancelSubscriptionUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("subscription_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = cancelSubscriptionsRequest;

            localVarRequestOptions.Operation = "SubscriptionsApi.CancelSubscriptionUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/subscriptions/{subscription_id}:deactivate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelSubscriptionUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData CreateSubscriptionCustomFieldUsingPOST(CreateCustomFieldRequest customField, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(customField);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField, int operationIndex = 0)
        {
            // verify the required parameter 'customField' is set
            if (customField == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customField' when calling SubscriptionsApi->CreateSubscriptionCustomFieldUsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customField;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscriptionCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomFieldMetaData>("/v2/subscriptions/model/customFields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> CreateSubscriptionCustomFieldUsingPOSTAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(customField, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Subscription&#39;s Custom Field Adds a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customField">customField</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> CreateSubscriptionCustomFieldUsingPOSTWithHttpInfoAsync(CreateCustomFieldRequest customField, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customField' is set
            if (customField == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customField' when calling SubscriptionsApi->CreateSubscriptionCustomFieldUsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = customField;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscriptionCustomFieldUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomFieldMetaData>("/v2/subscriptions/model/customFields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionCustomFieldUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription Creates a subscription with the specified product and product subscription id.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestSubscriptionV2</returns>
        public RestSubscriptionV2 CreateSubscriptionV2UsingPOST(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<RestSubscriptionV2> localVarResponse = CreateSubscriptionV2UsingPOSTWithHttpInfo(createSubscriptionV2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Creates a subscription with the specified product and product subscription id.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestSubscriptionV2</returns>
        public Keap.Sdk.Core.Client.ApiResponse<RestSubscriptionV2> CreateSubscriptionV2UsingPOSTWithHttpInfo(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0)
        {
            // verify the required parameter 'createSubscriptionV2' is set
            if (createSubscriptionV2 == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createSubscriptionV2' when calling SubscriptionsApi->CreateSubscriptionV2UsingPOST");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionV2;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscriptionV2UsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RestSubscriptionV2>("/v2/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionV2UsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Subscription Creates a subscription with the specified product and product subscription id.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestSubscriptionV2</returns>
        public async System.Threading.Tasks.Task<RestSubscriptionV2> CreateSubscriptionV2UsingPOSTAsync(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<RestSubscriptionV2> localVarResponse = await CreateSubscriptionV2UsingPOSTWithHttpInfoAsync(createSubscriptionV2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Subscription Creates a subscription with the specified product and product subscription id.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionV2">createSubscriptionV2</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestSubscriptionV2)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<RestSubscriptionV2>> CreateSubscriptionV2UsingPOSTWithHttpInfoAsync(CreateSubscriptionV2 createSubscriptionV2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSubscriptionV2' is set
            if (createSubscriptionV2 == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'createSubscriptionV2' when calling SubscriptionsApi->CreateSubscriptionV2UsingPOST");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSubscriptionV2;

            localVarRequestOptions.Operation = "SubscriptionsApi.CreateSubscriptionV2UsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestSubscriptionV2>("/v2/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscriptionV2UsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsResponse</returns>
        public ListSubscriptionsResponse ListSubscriptionsUsingGET1(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> localVarResponse = ListSubscriptionsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsResponse</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> ListSubscriptionsUsingGET1WithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.ListSubscriptionsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubscriptionsResponse>("/v2/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsResponse</returns>
        public async System.Threading.Tasks.Task<ListSubscriptionsResponse> ListSubscriptionsUsingGET1Async(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse> localVarResponse = await ListSubscriptionsUsingGET1WithHttpInfoAsync(filter, orderBy, pageSize, pageToken, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions Retrieves a list of subscriptions using the specified search criteria.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ListSubscriptionsResponse>> ListSubscriptionsUsingGET1WithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }

            localVarRequestOptions.Operation = "SubscriptionsApi.ListSubscriptionsUsingGET1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubscriptionsResponse>("/v2/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsUsingGET1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ObjectModel</returns>
        public ObjectModel RetrieveSubscriptionCustomFieldModelUsingGET(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ObjectModel</returns>
        public Keap.Sdk.Core.Client.ApiResponse<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubscriptionsApi.RetrieveSubscriptionCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ObjectModel>("/v2/subscriptions/model", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSubscriptionCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ObjectModel</returns>
        public async System.Threading.Tasks.Task<ObjectModel> RetrieveSubscriptionCustomFieldModelUsingGETAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<ObjectModel> localVarResponse = await RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Subscription&#39;s Custom Field Model Gets the custom field&#39;s model for the Subscription object
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ObjectModel)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<ObjectModel>> RetrieveSubscriptionCustomFieldModelUsingGETWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SubscriptionsApi.RetrieveSubscriptionCustomFieldModelUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ObjectModel>("/v2/subscriptions/model", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveSubscriptionCustomFieldModelUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomFieldMetaData</returns>
        public CustomFieldMetaData UpdateSubscriptionCustomFieldUsingPATCH(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomFieldMetaData</returns>
        public Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfo(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling SubscriptionsApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling SubscriptionsApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SubscriptionsApi.UpdateSubscriptionCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<CustomFieldMetaData>("/v2/subscriptions/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomFieldMetaData</returns>
        public async System.Threading.Tasks.Task<CustomFieldMetaData> UpdateSubscriptionCustomFieldUsingPATCHAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData> localVarResponse = await UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(customFieldId, request, updateMask, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Subscription&#39;s Custom Field Updates a custom field of the specified type and options to the Subscription object.
        /// </summary>
        /// <exception cref="Keap.Sdk.Core.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">custom_field_id</param>
        /// <param name="request">request</param>
        /// <param name="updateMask">An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomFieldMetaData)</returns>
        public async System.Threading.Tasks.Task<Keap.Sdk.Core.Client.ApiResponse<CustomFieldMetaData>> UpdateSubscriptionCustomFieldUsingPATCHWithHttpInfoAsync(string customFieldId, UpdateCustomFieldMetaDataRequest request, List<string>? updateMask = default(List<string>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling SubscriptionsApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }

            // verify the required parameter 'request' is set
            if (request == null)
            {
                throw new Keap.Sdk.Core.Client.ApiException(400, "Missing required parameter 'request' when calling SubscriptionsApi->UpdateSubscriptionCustomFieldUsingPATCH");
            }


            Keap.Sdk.Core.Client.RequestOptions localVarRequestOptions = new Keap.Sdk.Core.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Sdk.Core.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", Keap.Sdk.Core.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            if (updateMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Sdk.Core.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            }
            localVarRequestOptions.Data = request;

            localVarRequestOptions.Operation = "SubscriptionsApi.UpdateSubscriptionCustomFieldUsingPATCH";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CustomFieldMetaData>("/v2/subscriptions/model/customFields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionCustomFieldUsingPATCH", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
