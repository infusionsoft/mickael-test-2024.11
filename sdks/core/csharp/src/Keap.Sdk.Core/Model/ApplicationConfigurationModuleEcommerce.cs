/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.770650
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// ApplicationConfigurationModuleEcommerce
    /// </summary>
    [DataContract(Name = "ApplicationConfigurationModuleEcommerce")]
    public partial class ApplicationConfigurationModuleEcommerce : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationConfigurationModuleEcommerce" /> class.
        /// </summary>
        /// <param name="creditCardTypes">creditCardTypes.</param>
        /// <param name="currency">currency.</param>
        /// <param name="defaultChargeMaxRetryAttempts">defaultChargeMaxRetryAttempts.</param>
        /// <param name="defaultCountry">defaultCountry.</param>
        /// <param name="defaultMerchant">defaultMerchant.</param>
        /// <param name="defaultNumberOfDaysBetweenChargeAttempts">defaultNumberOfDaysBetweenChargeAttempts.</param>
        /// <param name="defaultTax">defaultTax.</param>
        /// <param name="defaultToAutoCharge">defaultToAutoCharge.</param>
        /// <param name="merchantAccountMaxRetryAttempts">merchantAccountMaxRetryAttempts.</param>
        /// <param name="paymentTypes">paymentTypes.</param>
        /// <param name="promoCodes">promoCodes.</param>
        /// <param name="trackCostPerUnit">trackCostPerUnit.</param>
        /// <param name="trackInventory">trackInventory.</param>
        public ApplicationConfigurationModuleEcommerce(string creditCardTypes = default(string), string currency = default(string), int defaultChargeMaxRetryAttempts = default(int), string defaultCountry = default(string), string defaultMerchant = default(string), int defaultNumberOfDaysBetweenChargeAttempts = default(int), string defaultTax = default(string), bool defaultToAutoCharge = default(bool), int merchantAccountMaxRetryAttempts = default(int), string paymentTypes = default(string), string promoCodes = default(string), bool trackCostPerUnit = default(bool), bool trackInventory = default(bool))
        {
            this.CreditCardTypes = creditCardTypes;
            this.Currency = currency;
            this.DefaultChargeMaxRetryAttempts = defaultChargeMaxRetryAttempts;
            this.DefaultCountry = defaultCountry;
            this.DefaultMerchant = defaultMerchant;
            this.DefaultNumberOfDaysBetweenChargeAttempts = defaultNumberOfDaysBetweenChargeAttempts;
            this.DefaultTax = defaultTax;
            this.DefaultToAutoCharge = defaultToAutoCharge;
            this.MerchantAccountMaxRetryAttempts = merchantAccountMaxRetryAttempts;
            this.PaymentTypes = paymentTypes;
            this.PromoCodes = promoCodes;
            this.TrackCostPerUnit = trackCostPerUnit;
            this.TrackInventory = trackInventory;
        }

        /// <summary>
        /// Gets or Sets CreditCardTypes
        /// </summary>
        [DataMember(Name = "credit_card_types", EmitDefaultValue = false)]
        public string CreditCardTypes { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets DefaultChargeMaxRetryAttempts
        /// </summary>
        [DataMember(Name = "default_charge_max_retry_attempts", EmitDefaultValue = false)]
        public int DefaultChargeMaxRetryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets DefaultCountry
        /// </summary>
        [DataMember(Name = "default_country", EmitDefaultValue = false)]
        public string DefaultCountry { get; set; }

        /// <summary>
        /// Gets or Sets DefaultMerchant
        /// </summary>
        [DataMember(Name = "default_merchant", EmitDefaultValue = false)]
        public string DefaultMerchant { get; set; }

        /// <summary>
        /// Gets or Sets DefaultNumberOfDaysBetweenChargeAttempts
        /// </summary>
        [DataMember(Name = "default_number_of_days_between_charge_attempts", EmitDefaultValue = false)]
        public int DefaultNumberOfDaysBetweenChargeAttempts { get; set; }

        /// <summary>
        /// Gets or Sets DefaultTax
        /// </summary>
        [DataMember(Name = "default_tax", EmitDefaultValue = false)]
        public string DefaultTax { get; set; }

        /// <summary>
        /// Gets or Sets DefaultToAutoCharge
        /// </summary>
        [DataMember(Name = "default_to_auto_charge", EmitDefaultValue = true)]
        public bool DefaultToAutoCharge { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAccountMaxRetryAttempts
        /// </summary>
        [DataMember(Name = "merchant_account_max_retry_attempts", EmitDefaultValue = false)]
        public int MerchantAccountMaxRetryAttempts { get; set; }

        /// <summary>
        /// Gets or Sets PaymentTypes
        /// </summary>
        [DataMember(Name = "payment_types", EmitDefaultValue = false)]
        public string PaymentTypes { get; set; }

        /// <summary>
        /// Gets or Sets PromoCodes
        /// </summary>
        [DataMember(Name = "promo_codes", EmitDefaultValue = false)]
        public string PromoCodes { get; set; }

        /// <summary>
        /// Gets or Sets TrackCostPerUnit
        /// </summary>
        [DataMember(Name = "track_cost_per_unit", EmitDefaultValue = true)]
        public bool TrackCostPerUnit { get; set; }

        /// <summary>
        /// Gets or Sets TrackInventory
        /// </summary>
        [DataMember(Name = "track_inventory", EmitDefaultValue = true)]
        public bool TrackInventory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationConfigurationModuleEcommerce {\n");
            sb.Append("  CreditCardTypes: ").Append(CreditCardTypes).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  DefaultChargeMaxRetryAttempts: ").Append(DefaultChargeMaxRetryAttempts).Append("\n");
            sb.Append("  DefaultCountry: ").Append(DefaultCountry).Append("\n");
            sb.Append("  DefaultMerchant: ").Append(DefaultMerchant).Append("\n");
            sb.Append("  DefaultNumberOfDaysBetweenChargeAttempts: ").Append(DefaultNumberOfDaysBetweenChargeAttempts).Append("\n");
            sb.Append("  DefaultTax: ").Append(DefaultTax).Append("\n");
            sb.Append("  DefaultToAutoCharge: ").Append(DefaultToAutoCharge).Append("\n");
            sb.Append("  MerchantAccountMaxRetryAttempts: ").Append(MerchantAccountMaxRetryAttempts).Append("\n");
            sb.Append("  PaymentTypes: ").Append(PaymentTypes).Append("\n");
            sb.Append("  PromoCodes: ").Append(PromoCodes).Append("\n");
            sb.Append("  TrackCostPerUnit: ").Append(TrackCostPerUnit).Append("\n");
            sb.Append("  TrackInventory: ").Append(TrackInventory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
