/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.767807-hf-202501161156
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// CheckListItemDetails
    /// </summary>
    [DataContract(Name = "CheckListItemDetails")]
    public partial class CheckListItemDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckListItemDetails" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="doneDate">doneDate.</param>
        /// <param name="id">id.</param>
        /// <param name="instanceId">instanceId.</param>
        /// <param name="itemOrder">itemOrder.</param>
        /// <param name="required">required.</param>
        public CheckListItemDetails(string description = default(string), DateTime doneDate = default(DateTime), long id = default(long), long instanceId = default(long), int itemOrder = default(int), bool required = default(bool))
        {
            this.Description = description;
            this.DoneDate = doneDate;
            this.Id = id;
            this.InstanceId = instanceId;
            this.ItemOrder = itemOrder;
            this.Required = required;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DoneDate
        /// </summary>
        [DataMember(Name = "done_date", EmitDefaultValue = false)]
        public DateTime DoneDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instance_id", EmitDefaultValue = false)]
        public long InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ItemOrder
        /// </summary>
        [DataMember(Name = "item_order", EmitDefaultValue = false)]
        public int ItemOrder { get; set; }

        /// <summary>
        /// Gets or Sets Required
        /// </summary>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CheckListItemDetails {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DoneDate: ").Append(DoneDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  ItemOrder: ").Append(ItemOrder).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
