/*
 * Keap REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// CreateRestOrderItemRequest
    /// </summary>
    [DataContract(Name = "CreateRestOrderItemRequest")]
    public partial class CreateRestOrderItemRequest : IValidatableObject
    {
        /// <summary>
        /// Defines ProductType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductTypeEnum
        {
            /// <summary>
            /// Enum PRODUCT for value: PRODUCT
            /// </summary>
            [EnumMember(Value = "PRODUCT")]
            PRODUCT = 1,

            /// <summary>
            /// Enum DIGITAL for value: DIGITAL
            /// </summary>
            [EnumMember(Value = "DIGITAL")]
            DIGITAL = 2
        }

        /// <summary>
        /// Gets or Sets ProductType
        /// </summary>
        [DataMember(Name = "product_type", EmitDefaultValue = false)]
        public ProductTypeEnum? ProductType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRestOrderItemRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRestOrderItemRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRestOrderItemRequest" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="price">Overridable price of the product. If not specified, the default will be used. Must be greater than or equal to 0..</param>
        /// <param name="productId">The id of the product to be added to the order. (required).</param>
        /// <param name="productType">productType.</param>
        /// <param name="quantity">Quantity must be greater than or equal to 1 (required).</param>
        public CreateRestOrderItemRequest(string description = default(string), double price = default(double), string productId = default(string), ProductTypeEnum? productType = default(ProductTypeEnum?), int quantity = default(int))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for CreateRestOrderItemRequest and cannot be null");
            }
            this.ProductId = productId;
            this.Quantity = quantity;
            this.Description = description;
            this.Price = price;
            this.ProductType = productType;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Overridable price of the product. If not specified, the default will be used. Must be greater than or equal to 0.
        /// </summary>
        /// <value>Overridable price of the product. If not specified, the default will be used. Must be greater than or equal to 0.</value>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// The id of the product to be added to the order.
        /// </summary>
        /// <value>The id of the product to be added to the order.</value>
        [DataMember(Name = "product_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// Quantity must be greater than or equal to 1
        /// </summary>
        /// <value>Quantity must be greater than or equal to 1</value>
        [DataMember(Name = "quantity", IsRequired = true, EmitDefaultValue = true)]
        public int Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateRestOrderItemRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
