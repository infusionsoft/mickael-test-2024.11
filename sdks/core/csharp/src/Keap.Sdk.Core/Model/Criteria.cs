/*
 * Keap REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.736468-hf-202411121210
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// Criteria
    /// </summary>
    [DataContract(Name = "criteria")]
    public partial class Criteria : IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum DateRange for value: date range
            /// </summary>
            [EnumMember(Value = "date range")]
            DateRange = 1,

            /// <summary>
            /// Enum PromoCode for value: promo code
            /// </summary>
            [EnumMember(Value = "promo code")]
            PromoCode = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Criteria" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="criteriaId">criteriaId.</param>
        /// <param name="endRangeDate">endRangeDate.</param>
        /// <param name="startRangeDate">startRangeDate.</param>
        /// <param name="type">type.</param>
        public Criteria(string code = default(string), string criteriaId = default(string), string endRangeDate = default(string), string startRangeDate = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Code = code;
            this.CriteriaId = criteriaId;
            this.EndRangeDate = endRangeDate;
            this.StartRangeDate = startRangeDate;
            this.Type = type;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets CriteriaId
        /// </summary>
        [DataMember(Name = "criteria_id", EmitDefaultValue = false)]
        public string CriteriaId { get; set; }

        /// <summary>
        /// Gets or Sets EndRangeDate
        /// </summary>
        [DataMember(Name = "end_range_date", EmitDefaultValue = false)]
        public string EndRangeDate { get; set; }

        /// <summary>
        /// Gets or Sets StartRangeDate
        /// </summary>
        [DataMember(Name = "start_range_date", EmitDefaultValue = false)]
        public string StartRangeDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Criteria {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CriteriaId: ").Append(CriteriaId).Append("\n");
            sb.Append("  EndRangeDate: ").Append(EndRangeDate).Append("\n");
            sb.Append("  StartRangeDate: ").Append(StartRangeDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
