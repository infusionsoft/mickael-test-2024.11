/*
 * Keap REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// DeleteFunnelIntegrationRequest
    /// </summary>
    [DataContract(Name = "DeleteFunnelIntegrationRequest")]
    public partial class DeleteFunnelIntegrationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeleteFunnelIntegrationRequest" /> class.
        /// </summary>
        /// <param name="actionNames">The name of the actions, that will be looked for and uninstalled..</param>
        /// <param name="integrationNames">The name of the integrations, that will be looked for and uninstalled. This will uninstall all triggers and actions related to this automation..</param>
        /// <param name="triggerNames">The name of the triggers, that will be looked for and uninstalled..</param>
        public DeleteFunnelIntegrationRequest(List<string> actionNames = default(List<string>), List<string> integrationNames = default(List<string>), List<string> triggerNames = default(List<string>))
        {
            this.ActionNames = actionNames;
            this.IntegrationNames = integrationNames;
            this.TriggerNames = triggerNames;
        }

        /// <summary>
        /// The name of the actions, that will be looked for and uninstalled.
        /// </summary>
        /// <value>The name of the actions, that will be looked for and uninstalled.</value>
        [DataMember(Name = "action_names", EmitDefaultValue = false)]
        public List<string> ActionNames { get; set; }

        /// <summary>
        /// The name of the integrations, that will be looked for and uninstalled. This will uninstall all triggers and actions related to this automation.
        /// </summary>
        /// <value>The name of the integrations, that will be looked for and uninstalled. This will uninstall all triggers and actions related to this automation.</value>
        [DataMember(Name = "integration_names", EmitDefaultValue = false)]
        public List<string> IntegrationNames { get; set; }

        /// <summary>
        /// The name of the triggers, that will be looked for and uninstalled.
        /// </summary>
        /// <value>The name of the triggers, that will be looked for and uninstalled.</value>
        [DataMember(Name = "trigger_names", EmitDefaultValue = false)]
        public List<string> TriggerNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeleteFunnelIntegrationRequest {\n");
            sb.Append("  ActionNames: ").Append(ActionNames).Append("\n");
            sb.Append("  IntegrationNames: ").Append(IntegrationNames).Append("\n");
            sb.Append("  TriggerNames: ").Append(TriggerNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
