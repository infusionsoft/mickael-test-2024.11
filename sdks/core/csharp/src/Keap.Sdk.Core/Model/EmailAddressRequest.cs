/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772697-hf-202501311118
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// EmailAddressRequest
    /// </summary>
    [DataContract(Name = "EmailAddressRequest")]
    public partial class EmailAddressRequest : IValidatableObject
    {
        /// <summary>
        /// Defines Field
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum EMAILFIELDUNSPECIFIED for value: EMAIL_FIELD_UNSPECIFIED
            /// </summary>
            [EnumMember(Value = "EMAIL_FIELD_UNSPECIFIED")]
            EMAILFIELDUNSPECIFIED = 1,

            /// <summary>
            /// Enum EMAIL1 for value: EMAIL1
            /// </summary>
            [EnumMember(Value = "EMAIL1")]
            EMAIL1 = 2,

            /// <summary>
            /// Enum EMAIL2 for value: EMAIL2
            /// </summary>
            [EnumMember(Value = "EMAIL2")]
            EMAIL2 = 3,

            /// <summary>
            /// Enum EMAIL3 for value: EMAIL3
            /// </summary>
            [EnumMember(Value = "EMAIL3")]
            EMAIL3 = 4
        }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public FieldEnum? Field { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAddressRequest" /> class.
        /// </summary>
        /// <param name="email">email.</param>
        /// <param name="field">field.</param>
        /// <param name="optInReason">optInReason.</param>
        public EmailAddressRequest(string email = default(string), FieldEnum? field = default(FieldEnum?), string optInReason = default(string))
        {
            this.Email = email;
            this.Field = field;
            this.OptInReason = optInReason;
        }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets OptInReason
        /// </summary>
        [DataMember(Name = "opt_in_reason", EmitDefaultValue = false)]
        public string OptInReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailAddressRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  OptInReason: ").Append(OptInReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
