/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// EmailSendRequest
    /// </summary>
    [DataContract(Name = "EmailSendRequest")]
    public partial class EmailSendRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailSendRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSendRequest" /> class.
        /// </summary>
        /// <param name="addressField">Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email.</param>
        /// <param name="attachments">Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each.</param>
        /// <param name="contacts">An array of Contact Ids to receive the email (required).</param>
        /// <param name="htmlContent">The HTML-formatted content of the email, encoded in Base64.</param>
        /// <param name="plainContent">The plain-text content of the email, encoded in Base64.</param>
        /// <param name="subject">The subject line of the email (required).</param>
        /// <param name="userId">The infusionsoft user to send the email on behalf of (required).</param>
        public EmailSendRequest(string addressField = default(string), List<EmailSendRequestAttachment> attachments = default(List<EmailSendRequestAttachment>), List<string> contacts = default(List<string>), string htmlContent = default(string), string plainContent = default(string), string subject = default(string), string userId = default(string))
        {
            // to ensure "contacts" is required (not null)
            if (contacts == null)
            {
                throw new ArgumentNullException("contacts is a required property for EmailSendRequest and cannot be null");
            }
            this.Contacts = contacts;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for EmailSendRequest and cannot be null");
            }
            this.Subject = subject;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for EmailSendRequest and cannot be null");
            }
            this.UserId = userId;
            this.AddressField = addressField;
            this.Attachments = attachments;
            this.HtmlContent = htmlContent;
            this.PlainContent = plainContent;
        }

        /// <summary>
        /// Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email
        /// </summary>
        /// <value>Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email</value>
        [DataMember(Name = "address_field", EmitDefaultValue = false)]
        public string AddressField { get; set; }

        /// <summary>
        /// Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each
        /// </summary>
        /// <value>Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each</value>
        [DataMember(Name = "attachments", EmitDefaultValue = false)]
        public List<EmailSendRequestAttachment> Attachments { get; set; }

        /// <summary>
        /// An array of Contact Ids to receive the email
        /// </summary>
        /// <value>An array of Contact Ids to receive the email</value>
        [DataMember(Name = "contacts", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Contacts { get; set; }

        /// <summary>
        /// The HTML-formatted content of the email, encoded in Base64
        /// </summary>
        /// <value>The HTML-formatted content of the email, encoded in Base64</value>
        [DataMember(Name = "html_content", EmitDefaultValue = false)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// The plain-text content of the email, encoded in Base64
        /// </summary>
        /// <value>The plain-text content of the email, encoded in Base64</value>
        [DataMember(Name = "plain_content", EmitDefaultValue = false)]
        public string PlainContent { get; set; }

        /// <summary>
        /// The subject line of the email
        /// </summary>
        /// <value>The subject line of the email</value>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// The infusionsoft user to send the email on behalf of
        /// </summary>
        /// <value>The infusionsoft user to send the email on behalf of</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailSendRequest {\n");
            sb.Append("  AddressField: ").Append(AddressField).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  PlainContent: ").Append(PlainContent).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
