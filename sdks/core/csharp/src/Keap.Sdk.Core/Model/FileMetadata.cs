/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.762682-hf-202501071525
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// FileMetadata
    /// </summary>
    [DataContract(Name = "FileMetadata")]
    public partial class FileMetadata : IValidatableObject
    {
        /// <summary>
        /// Defines Category
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum ATTACHMENTS for value: ATTACHMENTS
            /// </summary>
            [EnumMember(Value = "ATTACHMENTS")]
            ATTACHMENTS = 1,

            /// <summary>
            /// Enum CART for value: CART
            /// </summary>
            [EnumMember(Value = "CART")]
            CART = 2,

            /// <summary>
            /// Enum DOCUMENTS for value: DOCUMENTS
            /// </summary>
            [EnumMember(Value = "DOCUMENTS")]
            DOCUMENTS = 3,

            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 4,

            /// <summary>
            /// Enum INVOICE for value: INVOICE
            /// </summary>
            [EnumMember(Value = "INVOICE")]
            INVOICE = 5,

            /// <summary>
            /// Enum LOGO for value: LOGO
            /// </summary>
            [EnumMember(Value = "LOGO")]
            LOGO = 6,

            /// <summary>
            /// Enum TICKETS for value: TICKETS
            /// </summary>
            [EnumMember(Value = "TICKETS")]
            TICKETS = 7,

            /// <summary>
            /// Enum WEBFORM for value: WEB_FORM
            /// </summary>
            [EnumMember(Value = "WEB_FORM")]
            WEBFORM = 8,

            /// <summary>
            /// Enum FUNNEL for value: FUNNEL
            /// </summary>
            [EnumMember(Value = "FUNNEL")]
            FUNNEL = 9
        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Defines FileBoxType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FileBoxTypeEnum
        {
            /// <summary>
            /// Enum APPLICATION for value: APPLICATION
            /// </summary>
            [EnumMember(Value = "APPLICATION")]
            APPLICATION = 1,

            /// <summary>
            /// Enum IMAGE for value: IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGE = 2,

            /// <summary>
            /// Enum FAX for value: FAX
            /// </summary>
            [EnumMember(Value = "FAX")]
            FAX = 3,

            /// <summary>
            /// Enum ATTACHMENT for value: ATTACHMENT
            /// </summary>
            [EnumMember(Value = "ATTACHMENT")]
            ATTACHMENT = 4,

            /// <summary>
            /// Enum TICKET for value: TICKET
            /// </summary>
            [EnumMember(Value = "TICKET")]
            TICKET = 5,

            /// <summary>
            /// Enum CONTACT for value: CONTACT
            /// </summary>
            [EnumMember(Value = "CONTACT")]
            CONTACT = 6,

            /// <summary>
            /// Enum DIGITALPRODUCT for value: DIGITAL_PRODUCT
            /// </summary>
            [EnumMember(Value = "DIGITAL_PRODUCT")]
            DIGITALPRODUCT = 7,

            /// <summary>
            /// Enum IMPORT for value: IMPORT
            /// </summary>
            [EnumMember(Value = "IMPORT")]
            IMPORT = 8,

            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 9,

            /// <summary>
            /// Enum WEBFORM for value: WEB_FORM
            /// </summary>
            [EnumMember(Value = "WEB_FORM")]
            WEBFORM = 10,

            /// <summary>
            /// Enum STYLEDCART for value: STYLED_CART
            /// </summary>
            [EnumMember(Value = "STYLED_CART")]
            STYLEDCART = 11,

            /// <summary>
            /// Enum RESAMPLEDIMAGE for value: RESAMPLED_IMAGE
            /// </summary>
            [EnumMember(Value = "RESAMPLED_IMAGE")]
            RESAMPLEDIMAGE = 12,

            /// <summary>
            /// Enum TEMPLATETHUMBNAIL for value: TEMPLATE_THUMBNAIL
            /// </summary>
            [EnumMember(Value = "TEMPLATE_THUMBNAIL")]
            TEMPLATETHUMBNAIL = 13,

            /// <summary>
            /// Enum FUNNEL for value: FUNNEL
            /// </summary>
            [EnumMember(Value = "FUNNEL")]
            FUNNEL = 14,

            /// <summary>
            /// Enum LOGOTHUMBNAIL for value: LOGO_THUMBNAIL
            /// </summary>
            [EnumMember(Value = "LOGO_THUMBNAIL")]
            LOGOTHUMBNAIL = 15,

            /// <summary>
            /// Enum UNLAYER for value: UNLAYER
            /// </summary>
            [EnumMember(Value = "UNLAYER")]
            UNLAYER = 16,

            /// <summary>
            /// Enum BRANDINGCENTERLOGO for value: BRANDING_CENTER_LOGO
            /// </summary>
            [EnumMember(Value = "BRANDING_CENTER_LOGO")]
            BRANDINGCENTERLOGO = 17
        }

        /// <summary>
        /// Gets or Sets FileBoxType
        /// </summary>
        [DataMember(Name = "file_box_type", EmitDefaultValue = false)]
        public FileBoxTypeEnum? FileBoxType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMetadata" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="contactId">contactId.</param>
        /// <param name="createdById">createdById.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="downloadUrl">downloadUrl.</param>
        /// <param name="fileBoxType">fileBoxType.</param>
        /// <param name="fileName">fileName.</param>
        /// <param name="fileSize">fileSize.</param>
        /// <param name="id">id.</param>
        /// <param name="isPublic">isPublic.</param>
        /// <param name="remoteFileKey">remoteFileKey.</param>
        /// <param name="updatedTime">updatedTime.</param>
        public FileMetadata(CategoryEnum? category = default(CategoryEnum?), string contactId = default(string), string createdById = default(string), string createdTime = default(string), string downloadUrl = default(string), FileBoxTypeEnum? fileBoxType = default(FileBoxTypeEnum?), string fileName = default(string), long fileSize = default(long), string id = default(string), bool isPublic = default(bool), string remoteFileKey = default(string), string updatedTime = default(string))
        {
            this.Category = category;
            this.ContactId = contactId;
            this.CreatedById = createdById;
            this.CreatedTime = createdTime;
            this.DownloadUrl = downloadUrl;
            this.FileBoxType = fileBoxType;
            this.FileName = fileName;
            this.FileSize = fileSize;
            this.Id = id;
            this.IsPublic = isPublic;
            this.RemoteFileKey = remoteFileKey;
            this.UpdatedTime = updatedTime;
        }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [DataMember(Name = "contact_id", EmitDefaultValue = false)]
        public string ContactId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedById
        /// </summary>
        [DataMember(Name = "created_by_id", EmitDefaultValue = false)]
        public string CreatedById { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        [DataMember(Name = "created_time", EmitDefaultValue = false)]
        public string CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets DownloadUrl
        /// </summary>
        [DataMember(Name = "download_url", EmitDefaultValue = false)]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [DataMember(Name = "file_name", EmitDefaultValue = false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets FileSize
        /// </summary>
        [DataMember(Name = "file_size", EmitDefaultValue = false)]
        public long FileSize { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsPublic
        /// </summary>
        [DataMember(Name = "is_public", EmitDefaultValue = true)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// Gets or Sets RemoteFileKey
        /// </summary>
        [DataMember(Name = "remote_file_key", EmitDefaultValue = false)]
        public string RemoteFileKey { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedTime
        /// </summary>
        [DataMember(Name = "updated_time", EmitDefaultValue = false)]
        public string UpdatedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMetadata {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  CreatedById: ").Append(CreatedById).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  DownloadUrl: ").Append(DownloadUrl).Append("\n");
            sb.Append("  FileBoxType: ").Append(FileBoxType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  RemoteFileKey: ").Append(RemoteFileKey).Append("\n");
            sb.Append("  UpdatedTime: ").Append(UpdatedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
