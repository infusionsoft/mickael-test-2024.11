/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.752995
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// InvoiceOrderPayment
    /// </summary>
    [DataContract(Name = "InvoiceOrderPayment")]
    public partial class InvoiceOrderPayment : IValidatableObject
    {
        /// <summary>
        /// Defines PayStatus
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PayStatusEnum
        {
            /// <summary>
            /// Enum MANUALPAID for value: MANUAL_PAID
            /// </summary>
            [EnumMember(Value = "MANUAL_PAID")]
            MANUALPAID = 1,

            /// <summary>
            /// Enum REFUNDED for value: REFUNDED
            /// </summary>
            [EnumMember(Value = "REFUNDED")]
            REFUNDED = 2,

            /// <summary>
            /// Enum VOIDED for value: VOIDED
            /// </summary>
            [EnumMember(Value = "VOIDED")]
            VOIDED = 3,

            /// <summary>
            /// Enum PAYPALPAID for value: PAYPAL_PAID
            /// </summary>
            [EnumMember(Value = "PAYPAL_PAID")]
            PAYPALPAID = 4,

            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 5,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 6,

            /// <summary>
            /// Enum ERROR for value: ERROR
            /// </summary>
            [EnumMember(Value = "ERROR")]
            ERROR = 7,

            /// <summary>
            /// Enum PENDING for value: PENDING
            /// </summary>
            [EnumMember(Value = "PENDING")]
            PENDING = 8
        }

        /// <summary>
        /// Gets or Sets PayStatus
        /// </summary>
        [DataMember(Name = "pay_status", EmitDefaultValue = false)]
        public PayStatusEnum? PayStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceOrderPayment" /> class.
        /// </summary>
        /// <param name="amount">amount.</param>
        /// <param name="id">id.</param>
        /// <param name="invoiceId">invoiceId.</param>
        /// <param name="lastUpdatedTime">lastUpdatedTime.</param>
        /// <param name="note">note.</param>
        /// <param name="payStatus">payStatus.</param>
        /// <param name="payTime">payTime.</param>
        /// <param name="paymentId">paymentId.</param>
        /// <param name="refundInvoicePaymentId">refundInvoicePaymentId.</param>
        /// <param name="skipCommission">skipCommission.</param>
        public InvoiceOrderPayment(decimal amount = default(decimal), string id = default(string), string invoiceId = default(string), string lastUpdatedTime = default(string), string note = default(string), PayStatusEnum? payStatus = default(PayStatusEnum?), string payTime = default(string), string paymentId = default(string), string refundInvoicePaymentId = default(string), bool skipCommission = default(bool))
        {
            this.Amount = amount;
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.LastUpdatedTime = lastUpdatedTime;
            this.Note = note;
            this.PayStatus = payStatus;
            this.PayTime = payTime;
            this.PaymentId = paymentId;
            this.RefundInvoicePaymentId = refundInvoicePaymentId;
            this.SkipCommission = skipCommission;
        }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceId
        /// </summary>
        [DataMember(Name = "invoice_id", EmitDefaultValue = false)]
        public string InvoiceId { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdatedTime
        /// </summary>
        [DataMember(Name = "last_updated_time", EmitDefaultValue = false)]
        public string LastUpdatedTime { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets PayTime
        /// </summary>
        [DataMember(Name = "pay_time", EmitDefaultValue = false)]
        public string PayTime { get; set; }

        /// <summary>
        /// Gets or Sets PaymentId
        /// </summary>
        [DataMember(Name = "payment_id", EmitDefaultValue = false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Gets or Sets RefundInvoicePaymentId
        /// </summary>
        [DataMember(Name = "refund_invoice_payment_id", EmitDefaultValue = false)]
        public string RefundInvoicePaymentId { get; set; }

        /// <summary>
        /// Gets or Sets SkipCommission
        /// </summary>
        [DataMember(Name = "skip_commission", EmitDefaultValue = true)]
        public bool SkipCommission { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvoiceOrderPayment {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  LastUpdatedTime: ").Append(LastUpdatedTime).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PayStatus: ").Append(PayStatus).Append("\n");
            sb.Append("  PayTime: ").Append(PayTime).Append("\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  RefundInvoicePaymentId: ").Append(RefundInvoicePaymentId).Append("\n");
            sb.Append("  SkipCommission: ").Append(SkipCommission).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
