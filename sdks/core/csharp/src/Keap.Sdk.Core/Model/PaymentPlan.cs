/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// PaymentPlan
    /// </summary>
    [DataContract(Name = "PaymentPlan")]
    public partial class PaymentPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentPlan" /> class.
        /// </summary>
        /// <param name="autoCharge">autoCharge.</param>
        /// <param name="creditCardId">creditCardId.</param>
        /// <param name="daysBetweenPayments">daysBetweenPayments (required).</param>
        /// <param name="initialPaymentAmount">initialPaymentAmount.</param>
        /// <param name="initialPaymentDate">initialPaymentDate.</param>
        /// <param name="initialPaymentPercent">initialPaymentPercent.</param>
        /// <param name="numberOfPayments">numberOfPayments (required).</param>
        /// <param name="paymentGateway">paymentGateway.</param>
        /// <param name="paymentMethodId">paymentMethodId.</param>
        /// <param name="planStartDate">planStartDate (required).</param>
        public PaymentPlan(bool autoCharge = default(bool), string creditCardId = default(string), long daysBetweenPayments = default(long), double initialPaymentAmount = default(double), string initialPaymentDate = default(string), double initialPaymentPercent = default(double), long numberOfPayments = default(long), RestPaymentGateway paymentGateway = default(RestPaymentGateway), string paymentMethodId = default(string), string planStartDate = default(string))
        {
            this.DaysBetweenPayments = daysBetweenPayments;
            this.NumberOfPayments = numberOfPayments;
            // to ensure "planStartDate" is required (not null)
            if (planStartDate == null)
            {
                throw new ArgumentNullException("planStartDate is a required property for PaymentPlan and cannot be null");
            }
            this.PlanStartDate = planStartDate;
            this.AutoCharge = autoCharge;
            this.CreditCardId = creditCardId;
            this.InitialPaymentAmount = initialPaymentAmount;
            this.InitialPaymentDate = initialPaymentDate;
            this.InitialPaymentPercent = initialPaymentPercent;
            this.PaymentGateway = paymentGateway;
            this.PaymentMethodId = paymentMethodId;
        }

        /// <summary>
        /// Gets or Sets AutoCharge
        /// </summary>
        [DataMember(Name = "auto_charge", EmitDefaultValue = true)]
        public bool AutoCharge { get; set; }

        /// <summary>
        /// Gets or Sets CreditCardId
        /// </summary>
        [DataMember(Name = "credit_card_id", EmitDefaultValue = false)]
        public string CreditCardId { get; set; }

        /// <summary>
        /// Gets or Sets DaysBetweenPayments
        /// </summary>
        [DataMember(Name = "days_between_payments", IsRequired = true, EmitDefaultValue = true)]
        public long DaysBetweenPayments { get; set; }

        /// <summary>
        /// Gets or Sets InitialPaymentAmount
        /// </summary>
        [DataMember(Name = "initial_payment_amount", EmitDefaultValue = false)]
        public double InitialPaymentAmount { get; set; }

        /// <summary>
        /// Gets or Sets InitialPaymentDate
        /// </summary>
        [DataMember(Name = "initial_payment_date", EmitDefaultValue = false)]
        public string InitialPaymentDate { get; set; }

        /// <summary>
        /// Gets or Sets InitialPaymentPercent
        /// </summary>
        [DataMember(Name = "initial_payment_percent", EmitDefaultValue = false)]
        public double InitialPaymentPercent { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfPayments
        /// </summary>
        [DataMember(Name = "number_of_payments", IsRequired = true, EmitDefaultValue = true)]
        public long NumberOfPayments { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGateway
        /// </summary>
        [DataMember(Name = "payment_gateway", EmitDefaultValue = false)]
        public RestPaymentGateway PaymentGateway { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodId
        /// </summary>
        [DataMember(Name = "payment_method_id", EmitDefaultValue = false)]
        public string PaymentMethodId { get; set; }

        /// <summary>
        /// Gets or Sets PlanStartDate
        /// </summary>
        [DataMember(Name = "plan_start_date", IsRequired = true, EmitDefaultValue = true)]
        public string PlanStartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentPlan {\n");
            sb.Append("  AutoCharge: ").Append(AutoCharge).Append("\n");
            sb.Append("  CreditCardId: ").Append(CreditCardId).Append("\n");
            sb.Append("  DaysBetweenPayments: ").Append(DaysBetweenPayments).Append("\n");
            sb.Append("  InitialPaymentAmount: ").Append(InitialPaymentAmount).Append("\n");
            sb.Append("  InitialPaymentDate: ").Append(InitialPaymentDate).Append("\n");
            sb.Append("  InitialPaymentPercent: ").Append(InitialPaymentPercent).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  PaymentGateway: ").Append(PaymentGateway).Append("\n");
            sb.Append("  PaymentMethodId: ").Append(PaymentMethodId).Append("\n");
            sb.Append("  PlanStartDate: ").Append(PlanStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
