/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// ProductOptions
    /// </summary>
    [DataContract(Name = "ProductOptions")]
    public partial class ProductOptions : IValidatableObject
    {
        /// <summary>
        /// Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned.
        /// </summary>
        /// <value>Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum FIXED for value: FIXED
            /// </summary>
            [EnumMember(Value = "FIXED")]
            FIXED = 1,

            /// <summary>
            /// Enum VARIABLE for value: VARIABLE
            /// </summary>
            [EnumMember(Value = "VARIABLE")]
            VARIABLE = 2
        }

        /// <summary>
        /// Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned.
        /// </summary>
        /// <value>Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductOptions" /> class.
        /// </summary>
        /// <param name="fixedOptions">List of option values for the fixed option.</param>
        /// <param name="name">The option name.</param>
        /// <param name="required">If the user is required to select/fill in an option for the product.</param>
        /// <param name="type">Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned..</param>
        /// <param name="variableSetting">variableSetting.</param>
        public ProductOptions(List<ProductFixedOption> fixedOptions = default(List<ProductFixedOption>), string name = default(string), bool required = default(bool), TypeEnum? type = default(TypeEnum?), ProductVariableSetting variableSetting = default(ProductVariableSetting))
        {
            this.FixedOptions = fixedOptions;
            this.Name = name;
            this.Required = required;
            this.Type = type;
            this.VariableSetting = variableSetting;
        }

        /// <summary>
        /// List of option values for the fixed option
        /// </summary>
        /// <value>List of option values for the fixed option</value>
        [DataMember(Name = "fixed_options", EmitDefaultValue = false)]
        public List<ProductFixedOption> FixedOptions { get; set; }

        /// <summary>
        /// The option name
        /// </summary>
        /// <value>The option name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// If the user is required to select/fill in an option for the product
        /// </summary>
        /// <value>If the user is required to select/fill in an option for the product</value>
        [DataMember(Name = "required", EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets VariableSetting
        /// </summary>
        [DataMember(Name = "variable_setting", EmitDefaultValue = false)]
        public ProductVariableSetting VariableSetting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductOptions {\n");
            sb.Append("  FixedOptions: ").Append(FixedOptions).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VariableSetting: ").Append(VariableSetting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
