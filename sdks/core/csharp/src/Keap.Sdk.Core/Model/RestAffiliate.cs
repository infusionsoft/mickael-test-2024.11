/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772697-hf-202501311118
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// RestAffiliate
    /// </summary>
    [DataContract(Name = "RestAffiliate")]
    public partial class RestAffiliate : IValidatableObject
    {
        /// <summary>
        /// The Affiliate Status
        /// </summary>
        /// <value>The Affiliate Status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }

        /// <summary>
        /// The Affiliate Status
        /// </summary>
        /// <value>The Affiliate Status</value>
        /*
        <example>ACTIVE</example>
        */
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RestAffiliate" /> class.
        /// </summary>
        /// <param name="code">The Affiliate Code.</param>
        /// <param name="contactId">The ContactID.</param>
        /// <param name="id">The AffiliateId.</param>
        /// <param name="name">The Affiliate Name.</param>
        /// <param name="status">The Affiliate Status.</param>
        /// <param name="uniqueSiteId">The Affiliate PortalSite Id.</param>
        public RestAffiliate(string code = default(string), string contactId = default(string), string id = default(string), string name = default(string), StatusEnum? status = default(StatusEnum?), string uniqueSiteId = default(string))
        {
            this.Code = code;
            this.ContactId = contactId;
            this.Id = id;
            this.Name = name;
            this.Status = status;
            this.UniqueSiteId = uniqueSiteId;
        }

        /// <summary>
        /// The Affiliate Code
        /// </summary>
        /// <value>The Affiliate Code</value>
        /*
        <example>M123</example>
        */
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The ContactID
        /// </summary>
        /// <value>The ContactID</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "contact_id", EmitDefaultValue = false)]
        public string ContactId { get; set; }

        /// <summary>
        /// The AffiliateId
        /// </summary>
        /// <value>The AffiliateId</value>
        /*
        <example>1</example>
        */
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The Affiliate Name
        /// </summary>
        /// <value>The Affiliate Name</value>
        /*
        <example>Affiliate Name</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The Affiliate PortalSite Id
        /// </summary>
        /// <value>The Affiliate PortalSite Id</value>
        /*
        <example>123456</example>
        */
        [DataMember(Name = "unique_site_id", EmitDefaultValue = false)]
        public string UniqueSiteId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestAffiliate {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UniqueSiteId: ").Append(UniqueSiteId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
