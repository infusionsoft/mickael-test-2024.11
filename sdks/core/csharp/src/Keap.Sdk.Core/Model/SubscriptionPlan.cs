/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// SubscriptionPlan
    /// </summary>
    [DataContract(Name = "SubscriptionPlan")]
    public partial class SubscriptionPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionPlan" /> class.
        /// </summary>
        /// <param name="active">If the subscription plan should be active/available for purchase.</param>
        /// <param name="billingCycle">How frequent to bill. Can be: DAILY, WEEKLY, MONTHLY, or YEARLY.</param>
        /// <param name="billingFrequency">How many times per billing cycle to bill.</param>
        /// <param name="id">The subscription plan id.</param>
        /// <param name="numberOfCycles">How many billing cycles to bill. Optional field i.e. can be no value or 0..</param>
        /// <param name="orderIndex">Determines the order in which the plan will be displayed.</param>
        /// <param name="planPrice">planPrice.</param>
        /// <param name="prorate">If the subscription plan should allow prorating.</param>
        public SubscriptionPlan(bool active = default(bool), string billingCycle = default(string), int billingFrequency = default(int), string id = default(string), int numberOfCycles = default(int), int orderIndex = default(int), CurrencyValue planPrice = default(CurrencyValue), bool prorate = default(bool))
        {
            this.Active = active;
            this.BillingCycle = billingCycle;
            this.BillingFrequency = billingFrequency;
            this.Id = id;
            this.NumberOfCycles = numberOfCycles;
            this.OrderIndex = orderIndex;
            this.PlanPrice = planPrice;
            this.Prorate = prorate;
        }

        /// <summary>
        /// If the subscription plan should be active/available for purchase
        /// </summary>
        /// <value>If the subscription plan should be active/available for purchase</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool Active { get; set; }

        /// <summary>
        /// How frequent to bill. Can be: DAILY, WEEKLY, MONTHLY, or YEARLY
        /// </summary>
        /// <value>How frequent to bill. Can be: DAILY, WEEKLY, MONTHLY, or YEARLY</value>
        [DataMember(Name = "billing_cycle", EmitDefaultValue = false)]
        public string BillingCycle { get; set; }

        /// <summary>
        /// How many times per billing cycle to bill
        /// </summary>
        /// <value>How many times per billing cycle to bill</value>
        [DataMember(Name = "billing_frequency", EmitDefaultValue = false)]
        public int BillingFrequency { get; set; }

        /// <summary>
        /// The subscription plan id
        /// </summary>
        /// <value>The subscription plan id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// How many billing cycles to bill. Optional field i.e. can be no value or 0.
        /// </summary>
        /// <value>How many billing cycles to bill. Optional field i.e. can be no value or 0.</value>
        [DataMember(Name = "number_of_cycles", EmitDefaultValue = false)]
        public int NumberOfCycles { get; set; }

        /// <summary>
        /// Determines the order in which the plan will be displayed
        /// </summary>
        /// <value>Determines the order in which the plan will be displayed</value>
        [DataMember(Name = "order_index", EmitDefaultValue = false)]
        public int OrderIndex { get; set; }

        /// <summary>
        /// Gets or Sets PlanPrice
        /// </summary>
        [DataMember(Name = "plan_price", EmitDefaultValue = false)]
        public CurrencyValue PlanPrice { get; set; }

        /// <summary>
        /// If the subscription plan should allow prorating
        /// </summary>
        /// <value>If the subscription plan should allow prorating</value>
        [DataMember(Name = "prorate", EmitDefaultValue = true)]
        public bool Prorate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscriptionPlan {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  BillingCycle: ").Append(BillingCycle).Append("\n");
            sb.Append("  BillingFrequency: ").Append(BillingFrequency).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NumberOfCycles: ").Append(NumberOfCycles).Append("\n");
            sb.Append("  OrderIndex: ").Append(OrderIndex).Append("\n");
            sb.Append("  PlanPrice: ").Append(PlanPrice).Append("\n");
            sb.Append("  Prorate: ").Append(Prorate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
