/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Sdk.Core.Client.OpenAPIDateConverter;

namespace Keap.Sdk.Core.Model
{
    /// <summary>
    /// Request model for updating a deal note.
    /// </summary>
    [DataContract(Name = "UpdateDealNoteRequest")]
    public partial class UpdateDealNoteRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDealNoteRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateDealNoteRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDealNoteRequest" /> class.
        /// </summary>
        /// <param name="body">The body of the note. Must not be blank and must be between 1 and 5000 characters. (required).</param>
        public UpdateDealNoteRequest(string body = default(string))
        {
            // to ensure "body" is required (not null)
            if (body == null)
            {
                throw new ArgumentNullException("body is a required property for UpdateDealNoteRequest and cannot be null");
            }
            this.Body = body;
        }

        /// <summary>
        /// The body of the note. Must not be blank and must be between 1 and 5000 characters.
        /// </summary>
        /// <value>The body of the note. Must not be blank and must be between 1 and 5000 characters.</value>
        [DataMember(Name = "body", IsRequired = true, EmitDefaultValue = true)]
        public string Body { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDealNoteRequest {\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Body (string) maxLength
            if (this.Body != null && this.Body.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for Body, length must be less than 5000.", new [] { "Body" });
            }

            // Body (string) minLength
            if (this.Body != null && this.Body.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Body, length must be greater than 1.", new [] { "Body" });
            }

            yield break;
        }    }

}
