/*
 * Keap REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.sdk.core.api;

import com.keap.sdk.core.ApiClient;
import com.keap.sdk.core.ApiException;
import com.keap.sdk.core.ApiResponse;
import com.keap.sdk.core.Pair;

import com.keap.sdk.core.model.AffiliateAddToProgramRequest;
import com.keap.sdk.core.model.AffiliateCommissionEarned;
import com.keap.sdk.core.model.AffiliateCommissionProgramResponse;
import com.keap.sdk.core.model.AffiliateLink;
import com.keap.sdk.core.model.AffiliateProgramV2;
import com.keap.sdk.core.model.AffiliateRemoveFromProgramRequest;
import com.keap.sdk.core.model.CreateAffiliateRequest;
import com.keap.sdk.core.model.CreateCommissionProgramRequest;
import com.keap.sdk.core.model.CreateCustomFieldRequest;
import com.keap.sdk.core.model.CreateDefaultCommissionProgramRequest;
import com.keap.sdk.core.model.CreateOrPatchAffiliateLinkRequest;
import com.keap.sdk.core.model.CreateProductCommissionProgramRequest;
import com.keap.sdk.core.model.CreateSubscriptionCommissionProgramRequest;
import com.keap.sdk.core.model.CustomFieldMetaData;
import com.keap.sdk.core.model.DeleteSubscriptionPlanCommissionRequest;
import com.keap.sdk.core.model.Error;
import com.keap.sdk.core.model.ListAffiliateCommissionProgramsResponse;
import com.keap.sdk.core.model.ListAffiliateCommissionResponse;
import com.keap.sdk.core.model.ListAffiliateLinksResponse;
import com.keap.sdk.core.model.ListAffiliateSummariesResponse;
import com.keap.sdk.core.model.ObjectModel;
import com.keap.sdk.core.model.PatchAffiliateRequest;
import com.keap.sdk.core.model.PatchCommissionProgramRequest;
import com.keap.sdk.core.model.PatchDefaultCommissionProgramRequest;
import com.keap.sdk.core.model.PatchProductCommissionProgramRequest;
import com.keap.sdk.core.model.PatchSubscriptionCommissionProgramRequest;
import com.keap.sdk.core.model.ProductCommissionProgram;
import com.keap.sdk.core.model.RestAffiliate;
import com.keap.sdk.core.model.SetDefaultCommissionProgramResponse;
import com.keap.sdk.core.model.SubscriptionCommissionProgram;
import com.keap.sdk.core.model.UpdateCustomFieldMetaDataRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")public class AffiliateApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public AffiliateApi() {
    this(new ApiClient());
  }

  public AffiliateApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void addAffiliateToProgramUsingPOST_0(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    addAffiliateToProgramUsingPOST_0WithHttpInfo(id, affiliateAddToProgramRequest);
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addAffiliateToProgramUsingPOST_0WithHttpInfo(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateToProgramUsingPOST_0RequestBuilder(id, affiliateAddToProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateToProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateToProgramUsingPOST_0RequestBuilder(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addAffiliateToProgramUsingPOST_0");
    }
    // verify the required parameter 'affiliateAddToProgramRequest' is set
    if (affiliateAddToProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgramUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:assignToProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateAddToProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param insertAffiliate Affiliate request to insert (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate addAffiliateUsingPOST(CreateAffiliateRequest insertAffiliate) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = addAffiliateUsingPOSTWithHttpInfo(insertAffiliate);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param insertAffiliate Affiliate request to insert (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> addAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest insertAffiliate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateUsingPOSTRequestBuilder(insertAffiliate);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateUsingPOST", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateUsingPOSTRequestBuilder(CreateAffiliateRequest insertAffiliate) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(insertAffiliate);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param insertCommissionProgram Commission Program to insert (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse addCommissionProgramUsingPOST_0(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = addCommissionProgramUsingPOST_0WithHttpInfo(insertCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param insertCommissionProgram Commission Program to insert (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> addCommissionProgramUsingPOST_0WithHttpInfo(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addCommissionProgramUsingPOST_0RequestBuilder(insertCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addCommissionProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addCommissionProgramUsingPOST_0RequestBuilder(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(insertCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param productCommissionProgram Product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram assignProductCommissionProgramUsingPOST_0(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = assignProductCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, productCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param productCommissionProgram Product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> assignProductCommissionProgramUsingPOST_0WithHttpInfo(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignProductCommissionProgramUsingPOST_0RequestBuilder(commissionProgramId, productCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignProductCommissionProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignProductCommissionProgramUsingPOST_0RequestBuilder(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgramUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(productCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param subscriptionCommissionProgram Subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram assignSubscriptionCommissionProgramUsingPOST_0(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = assignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, subscriptionCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param subscriptionCommissionProgram Subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> assignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignSubscriptionCommissionProgramUsingPOST_0RequestBuilder(commissionProgramId, subscriptionCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignSubscriptionCommissionProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignSubscriptionCommissionProgramUsingPOST_0RequestBuilder(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgramUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(subscriptionCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createAffiliateCustomFieldUsingPOST_0(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createAffiliateCustomFieldUsingPOST_0WithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createAffiliateCustomFieldUsingPOST_0WithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAffiliateCustomFieldUsingPOST_0RequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAffiliateCustomFieldUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAffiliateCustomFieldUsingPOST_0RequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createAffiliateCustomFieldUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse createDefaultCommissionProgramUsingPOST_0(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = createDefaultCommissionProgramUsingPOST_0WithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> createDefaultCommissionProgramUsingPOST_0WithHttpInfo(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDefaultCommissionProgramUsingPOST_0RequestBuilder(commissionProgramId, createDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDefaultCommissionProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDefaultCommissionProgramUsingPOST_0RequestBuilder(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgramUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param request request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink createRedirectLinkUsingPOST_0(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = createRedirectLinkUsingPOST_0WithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param request request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> createRedirectLinkUsingPOST_0WithHttpInfo(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRedirectLinkUsingPOST_0RequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRedirectLinkUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRedirectLinkUsingPOST_0RequestBuilder(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createRedirectLinkUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateCommissionProgramUsingDELETE_0(String commissionProgramId) throws ApiException {
    deleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo(commissionProgramId);
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateCommissionProgramUsingDELETE_0RequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateCommissionProgramUsingDELETE_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateCommissionProgramUsingDELETE_0RequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgramUsingDELETE_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateUsingDELETE_0(String id) throws ApiException {
    deleteAffiliateUsingDELETE_0WithHttpInfo(id);
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateUsingDELETE_0WithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateUsingDELETE_0RequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateUsingDELETE_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateUsingDELETE_0RequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAffiliateUsingDELETE_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRedirectLinkUsingDELETE_0(String redirectId) throws ApiException {
    deleteRedirectLinkUsingDELETE_0WithHttpInfo(redirectId);
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRedirectLinkUsingDELETE_0WithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRedirectLinkUsingDELETE_0RequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRedirectLinkUsingDELETE_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRedirectLinkUsingDELETE_0RequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling deleteRedirectLinkUsingDELETE_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return AffiliateCommissionEarned
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionEarned getAffiliateCommissionTotalUsingGET_0(String affiliateId) throws ApiException {
    ApiResponse<AffiliateCommissionEarned> localVarResponse = getAffiliateCommissionTotalUsingGET_0WithHttpInfo(affiliateId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return ApiResponse&lt;AffiliateCommissionEarned&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionEarned> getAffiliateCommissionTotalUsingGET_0WithHttpInfo(String affiliateId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionTotalUsingGET_0RequestBuilder(affiliateId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionTotalUsingGET_0", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionEarned>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionEarned>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionTotalUsingGET_0RequestBuilder(String affiliateId) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotalUsingGET_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}/commissionTotal"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionResponse getAffiliateCommissionsUsingGET_0(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionResponse> localVarResponse = getAffiliateCommissionsUsingGET_0WithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionResponse> getAffiliateCommissionsUsingGET_0WithHttpInfo(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionsUsingGET_0RequestBuilder(affiliateId, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionsUsingGET_0", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionsUsingGET_0RequestBuilder(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionsUsingGET_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}:commissions"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel getAffiliateCustomFieldsUsingGET_0() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = getAffiliateCustomFieldsUsingGET_0WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> getAffiliateCustomFieldsUsingGET_0WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCustomFieldsUsingGET_0RequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCustomFieldsUsingGET_0", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCustomFieldsUsingGET_0RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate getAffiliateUsingGET1(String id) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = getAffiliateUsingGET1WithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> getAffiliateUsingGET1WithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateUsingGET1RequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateUsingGET1", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateUsingGET1RequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAffiliateUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return AffiliateProgramV2
   * @throws ApiException if fails to make API call
   */
  public AffiliateProgramV2 getCommissionProgramUsingGET_0(String commissionProgramId) throws ApiException {
    ApiResponse<AffiliateProgramV2> localVarResponse = getCommissionProgramUsingGET_0WithHttpInfo(commissionProgramId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;AffiliateProgramV2&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateProgramV2> getCommissionProgramUsingGET_0WithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommissionProgramUsingGET_0RequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCommissionProgramUsingGET_0", localVarResponse);
        }
        return new ApiResponse<AffiliateProgramV2>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateProgramV2>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommissionProgramUsingGET_0RequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling getCommissionProgramUsingGET_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink getRedirectLinkUsingGET_0(String redirectId) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = getRedirectLinkUsingGET_0WithHttpInfo(redirectId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> getRedirectLinkUsingGET_0WithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRedirectLinkUsingGET_0RequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRedirectLinkUsingGET_0", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRedirectLinkUsingGET_0RequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling getRedirectLinkUsingGET_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionProgramsResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionProgramsResponse listAffiliateCommissionProgramsUsingGET_0(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = listAffiliateCommissionProgramsUsingGET_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionProgramsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionProgramsResponse> listAffiliateCommissionProgramsUsingGET_0WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateCommissionProgramsUsingGET_0RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateCommissionProgramsUsingGET_0", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionProgramsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionProgramsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateCommissionProgramsUsingGET_0RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateLinksResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateLinksResponse listAffiliateLinksUsingGET_0(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateLinksResponse> localVarResponse = listAffiliateLinksUsingGET_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateLinksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateLinksResponse> listAffiliateLinksUsingGET_0WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateLinksUsingGET_0RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateLinksUsingGET_0", localVarResponse);
        }
        return new ApiResponse<ListAffiliateLinksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateLinksResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateLinksUsingGET_0RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateSummariesResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateSummariesResponse listSummariesUsingGET1_0(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateSummariesResponse> localVarResponse = listSummariesUsingGET1_0WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateSummariesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateSummariesResponse> listSummariesUsingGET1_0WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSummariesUsingGET1_0RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSummariesUsingGET1_0", localVarResponse);
        }
        return new ApiResponse<ListAffiliateSummariesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateSummariesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSummariesUsingGET1_0RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/summaries";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param patchCommissionProgramRequest patchCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse patchCommissionProgramUsingPATCH(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = patchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, patchCommissionProgramRequest, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param patchCommissionProgramRequest patchCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> patchCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, patchCommissionProgramRequest, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchCommissionProgramUsingPATCH");
    }
    // verify the required parameter 'patchCommissionProgramRequest' is set
    if (patchCommissionProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchCommissionProgramRequest' when calling patchCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse patchDefaultCommissionProgramUsingPATCH_0(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = patchDefaultCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> patchDefaultCommissionProgramUsingPATCH_0WithHttpInfo(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchDefaultCommissionProgramUsingPATCH_0RequestBuilder(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchDefaultCommissionProgramUsingPATCH_0", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchDefaultCommissionProgramUsingPATCH_0RequestBuilder(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchDefaultCommissionProgramUsingPATCH_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram patchProductCommissionProgramUsingPATCH_0(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = patchProductCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> patchProductCommissionProgramUsingPATCH_0WithHttpInfo(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchProductCommissionProgramUsingPATCH_0RequestBuilder(commissionProgramId, updateMask, patchProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchProductCommissionProgramUsingPATCH_0", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchProductCommissionProgramUsingPATCH_0RequestBuilder(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchProductCommissionProgramUsingPATCH_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchProductCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram patchSubscriptionCommissionProgramUsingPATCH_0(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = patchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> patchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchSubscriptionCommissionProgramUsingPATCH_0RequestBuilder(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchSubscriptionCommissionProgramUsingPATCH_0", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchSubscriptionCommissionProgramUsingPATCH_0RequestBuilder(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchSubscriptionCommissionProgramUsingPATCH_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param removeFromProgramRequest removeFromProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAffiliateFromProgramUsingPOST_0(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    removeAffiliateFromProgramUsingPOST_0WithHttpInfo(id, removeFromProgramRequest);
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param removeFromProgramRequest removeFromProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAffiliateFromProgramUsingPOST_0WithHttpInfo(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAffiliateFromProgramUsingPOST_0RequestBuilder(id, removeFromProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAffiliateFromProgramUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAffiliateFromProgramUsingPOST_0RequestBuilder(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeAffiliateFromProgramUsingPOST_0");
    }
    // verify the required parameter 'removeFromProgramRequest' is set
    if (removeFromProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'removeFromProgramRequest' when calling removeAffiliateFromProgramUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:removeFromProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(removeFromProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0RequestBuilder(commissionId, deleteSubscriptionPlanCommissionRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0RequestBuilder(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    // verify the required parameter 'commissionId' is set
    if (commissionId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
    }
    // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
    if (deleteSubscriptionPlanCommissionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission"
        .replace("{commission_id}", ApiClient.urlEncode(commissionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteSubscriptionPlanCommissionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateAffiliateCustomFieldUsingPATCH_0(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateAffiliateCustomFieldUsingPATCH_0WithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateAffiliateCustomFieldUsingPATCH_0WithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateCustomFieldUsingPATCH_0RequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliateCustomFieldUsingPATCH_0", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateCustomFieldUsingPATCH_0RequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateAffiliateCustomFieldUsingPATCH_0");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateAffiliateCustomFieldUsingPATCH_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param patchAffiliate Affiliate request to patch (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate updateAffiliateUsingPATCH(String id, PatchAffiliateRequest patchAffiliate) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = updateAffiliateUsingPATCHWithHttpInfo(id, patchAffiliate);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param patchAffiliate Affiliate request to patch (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> updateAffiliateUsingPATCHWithHttpInfo(String id, PatchAffiliateRequest patchAffiliate) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateUsingPATCHRequestBuilder(id, patchAffiliate);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliateUsingPATCH", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateUsingPATCHRequestBuilder(String id, PatchAffiliateRequest patchAffiliate) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAffiliateUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchAffiliate);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param request request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink updateRedirectLinkUsingPATCH_0(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = updateRedirectLinkUsingPATCH_0WithHttpInfo(redirectId, request);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param request request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> updateRedirectLinkUsingPATCH_0WithHttpInfo(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRedirectLinkUsingPATCH_0RequestBuilder(redirectId, request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRedirectLinkUsingPATCH_0", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRedirectLinkUsingPATCH_0RequestBuilder(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling updateRedirectLinkUsingPATCH_0");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateRedirectLinkUsingPATCH_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
