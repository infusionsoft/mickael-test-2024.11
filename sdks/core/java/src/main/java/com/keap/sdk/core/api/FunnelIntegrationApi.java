/*
 * Keap REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.sdk.core.api;

import com.keap.sdk.core.ApiClient;
import com.keap.sdk.core.ApiException;
import com.keap.sdk.core.ApiResponse;
import com.keap.sdk.core.Pair;

import com.keap.sdk.core.model.CreateFunnelIntegrationRequest;
import com.keap.sdk.core.model.CreateFunnelIntegrationTriggerEvents;
import com.keap.sdk.core.model.DeleteFunnelIntegrationRequest;
import com.keap.sdk.core.model.Error;
import com.keap.sdk.core.model.FunnelIntegrationTriggerResultDTO;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")public class FunnelIntegrationApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public FunnelIntegrationApi() {
    this(new ApiClient());
  }

  public FunnelIntegrationApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create Funnel Integrations into the app.
   * Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
   * @param createFunnelIntegrationRequest createFunnelIntegrationRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void createFunnelIntegrationUsingPOST_0(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    createFunnelIntegrationUsingPOST_0WithHttpInfo(createFunnelIntegrationRequest);
  }

  /**
   * Create Funnel Integrations into the app.
   * Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
   * @param createFunnelIntegrationRequest createFunnelIntegrationRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createFunnelIntegrationUsingPOST_0WithHttpInfo(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createFunnelIntegrationUsingPOST_0RequestBuilder(createFunnelIntegrationRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createFunnelIntegrationUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createFunnelIntegrationUsingPOST_0RequestBuilder(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    // verify the required parameter 'createFunnelIntegrationRequest' is set
    if (createFunnelIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createFunnelIntegrationRequest' when calling createFunnelIntegrationUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createFunnelIntegrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Achieve Funnel Integration Trigger Goal
   * 
   * @param createFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents (required)
   * @return List&lt;FunnelIntegrationTriggerResultDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public List<FunnelIntegrationTriggerResultDTO> createIntegrationTriggerEventUsingPOST_0(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    ApiResponse<List<FunnelIntegrationTriggerResultDTO>> localVarResponse = createIntegrationTriggerEventUsingPOST_0WithHttpInfo(createFunnelIntegrationTriggerEvents);
    return localVarResponse.getData();
  }

  /**
   * Achieve Funnel Integration Trigger Goal
   * 
   * @param createFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents (required)
   * @return ApiResponse&lt;List&lt;FunnelIntegrationTriggerResultDTO&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<FunnelIntegrationTriggerResultDTO>> createIntegrationTriggerEventUsingPOST_0WithHttpInfo(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createIntegrationTriggerEventUsingPOST_0RequestBuilder(createFunnelIntegrationTriggerEvents);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createIntegrationTriggerEventUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<List<FunnelIntegrationTriggerResultDTO>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<FunnelIntegrationTriggerResultDTO>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createIntegrationTriggerEventUsingPOST_0RequestBuilder(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    // verify the required parameter 'createFunnelIntegrationTriggerEvents' is set
    if (createFunnelIntegrationTriggerEvents == null) {
      throw new ApiException(400, "Missing the required parameter 'createFunnelIntegrationTriggerEvents' when calling createIntegrationTriggerEventUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration/trigger";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createFunnelIntegrationTriggerEvents);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes Funnel Integrations from the app.
   * Deletes all triggers / goals, and actions / sequence items for the given funnel integration
   * @param deleteFunnelIntegrationRequest deleteFunnelIntegrationRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteFunnelIntegrationUsingPOST_0(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    deleteFunnelIntegrationUsingPOST_0WithHttpInfo(deleteFunnelIntegrationRequest);
  }

  /**
   * Deletes Funnel Integrations from the app.
   * Deletes all triggers / goals, and actions / sequence items for the given funnel integration
   * @param deleteFunnelIntegrationRequest deleteFunnelIntegrationRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteFunnelIntegrationUsingPOST_0WithHttpInfo(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteFunnelIntegrationUsingPOST_0RequestBuilder(deleteFunnelIntegrationRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteFunnelIntegrationUsingPOST_0", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteFunnelIntegrationUsingPOST_0RequestBuilder(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    // verify the required parameter 'deleteFunnelIntegrationRequest' is set
    if (deleteFunnelIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteFunnelIntegrationRequest' when calling deleteFunnelIntegrationUsingPOST_0");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration/uninstall";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteFunnelIntegrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
