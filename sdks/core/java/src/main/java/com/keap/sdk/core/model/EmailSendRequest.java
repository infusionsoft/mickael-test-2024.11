/*
 * Keap REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.sdk.core.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keap.sdk.core.model.EmailSendRequestAttachment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * EmailSendRequest
 */
@JsonPropertyOrder({
  EmailSendRequest.JSON_PROPERTY_ADDRESS_FIELD,
  EmailSendRequest.JSON_PROPERTY_ATTACHMENTS,
  EmailSendRequest.JSON_PROPERTY_CONTACTS,
  EmailSendRequest.JSON_PROPERTY_HTML_CONTENT,
  EmailSendRequest.JSON_PROPERTY_PLAIN_CONTENT,
  EmailSendRequest.JSON_PROPERTY_SUBJECT,
  EmailSendRequest.JSON_PROPERTY_USER_ID
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.9.0")
public class EmailSendRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ADDRESS_FIELD = "address_field";
  private String addressField;

  public static final String JSON_PROPERTY_ATTACHMENTS = "attachments";
  private List<@Valid EmailSendRequestAttachment> attachments = new ArrayList<>();

  public static final String JSON_PROPERTY_CONTACTS = "contacts";
  private List<String> contacts = new ArrayList<>();

  public static final String JSON_PROPERTY_HTML_CONTENT = "html_content";
  private String htmlContent;

  public static final String JSON_PROPERTY_PLAIN_CONTENT = "plain_content";
  private String plainContent;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private String userId;

  public EmailSendRequest() { 
  }

  public EmailSendRequest addressField(String addressField) {
    this.addressField = addressField;
    return this;
  }

  /**
   * Email field of each Contact record to address the email to, such as &#39;Email&#39;, &#39;EmailAddress2&#39;, &#39;EmailAddress3&#39; or &#39;_CustomFieldName&#39;, defaulting to the contact&#39;s primary email
   * @return addressField
   */
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Email field of each Contact record to address the email to, such as 'Email', 'EmailAddress2', 'EmailAddress3' or '_CustomFieldName', defaulting to the contact's primary email")
  @JsonProperty(JSON_PROPERTY_ADDRESS_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAddressField() {
    return addressField;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddressField(String addressField) {
    this.addressField = addressField;
  }


  public EmailSendRequest attachments(List<@Valid EmailSendRequestAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public EmailSendRequest addAttachmentsItem(EmailSendRequestAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each
   * @return attachments
   */
  @jakarta.annotation.Nullable
  @Valid
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each")
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<@Valid EmailSendRequestAttachment> getAttachments() {
    return attachments;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachments(List<@Valid EmailSendRequestAttachment> attachments) {
    this.attachments = attachments;
  }


  public EmailSendRequest contacts(List<String> contacts) {
    this.contacts = contacts;
    return this;
  }

  public EmailSendRequest addContactsItem(String contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * An array of Contact Ids to receive the email
   * @return contacts
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "An array of Contact Ids to receive the email")
  @JsonProperty(JSON_PROPERTY_CONTACTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getContacts() {
    return contacts;
  }


  @JsonProperty(JSON_PROPERTY_CONTACTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContacts(List<String> contacts) {
    this.contacts = contacts;
  }


  public EmailSendRequest htmlContent(String htmlContent) {
    this.htmlContent = htmlContent;
    return this;
  }

  /**
   * The HTML-formatted content of the email, encoded in Base64
   * @return htmlContent
   */
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The HTML-formatted content of the email, encoded in Base64")
  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHtmlContent() {
    return htmlContent;
  }


  @JsonProperty(JSON_PROPERTY_HTML_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtmlContent(String htmlContent) {
    this.htmlContent = htmlContent;
  }


  public EmailSendRequest plainContent(String plainContent) {
    this.plainContent = plainContent;
    return this;
  }

  /**
   * The plain-text content of the email, encoded in Base64
   * @return plainContent
   */
  @jakarta.annotation.Nullable
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The plain-text content of the email, encoded in Base64")
  @JsonProperty(JSON_PROPERTY_PLAIN_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPlainContent() {
    return plainContent;
  }


  @JsonProperty(JSON_PROPERTY_PLAIN_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlainContent(String plainContent) {
    this.plainContent = plainContent;
  }


  public EmailSendRequest subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject line of the email
   * @return subject
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The subject line of the email")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public EmailSendRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The infusionsoft user to send the email on behalf of
   * @return userId
   */
  @jakarta.annotation.Nonnull
  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "The infusionsoft user to send the email on behalf of")
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(String userId) {
    this.userId = userId;
  }

  /**
   * Return true if this EmailSendRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailSendRequest emailSendRequest = (EmailSendRequest) o;
    return Objects.equals(this.addressField, emailSendRequest.addressField) &&
        Objects.equals(this.attachments, emailSendRequest.attachments) &&
        Objects.equals(this.contacts, emailSendRequest.contacts) &&
        Objects.equals(this.htmlContent, emailSendRequest.htmlContent) &&
        Objects.equals(this.plainContent, emailSendRequest.plainContent) &&
        Objects.equals(this.subject, emailSendRequest.subject) &&
        Objects.equals(this.userId, emailSendRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressField, attachments, contacts, htmlContent, plainContent, subject, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailSendRequest {\n");
    sb.append("    addressField: ").append(toIndentedString(addressField)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    htmlContent: ").append(toIndentedString(htmlContent)).append("\n");
    sb.append("    plainContent: ").append(toIndentedString(plainContent)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private EmailSendRequest instance;
    
        public Builder() {
          this(new EmailSendRequest());
        }
    
        protected Builder(EmailSendRequest instance) {
          this.instance = instance;
        }
    
        public EmailSendRequest.Builder addressField(String addressField) {
              this.instance.addressField = addressField;
          return this;
        }
            public EmailSendRequest.Builder attachments(List<@Valid EmailSendRequestAttachment> attachments) {
              this.instance.attachments = attachments;
          return this;
        }
            public EmailSendRequest.Builder contacts(List<String> contacts) {
              this.instance.contacts = contacts;
          return this;
        }
            public EmailSendRequest.Builder htmlContent(String htmlContent) {
              this.instance.htmlContent = htmlContent;
          return this;
        }
            public EmailSendRequest.Builder plainContent(String plainContent) {
              this.instance.plainContent = plainContent;
          return this;
        }
            public EmailSendRequest.Builder subject(String subject) {
              this.instance.subject = subject;
          return this;
        }
            public EmailSendRequest.Builder userId(String userId) {
              this.instance.userId = userId;
          return this;
        }
        
    
        /**
        * returns a built EmailSendRequest instance.
        *
        * The builder is not reusable.
        */
        public EmailSendRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static EmailSendRequest.Builder builder() {
        return new EmailSendRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public EmailSendRequest.Builder toBuilder() {
        return new EmailSendRequest.Builder()
          .addressField(getAddressField())
          .attachments(getAttachments())
          .contacts(getContacts())
          .htmlContent(getHtmlContent())
          .plainContent(getPlainContent())
          .subject(getSubject())
          .userId(getUserId());
      }
}

