/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.sdk.sdk.client;

import com.keap.sdk.sdk.ApiClient;
import com.keap.sdk.sdk.ApiException;
import com.keap.sdk.sdk.ApiResponse;
import com.keap.sdk.sdk.Pair;

import com.keap.sdk.sdk.model.AffiliateAddToProgramRequest;
import com.keap.sdk.sdk.model.AffiliateCommissionEarned;
import com.keap.sdk.sdk.model.AffiliateCommissionProgramResponse;
import com.keap.sdk.sdk.model.AffiliateLink;
import com.keap.sdk.sdk.model.AffiliateProgramV2;
import com.keap.sdk.sdk.model.AffiliateRemoveFromProgramRequest;
import com.keap.sdk.sdk.model.CreateAffiliateRequest;
import com.keap.sdk.sdk.model.CreateCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateCustomFieldRequest;
import com.keap.sdk.sdk.model.CreateDefaultCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateOrPatchAffiliateLinkRequest;
import com.keap.sdk.sdk.model.CreateProductCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateSubscriptionCommissionProgramRequest;
import com.keap.sdk.sdk.model.CustomFieldMetaData;
import com.keap.sdk.sdk.model.DeleteSubscriptionPlanCommissionRequest;
import com.keap.sdk.sdk.model.Error;
import com.keap.sdk.sdk.model.ListAffiliateCommissionProgramsResponse;
import com.keap.sdk.sdk.model.ListAffiliateCommissionResponse;
import com.keap.sdk.sdk.model.ListAffiliateLinksResponse;
import com.keap.sdk.sdk.model.ListAffiliateSummariesResponse;
import com.keap.sdk.sdk.model.ObjectModel;
import com.keap.sdk.sdk.model.PatchAffiliateRequest;
import com.keap.sdk.sdk.model.PatchCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchDefaultCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchProductCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchSubscriptionCommissionProgramRequest;
import com.keap.sdk.sdk.model.ProductCommissionProgram;
import com.keap.sdk.sdk.model.RestAffiliate;
import com.keap.sdk.sdk.model.SetDefaultCommissionProgramResponse;
import com.keap.sdk.sdk.model.SubscriptionCommissionProgram;
import com.keap.sdk.sdk.model.UpdateCustomFieldMetaDataRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")public class AffiliateApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public AffiliateApi() {
    this(new ApiClient());
  }

  public AffiliateApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void addAffiliateToProgramUsingPOST(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    addAffiliateToProgramUsingPOSTWithHttpInfo(id, affiliateAddToProgramRequest);
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addAffiliateToProgramUsingPOSTWithHttpInfo(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateToProgramUsingPOSTRequestBuilder(id, affiliateAddToProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateToProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateToProgramUsingPOSTRequestBuilder(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addAffiliateToProgramUsingPOST");
    }
    // verify the required parameter 'affiliateAddToProgramRequest' is set
    if (affiliateAddToProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:assignToProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateAddToProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param createAffiliateRequest Affiliate request to insert (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate addAffiliateUsingPOST(CreateAffiliateRequest createAffiliateRequest) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = addAffiliateUsingPOSTWithHttpInfo(createAffiliateRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate
   * Creates a single Affiliate
   * @param createAffiliateRequest Affiliate request to insert (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> addAffiliateUsingPOSTWithHttpInfo(CreateAffiliateRequest createAffiliateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateUsingPOSTRequestBuilder(createAffiliateRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateUsingPOST", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateUsingPOSTRequestBuilder(CreateAffiliateRequest createAffiliateRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createAffiliateRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param createCommissionProgramRequest Commission Program to insert (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse addCommissionProgramUsingPOST(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = addCommissionProgramUsingPOSTWithHttpInfo(createCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param createCommissionProgramRequest Commission Program to insert (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> addCommissionProgramUsingPOSTWithHttpInfo(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addCommissionProgramUsingPOSTRequestBuilder(createCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addCommissionProgramUsingPOSTRequestBuilder(CreateCommissionProgramRequest createCommissionProgramRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param createProductCommissionProgramRequest Product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram assignProductCommissionProgramUsingPOST(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param createProductCommissionProgramRequest Product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> assignProductCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignProductCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, createProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignProductCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignProductCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateProductCommissionProgramRequest createProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createProductCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param createSubscriptionCommissionProgramRequest Subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram assignSubscriptionCommissionProgramUsingPOST(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param createSubscriptionCommissionProgramRequest Subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignSubscriptionCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, createSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignSubscriptionCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignSubscriptionCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateSubscriptionCommissionProgramRequest createSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param createCustomFieldRequest customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createAffiliateCustomFieldUsingPOST(CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createAffiliateCustomFieldUsingPOSTWithHttpInfo(createCustomFieldRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param createCustomFieldRequest customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createAffiliateCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAffiliateCustomFieldUsingPOSTRequestBuilder(createCustomFieldRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAffiliateCustomFieldUsingPOST", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAffiliateCustomFieldUsingPOSTRequestBuilder(CreateCustomFieldRequest createCustomFieldRequest) throws ApiException {
    // verify the required parameter 'createCustomFieldRequest' is set
    if (createCustomFieldRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createCustomFieldRequest' when calling createAffiliateCustomFieldUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createCustomFieldRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse createDefaultCommissionProgramUsingPOST(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> createDefaultCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDefaultCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, createDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDefaultCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDefaultCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param createOrPatchAffiliateLinkRequest request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink createRedirectLinkUsingPOST(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = createRedirectLinkUsingPOSTWithHttpInfo(createOrPatchAffiliateLinkRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param createOrPatchAffiliateLinkRequest request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> createRedirectLinkUsingPOSTWithHttpInfo(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRedirectLinkUsingPOSTRequestBuilder(createOrPatchAffiliateLinkRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRedirectLinkUsingPOST", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRedirectLinkUsingPOSTRequestBuilder(CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
    if (createOrPatchAffiliateLinkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createOrPatchAffiliateLinkRequest' when calling createRedirectLinkUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createOrPatchAffiliateLinkRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateCommissionProgramUsingDELETE(String commissionProgramId) throws ApiException {
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId);
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateCommissionProgramUsingDELETERequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateCommissionProgramUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateCommissionProgramUsingDELETERequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgramUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateUsingDELETE(String id) throws ApiException {
    deleteAffiliateUsingDELETEWithHttpInfo(id);
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateUsingDELETEWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateUsingDELETERequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateUsingDELETERequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAffiliateUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRedirectLinkUsingDELETE(String redirectId) throws ApiException {
    deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId);
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRedirectLinkUsingDELETEWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRedirectLinkUsingDELETERequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRedirectLinkUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRedirectLinkUsingDELETERequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling deleteRedirectLinkUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return AffiliateCommissionEarned
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionEarned getAffiliateCommissionTotalUsingGET(String affiliateId) throws ApiException {
    ApiResponse<AffiliateCommissionEarned> localVarResponse = getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return ApiResponse&lt;AffiliateCommissionEarned&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionEarned> getAffiliateCommissionTotalUsingGETWithHttpInfo(String affiliateId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionTotalUsingGETRequestBuilder(affiliateId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionTotalUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionEarned>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionEarned>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionTotalUsingGETRequestBuilder(String affiliateId) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotalUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}/commissionTotal"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionResponse getAffiliateCommissionsUsingGET(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionResponse> localVarResponse = getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionResponse> getAffiliateCommissionsUsingGETWithHttpInfo(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionsUsingGETRequestBuilder(affiliateId, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionsUsingGETRequestBuilder(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}:commissions"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel getAffiliateCustomFieldsUsingGET() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = getAffiliateCustomFieldsUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> getAffiliateCustomFieldsUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCustomFieldsUsingGETRequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCustomFieldsUsingGET", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCustomFieldsUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate getAffiliateUsingGET1(String id) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = getAffiliateUsingGET1WithHttpInfo(id);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate
   * Retrieves a single Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> getAffiliateUsingGET1WithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateUsingGET1RequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateUsingGET1", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateUsingGET1RequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getAffiliateUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return AffiliateProgramV2
   * @throws ApiException if fails to make API call
   */
  public AffiliateProgramV2 getCommissionProgramUsingGET(String commissionProgramId) throws ApiException {
    ApiResponse<AffiliateProgramV2> localVarResponse = getCommissionProgramUsingGETWithHttpInfo(commissionProgramId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;AffiliateProgramV2&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateProgramV2> getCommissionProgramUsingGETWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommissionProgramUsingGETRequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCommissionProgramUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateProgramV2>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateProgramV2>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommissionProgramUsingGETRequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling getCommissionProgramUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink getRedirectLinkUsingGET(String redirectId) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = getRedirectLinkUsingGETWithHttpInfo(redirectId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> getRedirectLinkUsingGETWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRedirectLinkUsingGETRequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRedirectLinkUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRedirectLinkUsingGETRequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling getRedirectLinkUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionProgramsResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionProgramsResponse listAffiliateCommissionProgramsUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = listAffiliateCommissionProgramsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionProgramsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionProgramsResponse> listAffiliateCommissionProgramsUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateCommissionProgramsUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateCommissionProgramsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionProgramsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionProgramsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateCommissionProgramsUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateLinksResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateLinksResponse listAffiliateLinksUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateLinksResponse> localVarResponse = listAffiliateLinksUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateLinksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateLinksResponse> listAffiliateLinksUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateLinksUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateLinksUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateLinksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateLinksResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateLinksUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateSummariesResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateSummariesResponse listSummariesUsingGET1(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateSummariesResponse> localVarResponse = listSummariesUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateSummariesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateSummariesResponse> listSummariesUsingGET1WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSummariesUsingGET1RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSummariesUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListAffiliateSummariesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateSummariesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSummariesUsingGET1RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/summaries";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param patchCommissionProgramRequest patchCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse patchCommissionProgramUsingPATCH(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = patchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, patchCommissionProgramRequest, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Affiliate Commission Program
   * Updates the properties of an Affiliate Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param patchCommissionProgramRequest patchCommissionProgramRequest (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> patchCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, patchCommissionProgramRequest, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, PatchCommissionProgramRequest patchCommissionProgramRequest, List<String> updateMask) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchCommissionProgramUsingPATCH");
    }
    // verify the required parameter 'patchCommissionProgramRequest' is set
    if (patchCommissionProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'patchCommissionProgramRequest' when calling patchCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse patchDefaultCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> patchDefaultCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchDefaultCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchDefaultCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchDefaultCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchDefaultCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram patchProductCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> patchProductCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchProductCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchProductCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchProductCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchProductCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchProductCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram patchSubscriptionCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchSubscriptionCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchSubscriptionCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchSubscriptionCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchSubscriptionCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param affiliateRemoveFromProgramRequest removeFromProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAffiliateFromProgramUsingPOST(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(id, affiliateRemoveFromProgramRequest);
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param affiliateRemoveFromProgramRequest removeFromProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAffiliateFromProgramUsingPOSTWithHttpInfo(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAffiliateFromProgramUsingPOSTRequestBuilder(id, affiliateRemoveFromProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAffiliateFromProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAffiliateFromProgramUsingPOSTRequestBuilder(String id, AffiliateRemoveFromProgramRequest affiliateRemoveFromProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeAffiliateFromProgramUsingPOST");
    }
    // verify the required parameter 'affiliateRemoveFromProgramRequest' is set
    if (affiliateRemoveFromProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateRemoveFromProgramRequest' when calling removeAffiliateFromProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:removeFromProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateRemoveFromProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeSubscriptionPlanCommissionFromCommissionsUsingPOST(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeSubscriptionPlanCommissionFromCommissionsUsingPOSTRequestBuilder(commissionId, deleteSubscriptionPlanCommissionRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeSubscriptionPlanCommissionFromCommissionsUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeSubscriptionPlanCommissionFromCommissionsUsingPOSTRequestBuilder(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    // verify the required parameter 'commissionId' is set
    if (commissionId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
    }
    // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
    if (deleteSubscriptionPlanCommissionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission"
        .replace("{commission_id}", ApiClient.urlEncode(commissionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteSubscriptionPlanCommissionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param updateCustomFieldMetaDataRequest request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateAffiliateCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId, updateCustomFieldMetaDataRequest, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param updateCustomFieldMetaDataRequest request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateAffiliateCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateCustomFieldUsingPATCHRequestBuilder(customFieldId, updateCustomFieldMetaDataRequest, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliateCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest updateCustomFieldMetaDataRequest, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateAffiliateCustomFieldUsingPATCH");
    }
    // verify the required parameter 'updateCustomFieldMetaDataRequest' is set
    if (updateCustomFieldMetaDataRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCustomFieldMetaDataRequest' when calling updateAffiliateCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateCustomFieldMetaDataRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param patchAffiliateRequest Affiliate request to patch (optional)
   * @return RestAffiliate
   * @throws ApiException if fails to make API call
   */
  public RestAffiliate updateAffiliateUsingPATCH(String id, PatchAffiliateRequest patchAffiliateRequest) throws ApiException {
    ApiResponse<RestAffiliate> localVarResponse = updateAffiliateUsingPATCHWithHttpInfo(id, patchAffiliateRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate
   * Updates a single Affiliate
   * @param id id (required)
   * @param patchAffiliateRequest Affiliate request to patch (optional)
   * @return ApiResponse&lt;RestAffiliate&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestAffiliate> updateAffiliateUsingPATCHWithHttpInfo(String id, PatchAffiliateRequest patchAffiliateRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateUsingPATCHRequestBuilder(id, patchAffiliateRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliateUsingPATCH", localVarResponse);
        }
        return new ApiResponse<RestAffiliate>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestAffiliate>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateUsingPATCHRequestBuilder(String id, PatchAffiliateRequest patchAffiliateRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling updateAffiliateUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchAffiliateRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param createOrPatchAffiliateLinkRequest request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink updateRedirectLinkUsingPATCH(String redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = updateRedirectLinkUsingPATCHWithHttpInfo(redirectId, createOrPatchAffiliateLinkRequest);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param createOrPatchAffiliateLinkRequest request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> updateRedirectLinkUsingPATCHWithHttpInfo(String redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRedirectLinkUsingPATCHRequestBuilder(redirectId, createOrPatchAffiliateLinkRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRedirectLinkUsingPATCH", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRedirectLinkUsingPATCHRequestBuilder(String redirectId, CreateOrPatchAffiliateLinkRequest createOrPatchAffiliateLinkRequest) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling updateRedirectLinkUsingPATCH");
    }
    // verify the required parameter 'createOrPatchAffiliateLinkRequest' is set
    if (createOrPatchAffiliateLinkRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createOrPatchAffiliateLinkRequest' when calling updateRedirectLinkUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createOrPatchAffiliateLinkRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
