/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.keap.sdk.sdk.client;

import com.keap.sdk.sdk.ApiClient;
import com.keap.sdk.sdk.ApiException;
import com.keap.sdk.sdk.ApiResponse;
import com.keap.sdk.sdk.Pair;

import com.keap.sdk.sdk.model.AffiliateAddToProgramRequest;
import com.keap.sdk.sdk.model.AffiliateCommissionEarned;
import com.keap.sdk.sdk.model.AffiliateCommissionProgramResponse;
import com.keap.sdk.sdk.model.AffiliateLink;
import com.keap.sdk.sdk.model.AffiliateProgramV2;
import com.keap.sdk.sdk.model.AffiliateRemoveFromProgramRequest;
import com.keap.sdk.sdk.model.CancelSubscriptionsRequest;
import com.keap.sdk.sdk.model.CategoryDiscount;
import com.keap.sdk.sdk.model.CreateCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateCustomFieldRequest;
import com.keap.sdk.sdk.model.CreateCustomFieldResponse;
import com.keap.sdk.sdk.model.CreateDefaultCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateFunnelIntegrationRequest;
import com.keap.sdk.sdk.model.CreateFunnelIntegrationTriggerEvents;
import com.keap.sdk.sdk.model.CreateLeadSourceRequest;
import com.keap.sdk.sdk.model.CreateOpportunityRequest;
import com.keap.sdk.sdk.model.CreateOpportunityStageRequest;
import com.keap.sdk.sdk.model.CreateOrPatchAffiliateLinkRequest;
import com.keap.sdk.sdk.model.CreateOrderTotalDiscountRequest;
import com.keap.sdk.sdk.model.CreatePatchTaskRequest;
import com.keap.sdk.sdk.model.CreateProductCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateProductRequest;
import com.keap.sdk.sdk.model.CreateReferralRequest;
import com.keap.sdk.sdk.model.CreateRestOrderItemRequest;
import com.keap.sdk.sdk.model.CreateShippingDiscountRequest;
import com.keap.sdk.sdk.model.CreateSubscriptionCommissionProgramRequest;
import com.keap.sdk.sdk.model.CreateTaskRequest;
import com.keap.sdk.sdk.model.CreateUpdateDiscountRequest;
import com.keap.sdk.sdk.model.CreateUserRequestV2;
import com.keap.sdk.sdk.model.CustomFieldMetaData;
import com.keap.sdk.sdk.model.DeleteFunnelIntegrationRequest;
import com.keap.sdk.sdk.model.DeleteSubscriptionPlanCommissionRequest;
import com.keap.sdk.sdk.model.Error;
import com.keap.sdk.sdk.model.FunnelIntegrationTriggerResultDTO;
import com.keap.sdk.sdk.model.GetUserInfoResponse;
import com.keap.sdk.sdk.model.LeadSource;
import com.keap.sdk.sdk.model.ListAffiliateCommissionProgramsResponse;
import com.keap.sdk.sdk.model.ListAffiliateCommissionResponse;
import com.keap.sdk.sdk.model.ListAffiliateLinksResponse;
import com.keap.sdk.sdk.model.ListAffiliateSummariesResponse;
import com.keap.sdk.sdk.model.ListBasicContactResponse;
import com.keap.sdk.sdk.model.ListCountriesResponse;
import com.keap.sdk.sdk.model.ListLandingPagesResponse;
import com.keap.sdk.sdk.model.ListLeadSourcesResponse;
import com.keap.sdk.sdk.model.ListNoteTemplateResponse;
import com.keap.sdk.sdk.model.ListOpportunitiesResponse;
import com.keap.sdk.sdk.model.ListOpportunityStagesResponse;
import com.keap.sdk.sdk.model.ListOrderPaymentsResponse;
import com.keap.sdk.sdk.model.ListOrderTotalDiscountsResponse;
import com.keap.sdk.sdk.model.ListOrders;
import com.keap.sdk.sdk.model.ListProductsResponse;
import com.keap.sdk.sdk.model.ListProvincesResponse;
import com.keap.sdk.sdk.model.ListRestMerchantResponse;
import com.keap.sdk.sdk.model.ListRestShippingMethodsResponse;
import com.keap.sdk.sdk.model.ListShippingDiscountsResponse;
import com.keap.sdk.sdk.model.ListSubscriptionPlansResponse;
import com.keap.sdk.sdk.model.ListSubscriptionsResponse;
import com.keap.sdk.sdk.model.ListTasksResponse;
import com.keap.sdk.sdk.model.ListUserResponse;
import com.keap.sdk.sdk.model.ObjectModel;
import com.keap.sdk.sdk.model.OrderTotalDiscount;
import com.keap.sdk.sdk.model.PatchDefaultCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchOpportunityRequest;
import com.keap.sdk.sdk.model.PatchProductCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchSubscriptionCommissionProgramRequest;
import com.keap.sdk.sdk.model.PatchUserRequestV2;
import com.keap.sdk.sdk.model.ProductCommissionProgram;
import com.keap.sdk.sdk.model.Referral;
import com.keap.sdk.sdk.model.RestCreateOrderRequest;
import com.keap.sdk.sdk.model.RestOpportunityStage;
import com.keap.sdk.sdk.model.RestV2Opportunity;
import com.keap.sdk.sdk.model.RestV2Order;
import com.keap.sdk.sdk.model.RestV2OrderItem;
import com.keap.sdk.sdk.model.RestV2PatchOrderRequest;
import com.keap.sdk.sdk.model.RestV2Product;
import com.keap.sdk.sdk.model.SetDefaultCommissionProgramResponse;
import com.keap.sdk.sdk.model.ShippingDiscount;
import com.keap.sdk.sdk.model.SubscriptionCommissionProgram;
import com.keap.sdk.sdk.model.Task;
import com.keap.sdk.sdk.model.UpdateCustomFieldMetaDataRequest;
import com.keap.sdk.sdk.model.UpdateOpportunityStageRequest;
import com.keap.sdk.sdk.model.UpdateOrderTotalDiscountRequest;
import com.keap.sdk.sdk.model.UpdateShippingDiscountRequest;
import com.keap.sdk.sdk.model.UpdateTaskResponse;
import com.keap.sdk.sdk.model.User;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

import java.util.function.Supplier;
import io.github.resilience4j.core.functions.CheckedSupplier;
import io.github.resilience4j.retry.Retry;


@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")public class PreReleaseApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  private final Supplier<String> accessTokenSupplier;

  public PreReleaseApi() {
    this(new ApiClient());
  }

  public PreReleaseApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();

    this.accessTokenSupplier = apiClient.getAccessTokenSupplier();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void addAffiliateToProgramUsingPOST(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    addAffiliateToProgramUsingPOSTWithHttpInfo(id, affiliateAddToProgramRequest);
  }

  /**
   * Assign Affiliate to Commission program
   * Assigns an Affiliate to Commission Program
   * @param id id (required)
   * @param affiliateAddToProgramRequest affiliateAddToProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> addAffiliateToProgramUsingPOSTWithHttpInfo(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addAffiliateToProgramUsingPOSTRequestBuilder(id, affiliateAddToProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addAffiliateToProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addAffiliateToProgramUsingPOSTRequestBuilder(String id, AffiliateAddToProgramRequest affiliateAddToProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling addAffiliateToProgramUsingPOST");
    }
    // verify the required parameter 'affiliateAddToProgramRequest' is set
    if (affiliateAddToProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:assignToProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(affiliateAddToProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param insertCommissionProgram Commission Program to insert (optional)
   * @return AffiliateCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionProgramResponse addCommissionProgramUsingPOST(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {
    ApiResponse<AffiliateCommissionProgramResponse> localVarResponse = addCommissionProgramUsingPOSTWithHttpInfo(insertCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Commission Program
   * Creates an Affiliate Commission Program
   * @param insertCommissionProgram Commission Program to insert (optional)
   * @return ApiResponse&lt;AffiliateCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionProgramResponse> addCommissionProgramUsingPOSTWithHttpInfo(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addCommissionProgramUsingPOSTRequestBuilder(insertCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addCommissionProgramUsingPOSTRequestBuilder(CreateCommissionProgramRequest insertCommissionProgram) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(insertCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param productCommissionProgram Product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram assignProductCommissionProgramUsingPOST(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, productCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Assign a Product Commission Program
   * Assigns a Product Commission Program to a Product
   * @param commissionProgramId commission_program_id (required)
   * @param productCommissionProgram Product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> assignProductCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignProductCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, productCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignProductCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignProductCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateProductCommissionProgramRequest productCommissionProgram) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(productCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param subscriptionCommissionProgram Subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram assignSubscriptionCommissionProgramUsingPOST(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, subscriptionCommissionProgram);
    return localVarResponse.getData();
  }

  /**
   * Assign a Subscription Commission Program
   * Assigns a Subscription Commission Program to a Subscription
   * @param commissionProgramId commission_program_id (required)
   * @param subscriptionCommissionProgram Subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = assignSubscriptionCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, subscriptionCommissionProgram);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("assignSubscriptionCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder assignSubscriptionCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateSubscriptionCommissionProgramRequest subscriptionCommissionProgram) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(subscriptionCommissionProgram);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Cancel Subscription
   * Cancels the specified subscription
   * @param subscriptionId subscription_id (required)
   * @param cancelSubscriptionsRequest cancelSubscriptionsRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void cancelSubscriptionUsingPOST(String subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest) throws ApiException {
    cancelSubscriptionUsingPOSTWithHttpInfo(subscriptionId, cancelSubscriptionsRequest);
  }

  /**
   * Cancel Subscription
   * Cancels the specified subscription
   * @param subscriptionId subscription_id (required)
   * @param cancelSubscriptionsRequest cancelSubscriptionsRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> cancelSubscriptionUsingPOSTWithHttpInfo(String subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = cancelSubscriptionUsingPOSTRequestBuilder(subscriptionId, cancelSubscriptionsRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("cancelSubscriptionUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder cancelSubscriptionUsingPOSTRequestBuilder(String subscriptionId, CancelSubscriptionsRequest cancelSubscriptionsRequest) throws ApiException {
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling cancelSubscriptionUsingPOST");
    }
    // verify the required parameter 'cancelSubscriptionsRequest' is set
    if (cancelSubscriptionsRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'cancelSubscriptionsRequest' when calling cancelSubscriptionUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptions/{subscription_id}:deactivate"
        .replace("{subscription_id}", ApiClient.urlEncode(subscriptionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(cancelSubscriptionsRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createAffiliateCustomFieldUsingPOST(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createAffiliateCustomFieldUsingPOSTWithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Custom Field
   * Creates a single Affiliate Custom Field
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createAffiliateCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createAffiliateCustomFieldUsingPOSTRequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createAffiliateCustomFieldUsingPOST", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createAffiliateCustomFieldUsingPOSTRequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createAffiliateCustomFieldUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse createDefaultCommissionProgramUsingPOST(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, createDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Default Commission Program
   * Creates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param createDefaultCommissionProgramRequest Values of the Default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> createDefaultCommissionProgramUsingPOSTWithHttpInfo(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDefaultCommissionProgramUsingPOSTRequestBuilder(commissionProgramId, createDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDefaultCommissionProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDefaultCommissionProgramUsingPOSTRequestBuilder(String commissionProgramId, CreateDefaultCommissionProgramRequest createDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Category Discount
   * Create a Category Discount.
   * @param request request (required)
   * @return CategoryDiscount
   * @throws ApiException if fails to make API call
   */
  public CategoryDiscount createDiscountUsingPOST(CreateUpdateDiscountRequest request) throws ApiException {
    ApiResponse<CategoryDiscount> localVarResponse = createDiscountUsingPOSTWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create a Category Discount
   * Create a Category Discount.
   * @param request request (required)
   * @return ApiResponse&lt;CategoryDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoryDiscount> createDiscountUsingPOSTWithHttpInfo(CreateUpdateDiscountRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDiscountUsingPOSTRequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDiscountUsingPOST", localVarResponse);
        }
        return new ApiResponse<CategoryDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CategoryDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDiscountUsingPOSTRequestBuilder(CreateUpdateDiscountRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createDiscountUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/productCategories";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Shipping Discount
   * Creates a Shipping Discount
   * @param request request (required)
   * @return ShippingDiscount
   * @throws ApiException if fails to make API call
   */
  public ShippingDiscount createDiscountUsingPOST1(CreateShippingDiscountRequest request) throws ApiException {
    ApiResponse<ShippingDiscount> localVarResponse = createDiscountUsingPOST1WithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create a Shipping Discount
   * Creates a Shipping Discount
   * @param request request (required)
   * @return ApiResponse&lt;ShippingDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ShippingDiscount> createDiscountUsingPOST1WithHttpInfo(CreateShippingDiscountRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createDiscountUsingPOST1RequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createDiscountUsingPOST1", localVarResponse);
        }
        return new ApiResponse<ShippingDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ShippingDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createDiscountUsingPOST1RequestBuilder(CreateShippingDiscountRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createDiscountUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/shipping";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create Funnel Integrations into the app.
   * Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
   * @param createFunnelIntegrationRequest createFunnelIntegrationRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void createFunnelIntegrationUsingPOST(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    createFunnelIntegrationUsingPOSTWithHttpInfo(createFunnelIntegrationRequest);
  }

  /**
   * Create Funnel Integrations into the app.
   * Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.
   * @param createFunnelIntegrationRequest createFunnelIntegrationRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> createFunnelIntegrationUsingPOSTWithHttpInfo(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createFunnelIntegrationUsingPOSTRequestBuilder(createFunnelIntegrationRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createFunnelIntegrationUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createFunnelIntegrationUsingPOSTRequestBuilder(CreateFunnelIntegrationRequest createFunnelIntegrationRequest) throws ApiException {
    // verify the required parameter 'createFunnelIntegrationRequest' is set
    if (createFunnelIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createFunnelIntegrationRequest' when calling createFunnelIntegrationUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createFunnelIntegrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Achieve Funnel Integration Trigger Goal
   * 
   * @param createFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents (required)
   * @return List&lt;FunnelIntegrationTriggerResultDTO&gt;
   * @throws ApiException if fails to make API call
   */
  public List<FunnelIntegrationTriggerResultDTO> createIntegrationTriggerEventUsingPOST(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    ApiResponse<List<FunnelIntegrationTriggerResultDTO>> localVarResponse = createIntegrationTriggerEventUsingPOSTWithHttpInfo(createFunnelIntegrationTriggerEvents);
    return localVarResponse.getData();
  }

  /**
   * Achieve Funnel Integration Trigger Goal
   * 
   * @param createFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents (required)
   * @return ApiResponse&lt;List&lt;FunnelIntegrationTriggerResultDTO&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<FunnelIntegrationTriggerResultDTO>> createIntegrationTriggerEventUsingPOSTWithHttpInfo(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createIntegrationTriggerEventUsingPOSTRequestBuilder(createFunnelIntegrationTriggerEvents);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createIntegrationTriggerEventUsingPOST", localVarResponse);
        }
        return new ApiResponse<List<FunnelIntegrationTriggerResultDTO>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<FunnelIntegrationTriggerResultDTO>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createIntegrationTriggerEventUsingPOSTRequestBuilder(CreateFunnelIntegrationTriggerEvents createFunnelIntegrationTriggerEvents) throws ApiException {
    // verify the required parameter 'createFunnelIntegrationTriggerEvents' is set
    if (createFunnelIntegrationTriggerEvents == null) {
      throw new ApiException(400, "Missing the required parameter 'createFunnelIntegrationTriggerEvents' when calling createIntegrationTriggerEventUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration/trigger";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createFunnelIntegrationTriggerEvents);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Lead Source
   * Creates a new Lead Source
   * @param leadsource leadsource (optional)
   * @return LeadSource
   * @throws ApiException if fails to make API call
   */
  public LeadSource createLeadSourceUsingPOST(CreateLeadSourceRequest leadsource) throws ApiException {
    ApiResponse<LeadSource> localVarResponse = createLeadSourceUsingPOSTWithHttpInfo(leadsource);
    return localVarResponse.getData();
  }

  /**
   * Create a Lead Source
   * Creates a new Lead Source
   * @param leadsource leadsource (optional)
   * @return ApiResponse&lt;LeadSource&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<LeadSource> createLeadSourceUsingPOSTWithHttpInfo(CreateLeadSourceRequest leadsource) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createLeadSourceUsingPOSTRequestBuilder(leadsource);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createLeadSourceUsingPOST", localVarResponse);
        }
        return new ApiResponse<LeadSource>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<LeadSource>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createLeadSourceUsingPOSTRequestBuilder(CreateLeadSourceRequest leadsource) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/leadsources";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(leadsource);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Custom Field
   * Adds a custom field of the specified type and options to the Note object.
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createNoteCustomFieldUsingPOST1(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createNoteCustomFieldUsingPOST1WithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create a Custom Field
   * Adds a custom field of the specified type and options to the Note object.
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createNoteCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createNoteCustomFieldUsingPOST1RequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createNoteCustomFieldUsingPOST1", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createNoteCustomFieldUsingPOST1RequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createNoteCustomFieldUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/notes/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Opportunity Custom Field
   * Adds a custom field of the specified type and options to the Opportunity object.
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createOpportunityCustomFieldsUsingPOST(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createOpportunityCustomFieldsUsingPOSTWithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create an Opportunity Custom Field
   * Adds a custom field of the specified type and options to the Opportunity object.
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createOpportunityCustomFieldsUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOpportunityCustomFieldsUsingPOSTRequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOpportunityCustomFieldsUsingPOST", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOpportunityCustomFieldsUsingPOSTRequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createOpportunityCustomFieldsUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Opportunity Stage
   * Creates a new Opportunity Stage
   * @param opportunityStage opportunity (optional)
   * @return RestOpportunityStage
   * @throws ApiException if fails to make API call
   */
  public RestOpportunityStage createOpportunityStageUsingPOST(CreateOpportunityStageRequest opportunityStage) throws ApiException {
    ApiResponse<RestOpportunityStage> localVarResponse = createOpportunityStageUsingPOSTWithHttpInfo(opportunityStage);
    return localVarResponse.getData();
  }

  /**
   * Create an Opportunity Stage
   * Creates a new Opportunity Stage
   * @param opportunityStage opportunity (optional)
   * @return ApiResponse&lt;RestOpportunityStage&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestOpportunityStage> createOpportunityStageUsingPOSTWithHttpInfo(CreateOpportunityStageRequest opportunityStage) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOpportunityStageUsingPOSTRequestBuilder(opportunityStage);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOpportunityStageUsingPOST", localVarResponse);
        }
        return new ApiResponse<RestOpportunityStage>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestOpportunityStage>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOpportunityStageUsingPOSTRequestBuilder(CreateOpportunityStageRequest opportunityStage) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/stages";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opportunityStage);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Opportunity
   * Creates a new opportunity as the authenticated user.
   * @param opportunity opportunity (optional)
   * @return RestV2Opportunity
   * @throws ApiException if fails to make API call
   */
  public RestV2Opportunity createOpportunityUsingPOST1(CreateOpportunityRequest opportunity) throws ApiException {
    ApiResponse<RestV2Opportunity> localVarResponse = createOpportunityUsingPOST1WithHttpInfo(opportunity);
    return localVarResponse.getData();
  }

  /**
   * Create an Opportunity
   * Creates a new opportunity as the authenticated user.
   * @param opportunity opportunity (optional)
   * @return ApiResponse&lt;RestV2Opportunity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Opportunity> createOpportunityUsingPOST1WithHttpInfo(CreateOpportunityRequest opportunity) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOpportunityUsingPOST1RequestBuilder(opportunity);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOpportunityUsingPOST1", localVarResponse);
        }
        return new ApiResponse<RestV2Opportunity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Opportunity>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOpportunityUsingPOST1RequestBuilder(CreateOpportunityRequest opportunity) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(opportunity);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Order&#39;s Custom Field
   * Adds a custom field of the specified type and options to the Order object.
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createOrderCustomFieldUsingPOST(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createOrderCustomFieldUsingPOSTWithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create an Order&#39;s Custom Field
   * Adds a custom field of the specified type and options to the Order object.
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createOrderCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrderCustomFieldUsingPOSTRequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrderCustomFieldUsingPOST", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrderCustomFieldUsingPOSTRequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createOrderCustomFieldUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Order Item
   * Creates an order item on an existing order.
   * @param orderId order_id (required)
   * @param createRestOrderItemRequest createRestOrderItemRequest (required)
   * @return RestV2OrderItem
   * @throws ApiException if fails to make API call
   */
  public RestV2OrderItem createOrderItemsOnOrderUsingPOST1(String orderId, CreateRestOrderItemRequest createRestOrderItemRequest) throws ApiException {
    ApiResponse<RestV2OrderItem> localVarResponse = createOrderItemsOnOrderUsingPOST1WithHttpInfo(orderId, createRestOrderItemRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Order Item
   * Creates an order item on an existing order.
   * @param orderId order_id (required)
   * @param createRestOrderItemRequest createRestOrderItemRequest (required)
   * @return ApiResponse&lt;RestV2OrderItem&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2OrderItem> createOrderItemsOnOrderUsingPOST1WithHttpInfo(String orderId, CreateRestOrderItemRequest createRestOrderItemRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrderItemsOnOrderUsingPOST1RequestBuilder(orderId, createRestOrderItemRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrderItemsOnOrderUsingPOST1", localVarResponse);
        }
        return new ApiResponse<RestV2OrderItem>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2OrderItem>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrderItemsOnOrderUsingPOST1RequestBuilder(String orderId, CreateRestOrderItemRequest createRestOrderItemRequest) throws ApiException {
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      throw new ApiException(400, "Missing the required parameter 'orderId' when calling createOrderItemsOnOrderUsingPOST1");
    }
    // verify the required parameter 'createRestOrderItemRequest' is set
    if (createRestOrderItemRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createRestOrderItemRequest' when calling createOrderItemsOnOrderUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/{order_id}/items"
        .replace("{order_id}", ApiClient.urlEncode(orderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createRestOrderItemRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Order Total Discount
   * Creates an Order Total Discount
   * @param request request (required)
   * @return OrderTotalDiscount
   * @throws ApiException if fails to make API call
   */
  public OrderTotalDiscount createOrderTotalDiscountUsingPOST(CreateOrderTotalDiscountRequest request) throws ApiException {
    ApiResponse<OrderTotalDiscount> localVarResponse = createOrderTotalDiscountUsingPOSTWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create an Order Total Discount
   * Creates an Order Total Discount
   * @param request request (required)
   * @return ApiResponse&lt;OrderTotalDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OrderTotalDiscount> createOrderTotalDiscountUsingPOSTWithHttpInfo(CreateOrderTotalDiscountRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrderTotalDiscountUsingPOSTRequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrderTotalDiscountUsingPOST", localVarResponse);
        }
        return new ApiResponse<OrderTotalDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OrderTotalDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrderTotalDiscountUsingPOSTRequestBuilder(CreateOrderTotalDiscountRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createOrderTotalDiscountUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/orderTotals";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Order
   * Create a one time Order with Order items.
   * @param createOrderRequest createOrderRequest (required)
   * @return RestV2Order
   * @throws ApiException if fails to make API call
   */
  public RestV2Order createOrderUsingPOST1(RestCreateOrderRequest createOrderRequest) throws ApiException {
    ApiResponse<RestV2Order> localVarResponse = createOrderUsingPOST1WithHttpInfo(createOrderRequest);
    return localVarResponse.getData();
  }

  /**
   * Create an Order
   * Create a one time Order with Order items.
   * @param createOrderRequest createOrderRequest (required)
   * @return ApiResponse&lt;RestV2Order&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Order> createOrderUsingPOST1WithHttpInfo(RestCreateOrderRequest createOrderRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createOrderUsingPOST1RequestBuilder(createOrderRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createOrderUsingPOST1", localVarResponse);
        }
        return new ApiResponse<RestV2Order>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Order>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createOrderUsingPOST1RequestBuilder(RestCreateOrderRequest createOrderRequest) throws ApiException {
    // verify the required parameter 'createOrderRequest' is set
    if (createOrderRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createOrderRequest' when calling createOrderUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createOrderRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Product
   * Creates a new product
   * @param createProductRequest createProductRequest (required)
   * @return RestV2Product
   * @throws ApiException if fails to make API call
   */
  public RestV2Product createProductUsingPOST1(CreateProductRequest createProductRequest) throws ApiException {
    ApiResponse<RestV2Product> localVarResponse = createProductUsingPOST1WithHttpInfo(createProductRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Product
   * Creates a new product
   * @param createProductRequest createProductRequest (required)
   * @return ApiResponse&lt;RestV2Product&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Product> createProductUsingPOST1WithHttpInfo(CreateProductRequest createProductRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createProductUsingPOST1RequestBuilder(createProductRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createProductUsingPOST1", localVarResponse);
        }
        return new ApiResponse<RestV2Product>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Product>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createProductUsingPOST1RequestBuilder(CreateProductRequest createProductRequest) throws ApiException {
    // verify the required parameter 'createProductRequest' is set
    if (createProductRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createProductRequest' when calling createProductUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/products";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createProductRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param request request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink createRedirectLinkUsingPOST(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = createRedirectLinkUsingPOSTWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create an Affiliate Link
   * Creates a single Affiliate Link
   * @param request request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> createRedirectLinkUsingPOSTWithHttpInfo(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRedirectLinkUsingPOSTRequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRedirectLinkUsingPOST", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRedirectLinkUsingPOSTRequestBuilder(CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createRedirectLinkUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Referral
   * Creates a new referral partner referral on the provided contact
   * @param request request (required)
   * @return Referral
   * @throws ApiException if fails to make API call
   */
  public Referral createReferralUsingPOST(CreateReferralRequest request) throws ApiException {
    ApiResponse<Referral> localVarResponse = createReferralUsingPOSTWithHttpInfo(request);
    return localVarResponse.getData();
  }

  /**
   * Create a Referral
   * Creates a new referral partner referral on the provided contact
   * @param request request (required)
   * @return ApiResponse&lt;Referral&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Referral> createReferralUsingPOSTWithHttpInfo(CreateReferralRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createReferralUsingPOSTRequestBuilder(request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createReferralUsingPOST", localVarResponse);
        }
        return new ApiResponse<Referral>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Referral>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createReferralUsingPOSTRequestBuilder(CreateReferralRequest request) throws ApiException {
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling createReferralUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/referrals";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Subscription&#39;s Custom Field
   * Adds a custom field of the specified type and options to the Subscription object.
   * @param customField customField (required)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData createSubscriptionCustomFieldUsingPOST(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = createSubscriptionCustomFieldUsingPOSTWithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create a Subscription&#39;s Custom Field
   * Adds a custom field of the specified type and options to the Subscription object.
   * @param customField customField (required)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> createSubscriptionCustomFieldUsingPOSTWithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createSubscriptionCustomFieldUsingPOSTRequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createSubscriptionCustomFieldUsingPOST", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createSubscriptionCustomFieldUsingPOSTRequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createSubscriptionCustomFieldUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptions/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Custom Field
   * Adds a custom field of the specified type and options to the Task object.
   * @param customField customField (required)
   * @return CreateCustomFieldResponse
   * @throws ApiException if fails to make API call
   */
  public CreateCustomFieldResponse createTaskCustomFieldUsingPOST1(CreateCustomFieldRequest customField) throws ApiException {
    ApiResponse<CreateCustomFieldResponse> localVarResponse = createTaskCustomFieldUsingPOST1WithHttpInfo(customField);
    return localVarResponse.getData();
  }

  /**
   * Create a Custom Field
   * Adds a custom field of the specified type and options to the Task object.
   * @param customField customField (required)
   * @return ApiResponse&lt;CreateCustomFieldResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CreateCustomFieldResponse> createTaskCustomFieldUsingPOST1WithHttpInfo(CreateCustomFieldRequest customField) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTaskCustomFieldUsingPOST1RequestBuilder(customField);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createTaskCustomFieldUsingPOST1", localVarResponse);
        }
        return new ApiResponse<CreateCustomFieldResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CreateCustomFieldResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTaskCustomFieldUsingPOST1RequestBuilder(CreateCustomFieldRequest customField) throws ApiException {
    // verify the required parameter 'customField' is set
    if (customField == null) {
      throw new ApiException(400, "Missing the required parameter 'customField' when calling createTaskCustomFieldUsingPOST1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/model/customFields";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(customField);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a Task
   * Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
   * @param task task (optional)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task createTaskUsingPOST1(CreateTaskRequest task) throws ApiException {
    ApiResponse<Task> localVarResponse = createTaskUsingPOST1WithHttpInfo(task);
    return localVarResponse.getData();
  }

  /**
   * Create a Task
   * Creates a new task as the authenticated user.   This endpoint does not currently support setting Custom Field values.
   * @param task task (optional)
   * @return ApiResponse&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Task> createTaskUsingPOST1WithHttpInfo(CreateTaskRequest task) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createTaskUsingPOST1RequestBuilder(task);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createTaskUsingPOST1", localVarResponse);
        }
        return new ApiResponse<Task>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Task>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createTaskUsingPOST1RequestBuilder(CreateTaskRequest task) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(task);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Create a User
   * Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
   * @param user user (optional)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User createUserUsingPOST1(CreateUserRequestV2 user) throws ApiException {
    ApiResponse<User> localVarResponse = createUserUsingPOST1WithHttpInfo(user);
    return localVarResponse.getData();
  }

  /**
   * Create a User
   * Creates a new user record. NB: Users will be invited to the application and remain in the \&quot;Invited\&quot; status until the user accepts the invite. \&quot;Inactive\&quot; users will not take up a user license.
   * @param user user (optional)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> createUserUsingPOST1WithHttpInfo(CreateUserRequestV2 user) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createUserUsingPOST1RequestBuilder(user);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createUserUsingPOST1", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createUserUsingPOST1RequestBuilder(CreateUserRequestV2 user) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/users";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(user);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateCommissionProgramUsingDELETE(String commissionProgramId) throws ApiException {
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId);
  }

  /**
   * Delete a Commission Program
   * Deletes a Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateCommissionProgramUsingDELETERequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateCommissionProgramUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateCommissionProgramUsingDELETERequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgramUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteAffiliateUsingDELETE(String id) throws ApiException {
    deleteAffiliateUsingDELETEWithHttpInfo(id);
  }

  /**
   * Delete Affiliate
   * Deletes the specified Affiliate
   * @param id id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteAffiliateUsingDELETEWithHttpInfo(String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteAffiliateUsingDELETERequestBuilder(id);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteAffiliateUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteAffiliateUsingDELETERequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling deleteAffiliateUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Category Discount
   * Deletes a specified Category Discount
   * @param discountId discount_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDiscountUsingDELETE(String discountId) throws ApiException {
    deleteDiscountUsingDELETEWithHttpInfo(discountId);
  }

  /**
   * Delete a Category Discount
   * Deletes a specified Category Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDiscountUsingDELETEWithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDiscountUsingDELETERequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDiscountUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDiscountUsingDELETERequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling deleteDiscountUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/productCategories/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Free Trial Discount
   * Deletes a specified Free Trial Discount
   * @param discountId discount_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDiscountUsingDELETE1(String discountId) throws ApiException {
    deleteDiscountUsingDELETE1WithHttpInfo(discountId);
  }

  /**
   * Delete a Free Trial Discount
   * Deletes a specified Free Trial Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDiscountUsingDELETE1WithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDiscountUsingDELETE1RequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDiscountUsingDELETE1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDiscountUsingDELETE1RequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling deleteDiscountUsingDELETE1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/freeTrials/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Shipping Discount
   * Deletes a specified Shipping Discount
   * @param discountId discount_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteDiscountUsingDELETE2(String discountId) throws ApiException {
    deleteDiscountUsingDELETE2WithHttpInfo(discountId);
  }

  /**
   * Delete a Shipping Discount
   * Deletes a specified Shipping Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteDiscountUsingDELETE2WithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteDiscountUsingDELETE2RequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteDiscountUsingDELETE2", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteDiscountUsingDELETE2RequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling deleteDiscountUsingDELETE2");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/shipping/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Deletes Funnel Integrations from the app.
   * Deletes all triggers / goals, and actions / sequence items for the given funnel integration
   * @param deleteFunnelIntegrationRequest deleteFunnelIntegrationRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteFunnelIntegrationUsingPOST(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    deleteFunnelIntegrationUsingPOSTWithHttpInfo(deleteFunnelIntegrationRequest);
  }

  /**
   * Deletes Funnel Integrations from the app.
   * Deletes all triggers / goals, and actions / sequence items for the given funnel integration
   * @param deleteFunnelIntegrationRequest deleteFunnelIntegrationRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteFunnelIntegrationUsingPOSTWithHttpInfo(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteFunnelIntegrationUsingPOSTRequestBuilder(deleteFunnelIntegrationRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteFunnelIntegrationUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteFunnelIntegrationUsingPOSTRequestBuilder(DeleteFunnelIntegrationRequest deleteFunnelIntegrationRequest) throws ApiException {
    // verify the required parameter 'deleteFunnelIntegrationRequest' is set
    if (deleteFunnelIntegrationRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteFunnelIntegrationRequest' when calling deleteFunnelIntegrationUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/funnelIntegration/uninstall";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteFunnelIntegrationRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Opportunity Stage
   * Deletes the specified Opportunity Stage
   * @param stageId stage_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOpportunityStageUsingDELETE(String stageId) throws ApiException {
    deleteOpportunityStageUsingDELETEWithHttpInfo(stageId);
  }

  /**
   * Delete an Opportunity Stage
   * Deletes the specified Opportunity Stage
   * @param stageId stage_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOpportunityStageUsingDELETEWithHttpInfo(String stageId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOpportunityStageUsingDELETERequestBuilder(stageId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOpportunityStageUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOpportunityStageUsingDELETERequestBuilder(String stageId) throws ApiException {
    // verify the required parameter 'stageId' is set
    if (stageId == null) {
      throw new ApiException(400, "Missing the required parameter 'stageId' when calling deleteOpportunityStageUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/stages/{stage_id}"
        .replace("{stage_id}", ApiClient.urlEncode(stageId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Opportunity
   * Deletes the specified Opportunity
   * @param opportunityId opportunity_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOpportunityUsingDELETE(String opportunityId) throws ApiException {
    deleteOpportunityUsingDELETEWithHttpInfo(opportunityId);
  }

  /**
   * Delete an Opportunity
   * Deletes the specified Opportunity
   * @param opportunityId opportunity_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOpportunityUsingDELETEWithHttpInfo(String opportunityId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOpportunityUsingDELETERequestBuilder(opportunityId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOpportunityUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOpportunityUsingDELETERequestBuilder(String opportunityId) throws ApiException {
    // verify the required parameter 'opportunityId' is set
    if (opportunityId == null) {
      throw new ApiException(400, "Missing the required parameter 'opportunityId' when calling deleteOpportunityUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/{opportunity_id}"
        .replace("{opportunity_id}", ApiClient.urlEncode(opportunityId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Order&#39;s Custom Field
   * Deletes a Custom Field from Order.
   * @param customFieldId custom_field_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOrderCustomFieldUsingDELETE(String customFieldId) throws ApiException {
    deleteOrderCustomFieldUsingDELETEWithHttpInfo(customFieldId);
  }

  /**
   * Delete an Order&#39;s Custom Field
   * Deletes a Custom Field from Order.
   * @param customFieldId custom_field_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOrderCustomFieldUsingDELETEWithHttpInfo(String customFieldId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOrderCustomFieldUsingDELETERequestBuilder(customFieldId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOrderCustomFieldUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOrderCustomFieldUsingDELETERequestBuilder(String customFieldId) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling deleteOrderCustomFieldUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Order Total Discount
   * Deletes a specified Order Total Discount
   * @param discountId discount_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOrderTotalDiscountUsingDELETE(String discountId) throws ApiException {
    deleteOrderTotalDiscountUsingDELETEWithHttpInfo(discountId);
  }

  /**
   * Delete an Order Total Discount
   * Deletes a specified Order Total Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOrderTotalDiscountUsingDELETEWithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOrderTotalDiscountUsingDELETERequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOrderTotalDiscountUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOrderTotalDiscountUsingDELETERequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling deleteOrderTotalDiscountUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/orderTotals/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Order
   *   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
   * @param orderId order_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteOrderUsingDELETE1(String orderId) throws ApiException {
    deleteOrderUsingDELETE1WithHttpInfo(orderId);
  }

  /**
   * Delete an Order
   *   Deletes an Order&lt;br/&gt;   Note: The Order must not have any transactions recorded to be subject to deletion. 
   * @param orderId order_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteOrderUsingDELETE1WithHttpInfo(String orderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteOrderUsingDELETE1RequestBuilder(orderId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteOrderUsingDELETE1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteOrderUsingDELETE1RequestBuilder(String orderId) throws ApiException {
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      throw new ApiException(400, "Missing the required parameter 'orderId' when calling deleteOrderUsingDELETE1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/{order_id}"
        .replace("{order_id}", ApiClient.urlEncode(orderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Product
   * Deletes a single product
   * @param productId product_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteProductUsingDELETE1(String productId) throws ApiException {
    deleteProductUsingDELETE1WithHttpInfo(productId);
  }

  /**
   * Delete a Product
   * Deletes a single product
   * @param productId product_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteProductUsingDELETE1WithHttpInfo(String productId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteProductUsingDELETE1RequestBuilder(productId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteProductUsingDELETE1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteProductUsingDELETE1RequestBuilder(String productId) throws ApiException {
    // verify the required parameter 'productId' is set
    if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling deleteProductUsingDELETE1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/products/{product_id}"
        .replace("{product_id}", ApiClient.urlEncode(productId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRedirectLinkUsingDELETE(String redirectId) throws ApiException {
    deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId);
  }

  /**
   * Delete an Affiliate Link
   * Deletes an Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRedirectLinkUsingDELETEWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRedirectLinkUsingDELETERequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRedirectLinkUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRedirectLinkUsingDELETERequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling deleteRedirectLinkUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Custom Field
   * Deletes a Custom Field from Task.
   * @param customFieldId custom_field_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteTaskCustomFieldUsingDELETE(String customFieldId) throws ApiException {
    deleteTaskCustomFieldUsingDELETEWithHttpInfo(customFieldId);
  }

  /**
   * Delete a Custom Field
   * Deletes a Custom Field from Task.
   * @param customFieldId custom_field_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteTaskCustomFieldUsingDELETEWithHttpInfo(String customFieldId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTaskCustomFieldUsingDELETERequestBuilder(customFieldId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteTaskCustomFieldUsingDELETE", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTaskCustomFieldUsingDELETERequestBuilder(String customFieldId) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling deleteTaskCustomFieldUsingDELETE");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Delete a Task
   * Deletes a single task
   * @param taskId task_id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteTaskUsingDELETE1(String taskId) throws ApiException {
    deleteTaskUsingDELETE1WithHttpInfo(taskId);
  }

  /**
   * Delete a Task
   * Deletes a single task
   * @param taskId task_id (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteTaskUsingDELETE1WithHttpInfo(String taskId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteTaskUsingDELETE1RequestBuilder(taskId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteTaskUsingDELETE1", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteTaskUsingDELETE1RequestBuilder(String taskId) throws ApiException {
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling deleteTaskUsingDELETE1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/{task_id}"
        .replace("{task_id}", ApiClient.urlEncode(taskId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return AffiliateCommissionEarned
   * @throws ApiException if fails to make API call
   */
  public AffiliateCommissionEarned getAffiliateCommissionTotalUsingGET(String affiliateId) throws ApiException {
    ApiResponse<AffiliateCommissionEarned> localVarResponse = getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission Earned and View LedgerURl for portal
   * Get the Affiliate Commission Earned and View LedgerURl for portal
   * @param affiliateId affiliate_id (required)
   * @return ApiResponse&lt;AffiliateCommissionEarned&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateCommissionEarned> getAffiliateCommissionTotalUsingGETWithHttpInfo(String affiliateId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionTotalUsingGETRequestBuilder(affiliateId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionTotalUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateCommissionEarned>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateCommissionEarned>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionTotalUsingGETRequestBuilder(String affiliateId) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotalUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}/commissionTotal"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionResponse getAffiliateCommissionsUsingGET(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionResponse> localVarResponse = getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Commission and Clawbacks
   * Retrieve a list of Affiliate&#39;s Commissions and Clawbacks
   * @param affiliateId affiliate_id (required)
   * @param filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionResponse> getAffiliateCommissionsUsingGETWithHttpInfo(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCommissionsUsingGETRequestBuilder(affiliateId, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCommissionsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCommissionsUsingGETRequestBuilder(String affiliateId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    // verify the required parameter 'affiliateId' is set
    if (affiliateId == null) {
      throw new ApiException(400, "Missing the required parameter 'affiliateId' when calling getAffiliateCommissionsUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{affiliate_id}:commissions"
        .replace("{affiliate_id}", ApiClient.urlEncode(affiliateId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel getAffiliateCustomFieldsUsingGET() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = getAffiliateCustomFieldsUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Affiliate Model
   * Get the custom fields and optional properties for the Affiliate object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> getAffiliateCustomFieldsUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAffiliateCustomFieldsUsingGETRequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAffiliateCustomFieldsUsingGET", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAffiliateCustomFieldsUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return AffiliateProgramV2
   * @throws ApiException if fails to make API call
   */
  public AffiliateProgramV2 getCommissionProgramUsingGET(String commissionProgramId) throws ApiException {
    ApiResponse<AffiliateProgramV2> localVarResponse = getCommissionProgramUsingGETWithHttpInfo(commissionProgramId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Commission Program
   * Retrieves a single Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @return ApiResponse&lt;AffiliateProgramV2&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateProgramV2> getCommissionProgramUsingGETWithHttpInfo(String commissionProgramId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getCommissionProgramUsingGETRequestBuilder(commissionProgramId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getCommissionProgramUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateProgramV2>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateProgramV2>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getCommissionProgramUsingGETRequestBuilder(String commissionProgramId) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling getCommissionProgramUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Search for Contacts
   * Get a list of Contacts based search parameters.
   * @param searchParam searchParam (required)
   * @return ListBasicContactResponse
   * @throws ApiException if fails to make API call
   */
  public ListBasicContactResponse getContactsBySearchTermUsingGET(String searchParam) throws ApiException {
    ApiResponse<ListBasicContactResponse> localVarResponse = getContactsBySearchTermUsingGETWithHttpInfo(searchParam);
    return localVarResponse.getData();
  }

  /**
   * Search for Contacts
   * Get a list of Contacts based search parameters.
   * @param searchParam searchParam (required)
   * @return ApiResponse&lt;ListBasicContactResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListBasicContactResponse> getContactsBySearchTermUsingGETWithHttpInfo(String searchParam) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getContactsBySearchTermUsingGETRequestBuilder(searchParam);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getContactsBySearchTermUsingGET", localVarResponse);
        }
        return new ApiResponse<ListBasicContactResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListBasicContactResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getContactsBySearchTermUsingGETRequestBuilder(String searchParam) throws ApiException {
    // verify the required parameter 'searchParam' is set
    if (searchParam == null) {
      throw new ApiException(400, "Missing the required parameter 'searchParam' when calling getContactsBySearchTermUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/contacts:search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "searchParam";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("searchParam", searchParam));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Category Discount
   * Retrieves a single Category Discount
   * @param discountId discount_id (required)
   * @return CategoryDiscount
   * @throws ApiException if fails to make API call
   */
  public CategoryDiscount getDiscountUsingGET(String discountId) throws ApiException {
    ApiResponse<CategoryDiscount> localVarResponse = getDiscountUsingGETWithHttpInfo(discountId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Category Discount
   * Retrieves a single Category Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;CategoryDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoryDiscount> getDiscountUsingGETWithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDiscountUsingGETRequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDiscountUsingGET", localVarResponse);
        }
        return new ApiResponse<CategoryDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CategoryDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDiscountUsingGETRequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling getDiscountUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/productCategories/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Shipping Discount
   * Retrieves a Shipping Discount
   * @param discountId discount_id (required)
   * @return ShippingDiscount
   * @throws ApiException if fails to make API call
   */
  public ShippingDiscount getDiscountUsingGET1(String discountId) throws ApiException {
    ApiResponse<ShippingDiscount> localVarResponse = getDiscountUsingGET1WithHttpInfo(discountId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Shipping Discount
   * Retrieves a Shipping Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;ShippingDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ShippingDiscount> getDiscountUsingGET1WithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getDiscountUsingGET1RequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getDiscountUsingGET1", localVarResponse);
        }
        return new ApiResponse<ShippingDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ShippingDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getDiscountUsingGET1RequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling getDiscountUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/shipping/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Opportunity Stage
   * Retrieves the specified Opportunity Stage
   * @param stageId stage_id (required)
   * @return RestOpportunityStage
   * @throws ApiException if fails to make API call
   */
  public RestOpportunityStage getOpportunityStageUsingGET(String stageId) throws ApiException {
    ApiResponse<RestOpportunityStage> localVarResponse = getOpportunityStageUsingGETWithHttpInfo(stageId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Opportunity Stage
   * Retrieves the specified Opportunity Stage
   * @param stageId stage_id (required)
   * @return ApiResponse&lt;RestOpportunityStage&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestOpportunityStage> getOpportunityStageUsingGETWithHttpInfo(String stageId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOpportunityStageUsingGETRequestBuilder(stageId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOpportunityStageUsingGET", localVarResponse);
        }
        return new ApiResponse<RestOpportunityStage>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestOpportunityStage>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOpportunityStageUsingGETRequestBuilder(String stageId) throws ApiException {
    // verify the required parameter 'stageId' is set
    if (stageId == null) {
      throw new ApiException(400, "Missing the required parameter 'stageId' when calling getOpportunityStageUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/stages/{stage_id}"
        .replace("{stage_id}", ApiClient.urlEncode(stageId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Opportunity
   * Retrieves the specified Opportunity
   * @param opportunityId opportunity_id (required)
   * @return RestV2Opportunity
   * @throws ApiException if fails to make API call
   */
  public RestV2Opportunity getOpportunityUsingGET1(String opportunityId) throws ApiException {
    ApiResponse<RestV2Opportunity> localVarResponse = getOpportunityUsingGET1WithHttpInfo(opportunityId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Opportunity
   * Retrieves the specified Opportunity
   * @param opportunityId opportunity_id (required)
   * @return ApiResponse&lt;RestV2Opportunity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Opportunity> getOpportunityUsingGET1WithHttpInfo(String opportunityId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOpportunityUsingGET1RequestBuilder(opportunityId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOpportunityUsingGET1", localVarResponse);
        }
        return new ApiResponse<RestV2Opportunity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Opportunity>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOpportunityUsingGET1RequestBuilder(String opportunityId) throws ApiException {
    // verify the required parameter 'opportunityId' is set
    if (opportunityId == null) {
      throw new ApiException(400, "Missing the required parameter 'opportunityId' when calling getOpportunityUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/{opportunity_id}"
        .replace("{opportunity_id}", ApiClient.urlEncode(opportunityId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Order Total Discount
   * Retrieves an Order Total Discount
   * @param discountId discount_id (required)
   * @return OrderTotalDiscount
   * @throws ApiException if fails to make API call
   */
  public OrderTotalDiscount getOrderTotalDiscountUsingGET(String discountId) throws ApiException {
    ApiResponse<OrderTotalDiscount> localVarResponse = getOrderTotalDiscountUsingGETWithHttpInfo(discountId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Order Total Discount
   * Retrieves an Order Total Discount
   * @param discountId discount_id (required)
   * @return ApiResponse&lt;OrderTotalDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OrderTotalDiscount> getOrderTotalDiscountUsingGETWithHttpInfo(String discountId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOrderTotalDiscountUsingGETRequestBuilder(discountId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOrderTotalDiscountUsingGET", localVarResponse);
        }
        return new ApiResponse<OrderTotalDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OrderTotalDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOrderTotalDiscountUsingGETRequestBuilder(String discountId) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling getOrderTotalDiscountUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/orderTotals/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Order
   * Retrieves a single Order for a given order id
   * @param orderId order_id (required)
   * @return RestV2Order
   * @throws ApiException if fails to make API call
   */
  public RestV2Order getOrderUsingGET1(String orderId) throws ApiException {
    ApiResponse<RestV2Order> localVarResponse = getOrderUsingGET1WithHttpInfo(orderId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Order
   * Retrieves a single Order for a given order id
   * @param orderId order_id (required)
   * @return ApiResponse&lt;RestV2Order&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Order> getOrderUsingGET1WithHttpInfo(String orderId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getOrderUsingGET1RequestBuilder(orderId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getOrderUsingGET1", localVarResponse);
        }
        return new ApiResponse<RestV2Order>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Order>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getOrderUsingGET1RequestBuilder(String orderId) throws ApiException {
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      throw new ApiException(400, "Missing the required parameter 'orderId' when calling getOrderUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/{order_id}"
        .replace("{order_id}", ApiClient.urlEncode(orderId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a Product
   * Gets a single Product
   * @param productId product_id (required)
   * @return RestV2Product
   * @throws ApiException if fails to make API call
   */
  public RestV2Product getProductUsingGET(String productId) throws ApiException {
    ApiResponse<RestV2Product> localVarResponse = getProductUsingGETWithHttpInfo(productId);
    return localVarResponse.getData();
  }

  /**
   * Get a Product
   * Gets a single Product
   * @param productId product_id (required)
   * @return ApiResponse&lt;RestV2Product&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Product> getProductUsingGETWithHttpInfo(String productId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getProductUsingGETRequestBuilder(productId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getProductUsingGET", localVarResponse);
        }
        return new ApiResponse<RestV2Product>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Product>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getProductUsingGETRequestBuilder(String productId) throws ApiException {
    // verify the required parameter 'productId' is set
    if (productId == null) {
      throw new ApiException(400, "Missing the required parameter 'productId' when calling getProductUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/products/{product_id}"
        .replace("{product_id}", ApiClient.urlEncode(productId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink getRedirectLinkUsingGET(String redirectId) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = getRedirectLinkUsingGETWithHttpInfo(redirectId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Affiliate Link
   * Retrieves information about a single Affiliate Link
   * @param redirectId redirect_id (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> getRedirectLinkUsingGETWithHttpInfo(String redirectId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRedirectLinkUsingGETRequestBuilder(redirectId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRedirectLinkUsingGET", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRedirectLinkUsingGETRequestBuilder(String redirectId) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling getRedirectLinkUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve a Task
   * Retrieves a single task
   * @param taskId task_id (required)
   * @return Task
   * @throws ApiException if fails to make API call
   */
  public Task getTaskUsingGET1(String taskId) throws ApiException {
    ApiResponse<Task> localVarResponse = getTaskUsingGET1WithHttpInfo(taskId);
    return localVarResponse.getData();
  }

  /**
   * Retrieve a Task
   * Retrieves a single task
   * @param taskId task_id (required)
   * @return ApiResponse&lt;Task&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Task> getTaskUsingGET1WithHttpInfo(String taskId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getTaskUsingGET1RequestBuilder(taskId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getTaskUsingGET1", localVarResponse);
        }
        return new ApiResponse<Task>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Task>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getTaskUsingGET1RequestBuilder(String taskId) throws ApiException {
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling getTaskUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/{task_id}"
        .replace("{task_id}", ApiClient.urlEncode(taskId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get User
   * Retrieves a specific User
   * @param userId user_id (required)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User getUserByIdUsingGET(String userId) throws ApiException {
    ApiResponse<User> localVarResponse = getUserByIdUsingGETWithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * Get User
   * Retrieves a specific User
   * @param userId user_id (required)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> getUserByIdUsingGETWithHttpInfo(String userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserByIdUsingGETRequestBuilder(userId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserByIdUsingGET", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserByIdUsingGETRequestBuilder(String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getUserByIdUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/users/{user_id}"
        .replace("{user_id}", ApiClient.urlEncode(userId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve User Info
   * Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
   * @return GetUserInfoResponse
   * @throws ApiException if fails to make API call
   */
  public GetUserInfoResponse getUserInfoUsingGET1() throws ApiException {
    ApiResponse<GetUserInfoResponse> localVarResponse = getUserInfoUsingGET1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve User Info
   * Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
   * @return ApiResponse&lt;GetUserInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<GetUserInfoResponse> getUserInfoUsingGET1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserInfoUsingGET1RequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserInfoUsingGET1", localVarResponse);
        }
        return new ApiResponse<GetUserInfoResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<GetUserInfoResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserInfoUsingGET1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/oauth/connect/userinfo";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get User email signature
   * Retrieves a HTML snippet that contains the user&#39;s email signature.
   * @param userId user_id (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String getUserSignatureUsingGET1(String userId) throws ApiException {
    ApiResponse<String> localVarResponse = getUserSignatureUsingGET1WithHttpInfo(userId);
    return localVarResponse.getData();
  }

  /**
   * Get User email signature
   * Retrieves a HTML snippet that contains the user&#39;s email signature.
   * @param userId user_id (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> getUserSignatureUsingGET1WithHttpInfo(String userId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getUserSignatureUsingGET1RequestBuilder(userId);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getUserSignatureUsingGET1", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getUserSignatureUsingGET1RequestBuilder(String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling getUserSignatureUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/users/{user_id}/signature"
        .replace("{user_id}", ApiClient.urlEncode(userId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateCommissionProgramsResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateCommissionProgramsResponse listAffiliateCommissionProgramsUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateCommissionProgramsResponse> localVarResponse = listAffiliateCommissionProgramsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Commission Programs
   * Retrieves a list of Affiliate Commission Programs
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateCommissionProgramsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateCommissionProgramsResponse> listAffiliateCommissionProgramsUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateCommissionProgramsUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateCommissionProgramsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateCommissionProgramsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateCommissionProgramsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateCommissionProgramsUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateLinksResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateLinksResponse listAffiliateLinksUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateLinksResponse> localVarResponse = listAffiliateLinksUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Links
   * Retrieves a list of Affiliate Links
   * @param filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id   (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateLinksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateLinksResponse> listAffiliateLinksUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listAffiliateLinksUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listAffiliateLinksUsingGET", localVarResponse);
        }
        return new ApiResponse<ListAffiliateLinksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateLinksResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listAffiliateLinksUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Countries
   * 
   * @return ListCountriesResponse
   * @throws ApiException if fails to make API call
   */
  public ListCountriesResponse listCountriesUsingGET2() throws ApiException {
    ApiResponse<ListCountriesResponse> localVarResponse = listCountriesUsingGET2WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Countries
   * 
   * @return ApiResponse&lt;ListCountriesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListCountriesResponse> listCountriesUsingGET2WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listCountriesUsingGET2RequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listCountriesUsingGET2", localVarResponse);
        }
        return new ApiResponse<ListCountriesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListCountriesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listCountriesUsingGET2RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/locales/countries";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List all Shipping Discounts
   * Retrieves all Shipping Discounts
   * @param fields TODO: PAPI-1449 (optional)
   * @param filter Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListShippingDiscountsResponse
   * @throws ApiException if fails to make API call
   */
  public ListShippingDiscountsResponse listDiscountsUsingGET(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListShippingDiscountsResponse> localVarResponse = listDiscountsUsingGETWithHttpInfo(fields, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List all Shipping Discounts
   * Retrieves all Shipping Discounts
   * @param fields TODO: PAPI-1449 (optional)
   * @param filter Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;description%3D%3DHello+World&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld&#x60;  (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListShippingDiscountsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListShippingDiscountsResponse> listDiscountsUsingGETWithHttpInfo(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listDiscountsUsingGETRequestBuilder(fields, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listDiscountsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListShippingDiscountsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListShippingDiscountsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listDiscountsUsingGETRequestBuilder(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/shipping";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Landing Pages
   * Retrieves a list of all landing pages
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListLandingPagesResponse
   * @throws ApiException if fails to make API call
   */
  public ListLandingPagesResponse listLandingPagesUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListLandingPagesResponse> localVarResponse = listLandingPagesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Landing Pages
   * Retrieves a list of all landing pages
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListLandingPagesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListLandingPagesResponse> listLandingPagesUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listLandingPagesUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listLandingPagesUsingGET", localVarResponse);
        }
        return new ApiResponse<ListLandingPagesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListLandingPagesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listLandingPagesUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/landingpages";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Lead Sources
   * Retrieves a list of lead sources
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListLeadSourcesResponse
   * @throws ApiException if fails to make API call
   */
  public ListLeadSourcesResponse listLeadSourcesUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListLeadSourcesResponse> localVarResponse = listLeadSourcesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Lead Sources
   * Retrieves a list of lead sources
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListLeadSourcesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListLeadSourcesResponse> listLeadSourcesUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listLeadSourcesUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listLeadSourcesUsingGET", localVarResponse);
        }
        return new ApiResponse<ListLeadSourcesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListLeadSourcesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listLeadSourcesUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/leadsources";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Merchant accounts
   * Retrieves a list of Merchant accounts
   * @param filter Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListRestMerchantResponse
   * @throws ApiException if fails to make API call
   */
  public ListRestMerchantResponse listMerchantsUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListRestMerchantResponse> localVarResponse = listMerchantsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Merchant accounts
   * Retrieves a list of Merchant accounts
   * @param filter Filter to apply, allowed fields are: - (String) id - (String) account_name - (String) type You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;id%3D%3D123&#x60; - &#x60;filter&#x3D;account_name%3D%3Dabc&#x60; - &#x60;filter&#x3D;id%3D%3D123%3Baccount_name&#x3D;abc&#x60; (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - account_name - type One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListRestMerchantResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRestMerchantResponse> listMerchantsUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listMerchantsUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listMerchantsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListRestMerchantResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRestMerchantResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listMerchantsUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/merchants";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Note Templates
   * Retrieves a list of Note Templates
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListNoteTemplateResponse
   * @throws ApiException if fails to make API call
   */
  public ListNoteTemplateResponse listNoteTemplatesUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListNoteTemplateResponse> localVarResponse = listNoteTemplatesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Note Templates
   * Retrieves a list of Note Templates
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListNoteTemplateResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListNoteTemplateResponse> listNoteTemplatesUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listNoteTemplatesUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listNoteTemplatesUsingGET", localVarResponse);
        }
        return new ApiResponse<ListNoteTemplateResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListNoteTemplateResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listNoteTemplatesUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/notes/templates";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Opportunities
   * Retrieves a list of all Opportunities.
   * @param fields fields (optional)
   * @param filter Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)
   * @param orderBy Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListOpportunitiesResponse
   * @throws ApiException if fails to make API call
   */
  public ListOpportunitiesResponse listOpportunitiesUsingGET1(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListOpportunitiesResponse> localVarResponse = listOpportunitiesUsingGET1WithHttpInfo(fields, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Opportunities
   * Retrieves a list of all Opportunities.
   * @param fields fields (optional)
   * @param filter Filter to apply, allowed fields are: - (String) stage_id - (String) user_id  (optional)
   * @param orderBy Attribute and direction to opportunities items. One of the following fields: - next_action_time - contact_name - opportunity_name - created_time One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListOpportunitiesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListOpportunitiesResponse> listOpportunitiesUsingGET1WithHttpInfo(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOpportunitiesUsingGET1RequestBuilder(fields, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOpportunitiesUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListOpportunitiesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListOpportunitiesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOpportunitiesUsingGET1RequestBuilder(List<String> fields, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "fields";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "fields", fields));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List of Opportunity Stages
   * Retrieves a list of Opportunity Stages.
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListOpportunityStagesResponse
   * @throws ApiException if fails to make API call
   */
  public ListOpportunityStagesResponse listOpportunityStagesUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListOpportunityStagesResponse> localVarResponse = listOpportunityStagesUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List of Opportunity Stages
   * Retrieves a list of Opportunity Stages.
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order stage items. One of the following fields: - stage_order One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListOpportunityStagesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListOpportunityStagesResponse> listOpportunityStagesUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOpportunityStagesUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOpportunityStagesUsingGET", localVarResponse);
        }
        return new ApiResponse<ListOpportunityStagesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListOpportunityStagesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOpportunityStagesUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/stages";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Order Payments
   * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
   * @param orderId order_id (required)
   * @param filter Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListOrderPaymentsResponse
   * @throws ApiException if fails to make API call
   */
  public ListOrderPaymentsResponse listOrderPaymentsUsingGET1(String orderId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListOrderPaymentsResponse> localVarResponse = listOrderPaymentsUsingGET1WithHttpInfo(orderId, filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * Retrieve Order Payments
   * Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.
   * @param orderId order_id (required)
   * @param filter Filter to apply, allowed fields are: - (String) invoice_id - (String) payment_id - (String) amount - (String) pay_status - (Boolean) skip_commission  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;payment_id%3D%3D123&#x60; - &#x60;filter&#x3D;pay_status%3D%3DAPPROVED&#x60; - &#x60;filter&#x3D;invoice_id%3D%3D456%3Bskip_commission&#x3D;true&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - invoice_id - payment_id - amount - pay_time - pay_status - skip_commission - last_updated_time One of the following directions: - asc - desc  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListOrderPaymentsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListOrderPaymentsResponse> listOrderPaymentsUsingGET1WithHttpInfo(String orderId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOrderPaymentsUsingGET1RequestBuilder(orderId, filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOrderPaymentsUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListOrderPaymentsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListOrderPaymentsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOrderPaymentsUsingGET1RequestBuilder(String orderId, String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      throw new ApiException(400, "Missing the required parameter 'orderId' when calling listOrderPaymentsUsingGET1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/{order_id}/payments"
        .replace("{order_id}", ApiClient.urlEncode(orderId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List all Order Total Discounts
   * Retrieves all Order Total Discounts
   * @param filter Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListOrderTotalDiscountsResponse
   * @throws ApiException if fails to make API call
   */
  public ListOrderTotalDiscountsResponse listOrderTotalDiscountsUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListOrderTotalDiscountsResponse> localVarResponse = listOrderTotalDiscountsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List all Order Total Discounts
   * Retrieves all Order Total Discounts
   * @param filter Filter to apply, allowed fields are: - (String) name - (String) description - (Boolean) apply_to_commissions - (DiscountType) discount_type: AMOUNT or PERCENT - (DiscountStrategy) discount_strategy: GROSS or NET  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;name%3D%3DMary&#x60; - &#x60;filter&#x3D;applyToCommissions%3D%3DTrue&#x60; - &#x60;filter&#x3D;discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET&#x60;  (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListOrderTotalDiscountsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListOrderTotalDiscountsResponse> listOrderTotalDiscountsUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOrderTotalDiscountsUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOrderTotalDiscountsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListOrderTotalDiscountsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListOrderTotalDiscountsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOrderTotalDiscountsUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/orderTotals";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List orders
   * Retrieves a list of orders
   * @param filter Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListOrders
   * @throws ApiException if fails to make API call
   */
  public ListOrders listOrdersUsingGET1(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListOrders> localVarResponse = listOrdersUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List orders
   * Retrieves a list of orders
   * @param filter Filter to apply, allowed fields are: - (String) product_id - (String) contact_id - (Boolean) paid - (String) created_since_time - (String) created_until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples: - &#x60;filter&#x3D;product_id%3D%3D123&#x60; - &#x60;filter&#x3D;contact_id%3D%3D567&#x60; - &#x60;filter&#x3D;product_id%3D%3D123%3Bcontact_id%3D%3D567&#x60; (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - product_id - contact_id - due_date One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListOrders&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListOrders> listOrdersUsingGET1WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listOrdersUsingGET1RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listOrdersUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListOrders>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListOrders>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listOrdersUsingGET1RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Products
   * Retrieves a list of Products
   * @param filter Filter to apply, allowed fields are:   - (String) name    (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListProductsResponse
   * @throws ApiException if fails to make API call
   */
  public ListProductsResponse listProductsUsingGET1(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListProductsResponse> localVarResponse = listProductsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Products
   * Retrieves a list of Products
   * @param filter Filter to apply, allowed fields are:   - (String) name    (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListProductsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListProductsResponse> listProductsUsingGET1WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listProductsUsingGET1RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listProductsUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListProductsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListProductsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listProductsUsingGET1RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/products";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List a Country&#39;s Provinces
   * 
   * @param countryCode country_code (required)
   * @return ListProvincesResponse
   * @throws ApiException if fails to make API call
   */
  public ListProvincesResponse listProvincesForCountryUsingGET(String countryCode) throws ApiException {
    ApiResponse<ListProvincesResponse> localVarResponse = listProvincesForCountryUsingGETWithHttpInfo(countryCode);
    return localVarResponse.getData();
  }

  /**
   * List a Country&#39;s Provinces
   * 
   * @param countryCode country_code (required)
   * @return ApiResponse&lt;ListProvincesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListProvincesResponse> listProvincesForCountryUsingGETWithHttpInfo(String countryCode) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listProvincesForCountryUsingGETRequestBuilder(countryCode);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listProvincesForCountryUsingGET", localVarResponse);
        }
        return new ApiResponse<ListProvincesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListProvincesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listProvincesForCountryUsingGETRequestBuilder(String countryCode) throws ApiException {
    // verify the required parameter 'countryCode' is set
    if (countryCode == null) {
      throw new ApiException(400, "Missing the required parameter 'countryCode' when calling listProvincesForCountryUsingGET");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/locales/countries/{country_code}/provinces"
        .replace("{country_code}", ApiClient.urlEncode(countryCode.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Shipping methods
   * Retrieves a list of Shipping methods
   * @return ListRestShippingMethodsResponse
   * @throws ApiException if fails to make API call
   */
  public ListRestShippingMethodsResponse listShippingMethodsUsingGET() throws ApiException {
    ApiResponse<ListRestShippingMethodsResponse> localVarResponse = listShippingMethodsUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * List Shipping methods
   * Retrieves a list of Shipping methods
   * @return ApiResponse&lt;ListRestShippingMethodsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListRestShippingMethodsResponse> listShippingMethodsUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listShippingMethodsUsingGETRequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listShippingMethodsUsingGET", localVarResponse);
        }
        return new ApiResponse<ListRestShippingMethodsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListRestShippingMethodsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listShippingMethodsUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/shipping";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Subscription Plans
   * Retrieves a list of Subscription Plans
   * @param filter Filter to apply, allowed fields are:   - (String) name    (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListSubscriptionPlansResponse
   * @throws ApiException if fails to make API call
   */
  public ListSubscriptionPlansResponse listSubscriptionPlansUsingGET(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListSubscriptionPlansResponse> localVarResponse = listSubscriptionPlansUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Subscription Plans
   * Retrieves a list of Subscription Plans
   * @param filter Filter to apply, allowed fields are:   - (String) name    (optional)
   * @param orderBy Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListSubscriptionPlansResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSubscriptionPlansResponse> listSubscriptionPlansUsingGETWithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSubscriptionPlansUsingGETRequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSubscriptionPlansUsingGET", localVarResponse);
        }
        return new ApiResponse<ListSubscriptionPlansResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSubscriptionPlansResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSubscriptionPlansUsingGETRequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptionPlans";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Subscriptions
   * Retrieves a list of subscriptions using the specified search criteria.
   * @param filter Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListSubscriptionsResponse
   * @throws ApiException if fails to make API call
   */
  public ListSubscriptionsResponse listSubscriptionsUsingGET1(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListSubscriptionsResponse> localVarResponse = listSubscriptionsUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Subscriptions
   * Retrieves a list of subscriptions using the specified search criteria.
   * @param filter Filter to apply, allowed fields are: - (String) contact_id - (String) subscription_plan_id  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - id - contact_id - subscription_plan_id One of the following directions: - ASC - DESC  (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListSubscriptionsResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListSubscriptionsResponse> listSubscriptionsUsingGET1WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSubscriptionsUsingGET1RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSubscriptionsUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListSubscriptionsResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListSubscriptionsResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSubscriptionsUsingGET1RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ListAffiliateSummariesResponse
   * @throws ApiException if fails to make API call
   */
  public ListAffiliateSummariesResponse listSummariesUsingGET1(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    ApiResponse<ListAffiliateSummariesResponse> localVarResponse = listSummariesUsingGET1WithHttpInfo(filter, orderBy, pageSize, pageToken);
    return localVarResponse.getData();
  }

  /**
   * List Affiliate Summaries
   * Retrieve a list of Affiliate Summaries
   * @param filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60;  (optional)
   * @param orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @return ApiResponse&lt;ListAffiliateSummariesResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListAffiliateSummariesResponse> listSummariesUsingGET1WithHttpInfo(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listSummariesUsingGET1RequestBuilder(filter, orderBy, pageSize, pageToken);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listSummariesUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListAffiliateSummariesResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListAffiliateSummariesResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listSummariesUsingGET1RequestBuilder(String filter, String orderBy, Integer pageSize, String pageToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/summaries";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Tasks
   * Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
   * @param endDueTime  (optional)
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @param startDueTime  (optional)
   * @return ListTasksResponse
   * @throws ApiException if fails to make API call
   */
  public ListTasksResponse listTasksUsingGET1(String endDueTime, String filter, String orderBy, Integer pageSize, String pageToken, String startDueTime) throws ApiException {
    ApiResponse<ListTasksResponse> localVarResponse = listTasksUsingGET1WithHttpInfo(endDueTime, filter, orderBy, pageSize, pageToken, startDueTime);
    return localVarResponse.getData();
  }

  /**
   * List Tasks
   * Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id&#x3D;&#x3D;UNASSIGNED.
   * @param endDueTime  (optional)
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#x60;given_name desc&#x60; (optional)
   * @param pageSize Total number of items to return per page (optional)
   * @param pageToken Page token (optional)
   * @param startDueTime  (optional)
   * @return ApiResponse&lt;ListTasksResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListTasksResponse> listTasksUsingGET1WithHttpInfo(String endDueTime, String filter, String orderBy, Integer pageSize, String pageToken, String startDueTime) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listTasksUsingGET1RequestBuilder(endDueTime, filter, orderBy, pageSize, pageToken, startDueTime);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listTasksUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListTasksResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListTasksResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listTasksUsingGET1RequestBuilder(String endDueTime, String filter, String orderBy, Integer pageSize, String pageToken, String startDueTime) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "end_due_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_due_time", endDueTime));
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParameterBaseName = "page_size";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParameterBaseName = "page_token";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));
    localVarQueryParameterBaseName = "start_due_time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_due_time", startDueTime));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * List Users
   * Retrieves a list of users
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)
   * @return ListUserResponse
   * @throws ApiException if fails to make API call
   */
  public ListUserResponse listUsersUsingGET1(String filter, String orderBy) throws ApiException {
    ApiResponse<ListUserResponse> localVarResponse = listUsersUsingGET1WithHttpInfo(filter, orderBy);
    return localVarResponse.getData();
  }

  /**
   * List Users
   * Retrieves a list of users
   * @param filter Search filter to apply to results (optional)
   * @param orderBy Attribute and direction to order items by. E.g. &#39;given_name desc&#39; (optional)
   * @return ApiResponse&lt;ListUserResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListUserResponse> listUsersUsingGET1WithHttpInfo(String filter, String orderBy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listUsersUsingGET1RequestBuilder(filter, orderBy);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("listUsersUsingGET1", localVarResponse);
        }
        return new ApiResponse<ListUserResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListUserResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listUsersUsingGET1RequestBuilder(String filter, String orderBy) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "filter";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter", filter));
    localVarQueryParameterBaseName = "order_by";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return SetDefaultCommissionProgramResponse
   * @throws ApiException if fails to make API call
   */
  public SetDefaultCommissionProgramResponse patchDefaultCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    ApiResponse<SetDefaultCommissionProgramResponse> localVarResponse = patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Default Commission Program
   * Updates a Default Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchDefaultCommissionProgramRequest Values of the default Commission Program (optional)
   * @return ApiResponse&lt;SetDefaultCommissionProgramResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SetDefaultCommissionProgramResponse> patchDefaultCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchDefaultCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchDefaultCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchDefaultCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<SetDefaultCommissionProgramResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SetDefaultCommissionProgramResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchDefaultCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchDefaultCommissionProgramRequest patchDefaultCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchDefaultCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchDefaultCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Order
   * Updates an Order
   * @param orderId order_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param order order (optional)
   * @return RestV2Order
   * @throws ApiException if fails to make API call
   */
  public RestV2Order patchOrderUsingPATCH(String orderId, List<String> updateMask, RestV2PatchOrderRequest order) throws ApiException {
    ApiResponse<RestV2Order> localVarResponse = patchOrderUsingPATCHWithHttpInfo(orderId, updateMask, order);
    return localVarResponse.getData();
  }

  /**
   * Update an Order
   * Updates an Order
   * @param orderId order_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param order order (optional)
   * @return ApiResponse&lt;RestV2Order&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Order> patchOrderUsingPATCHWithHttpInfo(String orderId, List<String> updateMask, RestV2PatchOrderRequest order) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchOrderUsingPATCHRequestBuilder(orderId, updateMask, order);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchOrderUsingPATCH", localVarResponse);
        }
        return new ApiResponse<RestV2Order>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Order>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchOrderUsingPATCHRequestBuilder(String orderId, List<String> updateMask, RestV2PatchOrderRequest order) throws ApiException {
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      throw new ApiException(400, "Missing the required parameter 'orderId' when calling patchOrderUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/{order_id}"
        .replace("{order_id}", ApiClient.urlEncode(orderId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(order);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ProductCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public ProductCommissionProgram patchProductCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    ApiResponse<ProductCommissionProgram> localVarResponse = patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchProductCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Product Commission Program
   * Updates a Product Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchProductCommissionProgramRequest Values of the product Commission Program (optional)
   * @return ApiResponse&lt;ProductCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ProductCommissionProgram> patchProductCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchProductCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchProductCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchProductCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<ProductCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ProductCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchProductCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchProductCommissionProgramRequest patchProductCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchProductCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchProductCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return SubscriptionCommissionProgram
   * @throws ApiException if fails to make API call
   */
  public SubscriptionCommissionProgram patchSubscriptionCommissionProgramUsingPATCH(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    ApiResponse<SubscriptionCommissionProgram> localVarResponse = patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);
    return localVarResponse.getData();
  }

  /**
   * Update a Subscription Commission Program
   * Updates a Subscription Commission Program
   * @param commissionProgramId commission_program_id (required)
   * @param updateMask update_mask (optional)
   * @param patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program (optional)
   * @return ApiResponse&lt;SubscriptionCommissionProgram&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SubscriptionCommissionProgram> patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchSubscriptionCommissionProgramUsingPATCHRequestBuilder(commissionProgramId, updateMask, patchSubscriptionCommissionProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchSubscriptionCommissionProgramUsingPATCH", localVarResponse);
        }
        return new ApiResponse<SubscriptionCommissionProgram>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SubscriptionCommissionProgram>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchSubscriptionCommissionProgramUsingPATCHRequestBuilder(String commissionProgramId, List<String> updateMask, PatchSubscriptionCommissionProgramRequest patchSubscriptionCommissionProgramRequest) throws ApiException {
    // verify the required parameter 'commissionProgramId' is set
    if (commissionProgramId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionProgramId' when calling patchSubscriptionCommissionProgramUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}"
        .replace("{commission_program_id}", ApiClient.urlEncode(commissionProgramId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(patchSubscriptionCommissionProgramRequest);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Task
   * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
   * @param taskId task_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param task task (optional)
   * @return UpdateTaskResponse
   * @throws ApiException if fails to make API call
   */
  public UpdateTaskResponse patchTaskUsingPATCH(String taskId, List<String> updateMask, CreatePatchTaskRequest task) throws ApiException {
    ApiResponse<UpdateTaskResponse> localVarResponse = patchTaskUsingPATCHWithHttpInfo(taskId, updateMask, task);
    return localVarResponse.getData();
  }

  /**
   * Update a Task
   * Updates a task with only the values provided in the request.  This endpoint does not currently support updating Custom Field values.
   * @param taskId task_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param task task (optional)
   * @return ApiResponse&lt;UpdateTaskResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<UpdateTaskResponse> patchTaskUsingPATCHWithHttpInfo(String taskId, List<String> updateMask, CreatePatchTaskRequest task) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchTaskUsingPATCHRequestBuilder(taskId, updateMask, task);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchTaskUsingPATCH", localVarResponse);
        }
        return new ApiResponse<UpdateTaskResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<UpdateTaskResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchTaskUsingPATCHRequestBuilder(String taskId, List<String> updateMask, CreatePatchTaskRequest task) throws ApiException {
    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(400, "Missing the required parameter 'taskId' when calling patchTaskUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/{task_id}"
        .replace("{task_id}", ApiClient.urlEncode(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(task);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update User
   * Updates information on a specific User
   * @param userId user_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param user user (optional)
   * @return User
   * @throws ApiException if fails to make API call
   */
  public User patchUserUsingPATCH(String userId, List<String> updateMask, PatchUserRequestV2 user) throws ApiException {
    ApiResponse<User> localVarResponse = patchUserUsingPATCHWithHttpInfo(userId, updateMask, user);
    return localVarResponse.getData();
  }

  /**
   * Update User
   * Updates information on a specific User
   * @param userId user_id (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @param user user (optional)
   * @return ApiResponse&lt;User&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<User> patchUserUsingPATCHWithHttpInfo(String userId, List<String> updateMask, PatchUserRequestV2 user) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = patchUserUsingPATCHRequestBuilder(userId, updateMask, user);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("patchUserUsingPATCH", localVarResponse);
        }
        return new ApiResponse<User>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<User>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder patchUserUsingPATCHRequestBuilder(String userId, List<String> updateMask, PatchUserRequestV2 user) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
      throw new ApiException(400, "Missing the required parameter 'userId' when calling patchUserUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/users/{user_id}"
        .replace("{user_id}", ApiClient.urlEncode(userId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(user);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param removeFromProgramRequest removeFromProgramRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeAffiliateFromProgramUsingPOST(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(id, removeFromProgramRequest);
  }

  /**
   * Remove an Affiliate from a Commission Program
   * Removes an Affiliate from a Commission Program
   * @param id id (required)
   * @param removeFromProgramRequest removeFromProgramRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeAffiliateFromProgramUsingPOSTWithHttpInfo(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeAffiliateFromProgramUsingPOSTRequestBuilder(id, removeFromProgramRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeAffiliateFromProgramUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeAffiliateFromProgramUsingPOSTRequestBuilder(String id, AffiliateRemoveFromProgramRequest removeFromProgramRequest) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling removeAffiliateFromProgramUsingPOST");
    }
    // verify the required parameter 'removeFromProgramRequest' is set
    if (removeFromProgramRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'removeFromProgramRequest' when calling removeAffiliateFromProgramUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/{id}:removeFromProgram"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(removeFromProgramRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @throws ApiException if fails to make API call
   */
  public void removeSubscriptionPlanCommissionFromCommissionsUsingPOST(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest);
  }

  /**
   * Remove a Subscription from a Commission Program
   * Removes a Subscription from a Commission Program
   * @param commissionId commission_id (required)
   * @param deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeSubscriptionPlanCommissionFromCommissionsUsingPOSTRequestBuilder(commissionId, deleteSubscriptionPlanCommissionRequest);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeSubscriptionPlanCommissionFromCommissionsUsingPOST", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeSubscriptionPlanCommissionFromCommissionsUsingPOSTRequestBuilder(String commissionId, DeleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest) throws ApiException {
    // verify the required parameter 'commissionId' is set
    if (commissionId == null) {
      throw new ApiException(400, "Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
    }
    // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
    if (deleteSubscriptionPlanCommissionRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission"
        .replace("{commission_id}", ApiClient.urlEncode(commissionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(deleteSubscriptionPlanCommissionRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Note Model
   * Gets the custom fields for the Note object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel retrieveNoteModelUsingGET1() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = retrieveNoteModelUsingGET1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Note Model
   * Gets the custom fields for the Note object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> retrieveNoteModelUsingGET1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveNoteModelUsingGET1RequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveNoteModelUsingGET1", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveNoteModelUsingGET1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/notes/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve an Order&#39;s Custom Field Model
   * Gets the custom field&#39;s model for the Order object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel retrieveOrderCustomFieldModelUsingGET() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = retrieveOrderCustomFieldModelUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve an Order&#39;s Custom Field Model
   * Gets the custom field&#39;s model for the Order object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> retrieveOrderCustomFieldModelUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveOrderCustomFieldModelUsingGETRequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveOrderCustomFieldModelUsingGET", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveOrderCustomFieldModelUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Subscription&#39;s Custom Field Model
   * Gets the custom field&#39;s model for the Subscription object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel retrieveSubscriptionCustomFieldModelUsingGET() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = retrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Subscription&#39;s Custom Field Model
   * Gets the custom field&#39;s model for the Subscription object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> retrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveSubscriptionCustomFieldModelUsingGETRequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveSubscriptionCustomFieldModelUsingGET", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveSubscriptionCustomFieldModelUsingGETRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptions/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Retrieve Task Model
   * Get the custom fields for the Task object
   * @return ObjectModel
   * @throws ApiException if fails to make API call
   */
  public ObjectModel retrieveTaskModelUsingGET1() throws ApiException {
    ApiResponse<ObjectModel> localVarResponse = retrieveTaskModelUsingGET1WithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Retrieve Task Model
   * Get the custom fields for the Task object
   * @return ApiResponse&lt;ObjectModel&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ObjectModel> retrieveTaskModelUsingGET1WithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = retrieveTaskModelUsingGET1RequestBuilder();

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("retrieveTaskModelUsingGET1", localVarResponse);
        }
        return new ApiResponse<ObjectModel>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ObjectModel>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder retrieveTaskModelUsingGET1RequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/model";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateAffiliateCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Affiliate object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateAffiliateCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateAffiliateCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateAffiliateCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateAffiliateCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateAffiliateCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateAffiliateCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Category Discount
   * Update a Category Discount.
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CategoryDiscount
   * @throws ApiException if fails to make API call
   */
  public CategoryDiscount updateDiscountUsingPATCH(String discountId, CreateUpdateDiscountRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CategoryDiscount> localVarResponse = updateDiscountUsingPATCHWithHttpInfo(discountId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Category Discount
   * Update a Category Discount.
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CategoryDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CategoryDiscount> updateDiscountUsingPATCHWithHttpInfo(String discountId, CreateUpdateDiscountRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDiscountUsingPATCHRequestBuilder(discountId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDiscountUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CategoryDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CategoryDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDiscountUsingPATCHRequestBuilder(String discountId, CreateUpdateDiscountRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling updateDiscountUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateDiscountUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/productCategories/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Shipping Discount
   * Updates a Shipping Discount
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ShippingDiscount
   * @throws ApiException if fails to make API call
   */
  public ShippingDiscount updateDiscountUsingPATCH1(String discountId, UpdateShippingDiscountRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<ShippingDiscount> localVarResponse = updateDiscountUsingPATCH1WithHttpInfo(discountId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Shipping Discount
   * Updates a Shipping Discount
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;ShippingDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ShippingDiscount> updateDiscountUsingPATCH1WithHttpInfo(String discountId, UpdateShippingDiscountRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateDiscountUsingPATCH1RequestBuilder(discountId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateDiscountUsingPATCH1", localVarResponse);
        }
        return new ApiResponse<ShippingDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ShippingDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateDiscountUsingPATCH1RequestBuilder(String discountId, UpdateShippingDiscountRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling updateDiscountUsingPATCH1");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateDiscountUsingPATCH1");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/shipping/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Note object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateNotesCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateNotesCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Custom Field
   * Updates a custom field of the specified type and options to the Note object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateNotesCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateNotesCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateNotesCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateNotesCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateNotesCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateNotesCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/notes/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Opportunity&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Opportunity object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateOpportunityCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateOpportunityCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Opportunity&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Opportunity object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateOpportunityCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOpportunityCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOpportunityCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOpportunityCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateOpportunityCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateOpportunityCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Opportunity Stage
   * Updates specified values of a given Opportunity Stage
   * @param stageId stage_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return RestOpportunityStage
   * @throws ApiException if fails to make API call
   */
  public RestOpportunityStage updateOpportunityStageUsingPATCH(String stageId, UpdateOpportunityStageRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<RestOpportunityStage> localVarResponse = updateOpportunityStageUsingPATCHWithHttpInfo(stageId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update an Opportunity Stage
   * Updates specified values of a given Opportunity Stage
   * @param stageId stage_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;RestOpportunityStage&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestOpportunityStage> updateOpportunityStageUsingPATCHWithHttpInfo(String stageId, UpdateOpportunityStageRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOpportunityStageUsingPATCHRequestBuilder(stageId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOpportunityStageUsingPATCH", localVarResponse);
        }
        return new ApiResponse<RestOpportunityStage>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestOpportunityStage>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOpportunityStageUsingPATCHRequestBuilder(String stageId, UpdateOpportunityStageRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'stageId' is set
    if (stageId == null) {
      throw new ApiException(400, "Missing the required parameter 'stageId' when calling updateOpportunityStageUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateOpportunityStageUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/stages/{stage_id}"
        .replace("{stage_id}", ApiClient.urlEncode(stageId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an opportunity
   * Updates specified values of a given opportunity
   * @param opportunityId opportunity_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return RestV2Opportunity
   * @throws ApiException if fails to make API call
   */
  public RestV2Opportunity updateOpportunityUsingPATCH(String opportunityId, PatchOpportunityRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<RestV2Opportunity> localVarResponse = updateOpportunityUsingPATCHWithHttpInfo(opportunityId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update an opportunity
   * Updates specified values of a given opportunity
   * @param opportunityId opportunity_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;RestV2Opportunity&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RestV2Opportunity> updateOpportunityUsingPATCHWithHttpInfo(String opportunityId, PatchOpportunityRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOpportunityUsingPATCHRequestBuilder(opportunityId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOpportunityUsingPATCH", localVarResponse);
        }
        return new ApiResponse<RestV2Opportunity>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RestV2Opportunity>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOpportunityUsingPATCHRequestBuilder(String opportunityId, PatchOpportunityRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'opportunityId' is set
    if (opportunityId == null) {
      throw new ApiException(400, "Missing the required parameter 'opportunityId' when calling updateOpportunityUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateOpportunityUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/opportunities/{opportunity_id}"
        .replace("{opportunity_id}", ApiClient.urlEncode(opportunityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Order&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Order object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateOrderCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateOrderCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update an Order&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Order object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateOrderCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOrderCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOrderCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOrderCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateOrderCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateOrderCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/orders/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Order Total Discount
   * Updates an Order Total Discount
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return OrderTotalDiscount
   * @throws ApiException if fails to make API call
   */
  public OrderTotalDiscount updateOrderTotalDiscountUsingPATCH(String discountId, UpdateOrderTotalDiscountRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<OrderTotalDiscount> localVarResponse = updateOrderTotalDiscountUsingPATCHWithHttpInfo(discountId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update an Order Total Discount
   * Updates an Order Total Discount
   * @param discountId discount_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;OrderTotalDiscount&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<OrderTotalDiscount> updateOrderTotalDiscountUsingPATCHWithHttpInfo(String discountId, UpdateOrderTotalDiscountRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateOrderTotalDiscountUsingPATCHRequestBuilder(discountId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateOrderTotalDiscountUsingPATCH", localVarResponse);
        }
        return new ApiResponse<OrderTotalDiscount>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OrderTotalDiscount>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateOrderTotalDiscountUsingPATCHRequestBuilder(String discountId, UpdateOrderTotalDiscountRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'discountId' is set
    if (discountId == null) {
      throw new ApiException(400, "Missing the required parameter 'discountId' when calling updateOrderTotalDiscountUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateOrderTotalDiscountUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/discounts/orderTotals/{discount_id}"
        .replace("{discount_id}", ApiClient.urlEncode(discountId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param request request (required)
   * @return AffiliateLink
   * @throws ApiException if fails to make API call
   */
  public AffiliateLink updateRedirectLinkUsingPATCH(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    ApiResponse<AffiliateLink> localVarResponse = updateRedirectLinkUsingPATCHWithHttpInfo(redirectId, request);
    return localVarResponse.getData();
  }

  /**
   * Update an Affiliate Link
   * Updates an Affiliate Link
   * @param redirectId redirect_id (required)
   * @param request request (required)
   * @return ApiResponse&lt;AffiliateLink&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AffiliateLink> updateRedirectLinkUsingPATCHWithHttpInfo(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRedirectLinkUsingPATCHRequestBuilder(redirectId, request);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRedirectLinkUsingPATCH", localVarResponse);
        }
        return new ApiResponse<AffiliateLink>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AffiliateLink>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRedirectLinkUsingPATCHRequestBuilder(String redirectId, CreateOrPatchAffiliateLinkRequest request) throws ApiException {
    // verify the required parameter 'redirectId' is set
    if (redirectId == null) {
      throw new ApiException(400, "Missing the required parameter 'redirectId' when calling updateRedirectLinkUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateRedirectLinkUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/affiliates/redirects/{redirect_id}"
        .replace("{redirect_id}", ApiClient.urlEncode(redirectId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Subscription&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Subscription object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateSubscriptionCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateSubscriptionCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Subscription&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Subscription object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateSubscriptionCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateSubscriptionCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateSubscriptionCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateSubscriptionCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateSubscriptionCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateSubscriptionCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/subscriptions/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Update a Task&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Task object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return CustomFieldMetaData
   * @throws ApiException if fails to make API call
   */
  public CustomFieldMetaData updateTaskCustomFieldUsingPATCH(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    ApiResponse<CustomFieldMetaData> localVarResponse = updateTaskCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, updateMask);
    return localVarResponse.getData();
  }

  /**
   * Update a Task&#39;s Custom Field
   * Updates a custom field of the specified type and options to the Task object.
   * @param customFieldId custom_field_id (required)
   * @param request request (required)
   * @param updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
   * @return ApiResponse&lt;CustomFieldMetaData&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<CustomFieldMetaData> updateTaskCustomFieldUsingPATCHWithHttpInfo(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateTaskCustomFieldUsingPATCHRequestBuilder(customFieldId, request, updateMask);

    CheckedSupplier<HttpResponse<InputStream>> responseSupplier = () ->
      memberVarHttpClient.send(
        localVarRequestBuilder.build(),
        HttpResponse.BodyHandlers.ofInputStream());

    try {
      HttpResponse<InputStream> localVarResponse =
          Retry.decorateCheckedSupplier(ApiClient.getRetry(), responseSupplier)
              .get();
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateTaskCustomFieldUsingPATCH", localVarResponse);
        }
        return new ApiResponse<CustomFieldMetaData>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<CustomFieldMetaData>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    } catch (Throwable e) {
      if (e instanceof ApiException) {
        throw (ApiException) e;
      }
      // Not collapsing exceptions so we can see this in the stack trace.
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateTaskCustomFieldUsingPATCHRequestBuilder(String customFieldId, UpdateCustomFieldMetaDataRequest request, List<String> updateMask) throws ApiException {
    // verify the required parameter 'customFieldId' is set
    if (customFieldId == null) {
      throw new ApiException(400, "Missing the required parameter 'customFieldId' when calling updateTaskCustomFieldUsingPATCH");
    }
    // verify the required parameter 'request' is set
    if (request == null) {
      throw new ApiException(400, "Missing the required parameter 'request' when calling updateTaskCustomFieldUsingPATCH");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/v2/tasks/model/customFields/{custom_field_id}"
        .replace("{custom_field_id}", ApiClient.urlEncode(customFieldId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "update_mask";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "update_mask", updateMask));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");
    localVarRequestBuilder.header("Authorization", "Bearer " + this.accessTokenSupplier.get());

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(request);
      localVarRequestBuilder.method("PATCH", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }


}
