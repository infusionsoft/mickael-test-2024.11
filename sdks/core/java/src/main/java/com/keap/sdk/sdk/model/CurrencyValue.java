/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.767807-hf-202501161156
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.sdk.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * CurrencyValue
 */
@JsonPropertyOrder({
  CurrencyValue.JSON_PROPERTY_AMOUNT,
  CurrencyValue.JSON_PROPERTY_CURRENCY_CODE,
  CurrencyValue.JSON_PROPERTY_FORMATTED_AMOUNT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CurrencyValue implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable  private Long amount;

  public static final String JSON_PROPERTY_CURRENCY_CODE = "currency_code";
  @jakarta.annotation.Nullable  private String currencyCode;

  public static final String JSON_PROPERTY_FORMATTED_AMOUNT = "formatted_amount";
  @jakarta.annotation.Nullable  private String formattedAmount;

  public CurrencyValue() { 
  }

  public CurrencyValue amount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The price amount in the smallest currency unit
   * @return amount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The price amount in the smallest currency unit")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable Long amount) {
    this.amount = amount;
  }


  public CurrencyValue currencyCode(@jakarta.annotation.Nullable String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Three-letter ISO currency code
   * @return currencyCode
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Three-letter ISO currency code")
  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCurrencyCode() {
    return currencyCode;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencyCode(@jakarta.annotation.Nullable String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CurrencyValue formattedAmount(@jakarta.annotation.Nullable String formattedAmount) {
    this.formattedAmount = formattedAmount;
    return this;
  }

  /**
   * The product amount formatted using the tenant&#39;s currency locale
   * @return formattedAmount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The product amount formatted using the tenant's currency locale")
  @JsonProperty(JSON_PROPERTY_FORMATTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFormattedAmount() {
    return formattedAmount;
  }


  @JsonProperty(JSON_PROPERTY_FORMATTED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormattedAmount(@jakarta.annotation.Nullable String formattedAmount) {
    this.formattedAmount = formattedAmount;
  }

  /**
   * Return true if this CurrencyValue object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyValue currencyValue = (CurrencyValue) o;
    return Objects.equals(this.amount, currencyValue.amount) &&
        Objects.equals(this.currencyCode, currencyValue.currencyCode) &&
        Objects.equals(this.formattedAmount, currencyValue.formattedAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currencyCode, formattedAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyValue {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    formattedAmount: ").append(toIndentedString(formattedAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private CurrencyValue instance;
    
        public Builder() {
          this(new CurrencyValue());
        }
    
        protected Builder(CurrencyValue instance) {
          this.instance = instance;
        }
    
        public CurrencyValue.Builder amount(Long amount) {
              this.instance.amount = amount;
          return this;
        }
            public CurrencyValue.Builder currencyCode(String currencyCode) {
              this.instance.currencyCode = currencyCode;
          return this;
        }
            public CurrencyValue.Builder formattedAmount(String formattedAmount) {
              this.instance.formattedAmount = formattedAmount;
          return this;
        }
        
    
        /**
        * returns a built CurrencyValue instance.
        *
        * The builder is not reusable.
        */
        public CurrencyValue build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static CurrencyValue.Builder builder() {
        return new CurrencyValue.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public CurrencyValue.Builder toBuilder() {
        return new CurrencyValue.Builder()
          .amount(getAmount())
          .currencyCode(getCurrencyCode())
          .formattedAmount(getFormattedAmount());
      }
}

