/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.sdk.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * ShippingMethod
 */
@JsonPropertyOrder({
  ShippingMethod.JSON_PROPERTY_DESCRIPTION,
  ShippingMethod.JSON_PROPERTY_ID,
  ShippingMethod.JSON_PROPERTY_INTERNATIONAL,
  ShippingMethod.JSON_PROPERTY_NAME,
  ShippingMethod.JSON_PROPERTY_SETTINGS,
  ShippingMethod.JSON_PROPERTY_STATUS,
  ShippingMethod.JSON_PROPERTY_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ShippingMethod implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable  private String description;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable  private String id;

  public static final String JSON_PROPERTY_INTERNATIONAL = "international";
  @jakarta.annotation.Nullable  private Boolean international;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable  private String name;

  public static final String JSON_PROPERTY_SETTINGS = "settings";
  @jakarta.annotation.Nullable  private Object settings;

  public static final String JSON_PROPERTY_STATUS = "status";
  @jakarta.annotation.Nullable  private String status;

  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable  private String type;

  public ShippingMethod() { 
  }

  public ShippingMethod description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public ShippingMethod id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public ShippingMethod international(@jakarta.annotation.Nullable Boolean international) {
    this.international = international;
    return this;
  }

  /**
   * Get international
   * @return international
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_INTERNATIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInternational() {
    return international;
  }


  @JsonProperty(JSON_PROPERTY_INTERNATIONAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternational(@jakarta.annotation.Nullable Boolean international) {
    this.international = international;
  }


  public ShippingMethod name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public ShippingMethod settings(@jakarta.annotation.Nullable Object settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getSettings() {
    return settings;
  }


  @JsonProperty(JSON_PROPERTY_SETTINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettings(@jakarta.annotation.Nullable Object settings) {
    this.settings = settings;
  }


  public ShippingMethod status(@jakarta.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(@jakarta.annotation.Nullable String status) {
    this.status = status;
  }


  public ShippingMethod type(@jakarta.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = type;
  }

  /**
   * Return true if this ShippingMethod object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingMethod shippingMethod = (ShippingMethod) o;
    return Objects.equals(this.description, shippingMethod.description) &&
        Objects.equals(this.id, shippingMethod.id) &&
        Objects.equals(this.international, shippingMethod.international) &&
        Objects.equals(this.name, shippingMethod.name) &&
        Objects.equals(this.settings, shippingMethod.settings) &&
        Objects.equals(this.status, shippingMethod.status) &&
        Objects.equals(this.type, shippingMethod.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, international, name, settings, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingMethod {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    international: ").append(toIndentedString(international)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private ShippingMethod instance;
    
        public Builder() {
          this(new ShippingMethod());
        }
    
        protected Builder(ShippingMethod instance) {
          this.instance = instance;
        }
    
        public ShippingMethod.Builder description(String description) {
              this.instance.description = description;
          return this;
        }
            public ShippingMethod.Builder id(String id) {
              this.instance.id = id;
          return this;
        }
            public ShippingMethod.Builder international(Boolean international) {
              this.instance.international = international;
          return this;
        }
            public ShippingMethod.Builder name(String name) {
              this.instance.name = name;
          return this;
        }
            public ShippingMethod.Builder settings(Object settings) {
              this.instance.settings = settings;
          return this;
        }
            public ShippingMethod.Builder status(String status) {
              this.instance.status = status;
          return this;
        }
            public ShippingMethod.Builder type(String type) {
              this.instance.type = type;
          return this;
        }
        
    
        /**
        * returns a built ShippingMethod instance.
        *
        * The builder is not reusable.
        */
        public ShippingMethod build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static ShippingMethod.Builder builder() {
        return new ShippingMethod.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public ShippingMethod.Builder toBuilder() {
        return new ShippingMethod.Builder()
          .description(getDescription())
          .id(getId())
          .international(getInternational())
          .name(getName())
          .settings(getSettings())
          .status(getStatus())
          .type(getType());
      }
}

