/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.770650
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.sdk.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keap.sdk.sdk.model.CurrencyValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * Transaction
 */
@JsonPropertyOrder({
  Transaction.JSON_PROPERTY_CONTACT_ID,
  Transaction.JSON_PROPERTY_ID,
  Transaction.JSON_PROPERTY_IS_LIVE,
  Transaction.JSON_PROPERTY_IS_SUCCESSFUL,
  Transaction.JSON_PROPERTY_ORDER_ID,
  Transaction.JSON_PROPERTY_PAYMENT_GATEWAY_ID,
  Transaction.JSON_PROPERTY_PAYMENT_GATEWAY_TYPE,
  Transaction.JSON_PROPERTY_PAYMENT_ID,
  Transaction.JSON_PROPERTY_TRANSACTION_AMOUNT,
  Transaction.JSON_PROPERTY_TRANSACTION_TIME,
  Transaction.JSON_PROPERTY_TRANSACTION_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Transaction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  @jakarta.annotation.Nullable  private String contactId;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable  private String id;

  public static final String JSON_PROPERTY_IS_LIVE = "is_live";
  @jakarta.annotation.Nullable  private Boolean isLive;

  public static final String JSON_PROPERTY_IS_SUCCESSFUL = "is_successful";
  @jakarta.annotation.Nullable  private Boolean isSuccessful;

  public static final String JSON_PROPERTY_ORDER_ID = "order_id";
  @jakarta.annotation.Nullable  private String orderId;

  public static final String JSON_PROPERTY_PAYMENT_GATEWAY_ID = "payment_gateway_id";
  @jakarta.annotation.Nullable  private String paymentGatewayId;

  public static final String JSON_PROPERTY_PAYMENT_GATEWAY_TYPE = "payment_gateway_type";
  @jakarta.annotation.Nullable  private String paymentGatewayType;

  public static final String JSON_PROPERTY_PAYMENT_ID = "payment_id";
  @jakarta.annotation.Nullable  private String paymentId;

  public static final String JSON_PROPERTY_TRANSACTION_AMOUNT = "transaction_amount";
  @jakarta.annotation.Nullable  private CurrencyValue transactionAmount;

  public static final String JSON_PROPERTY_TRANSACTION_TIME = "transaction_time";
  @jakarta.annotation.Nullable  private String transactionTime;

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transaction_type";
  @jakarta.annotation.Nullable  private String transactionType;

  public Transaction() { 
  }

  public Transaction contactId(@jakarta.annotation.Nullable String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Reference to the contact the transaction was for.
   * @return contactId
   */
  @jakarta.annotation.Nullable  @Schema(example = "1", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Reference to the contact the transaction was for.")
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(@jakarta.annotation.Nullable String contactId) {
    this.contactId = contactId;
  }


  public Transaction id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the transaction.
   * @return id
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The unique identifier of the transaction.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public Transaction isLive(@jakarta.annotation.Nullable Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

  /**
   * true if this is a live transaction, false if the transaction is a test or sandbox transaction.
   * @return isLive
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "true if this is a live transaction, false if the transaction is a test or sandbox transaction.")
  @JsonProperty(JSON_PROPERTY_IS_LIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsLive() {
    return isLive;
  }


  @JsonProperty(JSON_PROPERTY_IS_LIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLive(@jakarta.annotation.Nullable Boolean isLive) {
    this.isLive = isLive;
  }


  public Transaction isSuccessful(@jakarta.annotation.Nullable Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
    return this;
  }

  /**
   * true if the transaction resulted in a success, false if the transaction resulted in a failure or error.
   * @return isSuccessful
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "true if the transaction resulted in a success, false if the transaction resulted in a failure or error.")
  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getIsSuccessful() {
    return isSuccessful;
  }


  @JsonProperty(JSON_PROPERTY_IS_SUCCESSFUL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSuccessful(@jakarta.annotation.Nullable Boolean isSuccessful) {
    this.isSuccessful = isSuccessful;
  }


  public Transaction orderId(@jakarta.annotation.Nullable String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * Reference to the order this transaction was for
   * @return orderId
   */
  @jakarta.annotation.Nullable  @Schema(example = "1", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Reference to the order this transaction was for")
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderId(@jakarta.annotation.Nullable String orderId) {
    this.orderId = orderId;
  }


  public Transaction paymentGatewayId(@jakarta.annotation.Nullable String paymentGatewayId) {
    this.paymentGatewayId = paymentGatewayId;
    return this;
  }

  /**
   * Reference to the payment processor to where the transaction attempt was made.
   * @return paymentGatewayId
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Reference to the payment processor to where the transaction attempt was made.")
  @JsonProperty(JSON_PROPERTY_PAYMENT_GATEWAY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentGatewayId() {
    return paymentGatewayId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_GATEWAY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentGatewayId(@jakarta.annotation.Nullable String paymentGatewayId) {
    this.paymentGatewayId = paymentGatewayId;
  }


  public Transaction paymentGatewayType(@jakarta.annotation.Nullable String paymentGatewayType) {
    this.paymentGatewayType = paymentGatewayType;
    return this;
  }

  /**
   * The type of payment processor. Possible values are: PAYPAL, STRIPE, KEAP_PAY, AUTHORIZE, EWAY, OTHER. For transactions that did got go through a processor/gateway, value is MANUAL
   * @return paymentGatewayType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The type of payment processor. Possible values are: PAYPAL, STRIPE, KEAP_PAY, AUTHORIZE, EWAY, OTHER. For transactions that did got go through a processor/gateway, value is MANUAL")
  @JsonProperty(JSON_PROPERTY_PAYMENT_GATEWAY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentGatewayType() {
    return paymentGatewayType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_GATEWAY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentGatewayType(@jakarta.annotation.Nullable String paymentGatewayType) {
    this.paymentGatewayType = paymentGatewayType;
  }


  public Transaction paymentId(@jakarta.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
    return this;
  }

  /**
   * Reference to the payment record that on successful transactions. No reference if the transaction failed.
   * @return paymentId
   */
  @jakarta.annotation.Nullable  @Schema(example = "1", requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Reference to the payment record that on successful transactions. No reference if the transaction failed.")
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentId(@jakarta.annotation.Nullable String paymentId) {
    this.paymentId = paymentId;
  }


  public Transaction transactionAmount(@jakarta.annotation.Nullable CurrencyValue transactionAmount) {
    this.transactionAmount = transactionAmount;
    return this;
  }

  /**
   * Get transactionAmount
   * @return transactionAmount
   */
  @jakarta.annotation.Nullable  @Valid
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public CurrencyValue getTransactionAmount() {
    return transactionAmount;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionAmount(@jakarta.annotation.Nullable CurrencyValue transactionAmount) {
    this.transactionAmount = transactionAmount;
  }


  public Transaction transactionTime(@jakarta.annotation.Nullable String transactionTime) {
    this.transactionTime = transactionTime;
    return this;
  }

  /**
   * ISO date-time of the transaction. e.g 2024-04-28 11:25:44
   * @return transactionTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "ISO date-time of the transaction. e.g 2024-04-28 11:25:44")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTransactionTime() {
    return transactionTime;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionTime(@jakarta.annotation.Nullable String transactionTime) {
    this.transactionTime = transactionTime;
  }


  public Transaction transactionType(@jakarta.annotation.Nullable String transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  /**
   * The type of transaction. Possible values: CAPTURE, VOID, REFUND, CREDIT, APPROVAL
   * @return transactionType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The type of transaction. Possible values: CAPTURE, VOID, REFUND, CREDIT, APPROVAL")
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(@jakarta.annotation.Nullable String transactionType) {
    this.transactionType = transactionType;
  }

  /**
   * Return true if this Transaction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.contactId, transaction.contactId) &&
        Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.isLive, transaction.isLive) &&
        Objects.equals(this.isSuccessful, transaction.isSuccessful) &&
        Objects.equals(this.orderId, transaction.orderId) &&
        Objects.equals(this.paymentGatewayId, transaction.paymentGatewayId) &&
        Objects.equals(this.paymentGatewayType, transaction.paymentGatewayType) &&
        Objects.equals(this.paymentId, transaction.paymentId) &&
        Objects.equals(this.transactionAmount, transaction.transactionAmount) &&
        Objects.equals(this.transactionTime, transaction.transactionTime) &&
        Objects.equals(this.transactionType, transaction.transactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, id, isLive, isSuccessful, orderId, paymentGatewayId, paymentGatewayType, paymentId, transactionAmount, transactionTime, transactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    isSuccessful: ").append(toIndentedString(isSuccessful)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentGatewayId: ").append(toIndentedString(paymentGatewayId)).append("\n");
    sb.append("    paymentGatewayType: ").append(toIndentedString(paymentGatewayType)).append("\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    transactionAmount: ").append(toIndentedString(transactionAmount)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private Transaction instance;
    
        public Builder() {
          this(new Transaction());
        }
    
        protected Builder(Transaction instance) {
          this.instance = instance;
        }
    
        public Transaction.Builder contactId(String contactId) {
              this.instance.contactId = contactId;
          return this;
        }
            public Transaction.Builder id(String id) {
              this.instance.id = id;
          return this;
        }
            public Transaction.Builder isLive(Boolean isLive) {
              this.instance.isLive = isLive;
          return this;
        }
            public Transaction.Builder isSuccessful(Boolean isSuccessful) {
              this.instance.isSuccessful = isSuccessful;
          return this;
        }
            public Transaction.Builder orderId(String orderId) {
              this.instance.orderId = orderId;
          return this;
        }
            public Transaction.Builder paymentGatewayId(String paymentGatewayId) {
              this.instance.paymentGatewayId = paymentGatewayId;
          return this;
        }
            public Transaction.Builder paymentGatewayType(String paymentGatewayType) {
              this.instance.paymentGatewayType = paymentGatewayType;
          return this;
        }
            public Transaction.Builder paymentId(String paymentId) {
              this.instance.paymentId = paymentId;
          return this;
        }
            public Transaction.Builder transactionAmount(CurrencyValue transactionAmount) {
              this.instance.transactionAmount = transactionAmount;
          return this;
        }
            public Transaction.Builder transactionTime(String transactionTime) {
              this.instance.transactionTime = transactionTime;
          return this;
        }
            public Transaction.Builder transactionType(String transactionType) {
              this.instance.transactionType = transactionType;
          return this;
        }
        
    
        /**
        * returns a built Transaction instance.
        *
        * The builder is not reusable.
        */
        public Transaction build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static Transaction.Builder builder() {
        return new Transaction.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public Transaction.Builder toBuilder() {
        return new Transaction.Builder()
          .contactId(getContactId())
          .id(getId())
          .isLive(getIsLive())
          .isSuccessful(getIsSuccessful())
          .orderId(getOrderId())
          .paymentGatewayId(getPaymentGatewayId())
          .paymentGatewayType(getPaymentGatewayType())
          .paymentId(getPaymentId())
          .transactionAmount(getTransactionAmount())
          .transactionTime(getTransactionTime())
          .transactionType(getTransactionType());
      }
}

