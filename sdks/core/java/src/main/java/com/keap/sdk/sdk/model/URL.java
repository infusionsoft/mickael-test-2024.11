/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.sdk.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * URL
 */
@JsonPropertyOrder({
  URL.JSON_PROPERTY_AUTHORITY,
  URL.JSON_PROPERTY_CONTENT,
  URL.JSON_PROPERTY_DEFAULT_PORT,
  URL.JSON_PROPERTY_FILE,
  URL.JSON_PROPERTY_HOST,
  URL.JSON_PROPERTY_PATH,
  URL.JSON_PROPERTY_PORT,
  URL.JSON_PROPERTY_PROTOCOL,
  URL.JSON_PROPERTY_QUERY,
  URL.JSON_PROPERTY_REF,
  URL.JSON_PROPERTY_USER_INFO
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class URL implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AUTHORITY = "authority";
  @jakarta.annotation.Nullable  private String authority;

  public static final String JSON_PROPERTY_CONTENT = "content";
  @jakarta.annotation.Nullable  private Object content;

  public static final String JSON_PROPERTY_DEFAULT_PORT = "defaultPort";
  @jakarta.annotation.Nullable  private Integer defaultPort;

  public static final String JSON_PROPERTY_FILE = "file";
  @jakarta.annotation.Nullable  private String _file;

  public static final String JSON_PROPERTY_HOST = "host";
  @jakarta.annotation.Nullable  private String host;

  public static final String JSON_PROPERTY_PATH = "path";
  @jakarta.annotation.Nullable  private String path;

  public static final String JSON_PROPERTY_PORT = "port";
  @jakarta.annotation.Nullable  private Integer port;

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  @jakarta.annotation.Nullable  private String protocol;

  public static final String JSON_PROPERTY_QUERY = "query";
  @jakarta.annotation.Nullable  private String query;

  public static final String JSON_PROPERTY_REF = "ref";
  @jakarta.annotation.Nullable  private String ref;

  public static final String JSON_PROPERTY_USER_INFO = "userInfo";
  @jakarta.annotation.Nullable  private String userInfo;

  public URL() { 
  }

  public URL authority(@jakarta.annotation.Nullable String authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Get authority
   * @return authority
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAuthority() {
    return authority;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthority(@jakarta.annotation.Nullable String authority) {
    this.authority = authority;
  }


  public URL content(@jakarta.annotation.Nullable Object content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContent(@jakarta.annotation.Nullable Object content) {
    this.content = content;
  }


  public URL defaultPort(@jakarta.annotation.Nullable Integer defaultPort) {
    this.defaultPort = defaultPort;
    return this;
  }

  /**
   * Get defaultPort
   * @return defaultPort
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_DEFAULT_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDefaultPort() {
    return defaultPort;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultPort(@jakarta.annotation.Nullable Integer defaultPort) {
    this.defaultPort = defaultPort;
  }


  public URL _file(@jakarta.annotation.Nullable String _file) {
    this._file = _file;
    return this;
  }

  /**
   * Get _file
   * @return _file
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFile() {
    return _file;
  }


  @JsonProperty(JSON_PROPERTY_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFile(@jakarta.annotation.Nullable String _file) {
    this._file = _file;
  }


  public URL host(@jakarta.annotation.Nullable String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHost() {
    return host;
  }


  @JsonProperty(JSON_PROPERTY_HOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHost(@jakarta.annotation.Nullable String host) {
    this.host = host;
  }


  public URL path(@jakarta.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(@jakarta.annotation.Nullable String path) {
    this.path = path;
  }


  public URL port(@jakarta.annotation.Nullable Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(@jakarta.annotation.Nullable Integer port) {
    this.port = port;
  }


  public URL protocol(@jakarta.annotation.Nullable String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(@jakarta.annotation.Nullable String protocol) {
    this.protocol = protocol;
  }


  public URL query(@jakarta.annotation.Nullable String query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(@jakarta.annotation.Nullable String query) {
    this.query = query;
  }


  public URL ref(@jakarta.annotation.Nullable String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * Get ref
   * @return ref
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRef() {
    return ref;
  }


  @JsonProperty(JSON_PROPERTY_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRef(@jakarta.annotation.Nullable String ref) {
    this.ref = ref;
  }


  public URL userInfo(@jakarta.annotation.Nullable String userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Get userInfo
   * @return userInfo
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_USER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUserInfo() {
    return userInfo;
  }


  @JsonProperty(JSON_PROPERTY_USER_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserInfo(@jakarta.annotation.Nullable String userInfo) {
    this.userInfo = userInfo;
  }

  /**
   * Return true if this URL object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    URL URL = (URL) o;
    return Objects.equals(this.authority, URL.authority) &&
        Objects.equals(this.content, URL.content) &&
        Objects.equals(this.defaultPort, URL.defaultPort) &&
        Objects.equals(this._file, URL._file) &&
        Objects.equals(this.host, URL.host) &&
        Objects.equals(this.path, URL.path) &&
        Objects.equals(this.port, URL.port) &&
        Objects.equals(this.protocol, URL.protocol) &&
        Objects.equals(this.query, URL.query) &&
        Objects.equals(this.ref, URL.ref) &&
        Objects.equals(this.userInfo, URL.userInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authority, content, defaultPort, _file, host, path, port, protocol, query, ref, userInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class URL {\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    defaultPort: ").append(toIndentedString(defaultPort)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private URL instance;
    
        public Builder() {
          this(new URL());
        }
    
        protected Builder(URL instance) {
          this.instance = instance;
        }
    
        public URL.Builder authority(String authority) {
              this.instance.authority = authority;
          return this;
        }
            public URL.Builder content(Object content) {
              this.instance.content = content;
          return this;
        }
            public URL.Builder defaultPort(Integer defaultPort) {
              this.instance.defaultPort = defaultPort;
          return this;
        }
            public URL.Builder _file(String _file) {
              this.instance._file = _file;
          return this;
        }
            public URL.Builder host(String host) {
              this.instance.host = host;
          return this;
        }
            public URL.Builder path(String path) {
              this.instance.path = path;
          return this;
        }
            public URL.Builder port(Integer port) {
              this.instance.port = port;
          return this;
        }
            public URL.Builder protocol(String protocol) {
              this.instance.protocol = protocol;
          return this;
        }
            public URL.Builder query(String query) {
              this.instance.query = query;
          return this;
        }
            public URL.Builder ref(String ref) {
              this.instance.ref = ref;
          return this;
        }
            public URL.Builder userInfo(String userInfo) {
              this.instance.userInfo = userInfo;
          return this;
        }
        
    
        /**
        * returns a built URL instance.
        *
        * The builder is not reusable.
        */
        public URL build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static URL.Builder builder() {
        return new URL.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public URL.Builder toBuilder() {
        return new URL.Builder()
          .authority(getAuthority())
          .content(getContent())
          .defaultPort(getDefaultPort())
          ._file(getFile())
          .host(getHost())
          .path(getPath())
          .port(getPort())
          .protocol(getProtocol())
          .query(getQuery())
          .ref(getRef())
          .userInfo(getUserInfo());
      }
}

