/**
 * Keap REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AffiliateAddToProgramRequest from '../model/AffiliateAddToProgramRequest';
import AffiliateCommissionEarned from '../model/AffiliateCommissionEarned';
import AffiliateCommissionProgramResponse from '../model/AffiliateCommissionProgramResponse';
import AffiliateLink from '../model/AffiliateLink';
import AffiliateProgramV2 from '../model/AffiliateProgramV2';
import AffiliateRemoveFromProgramRequest from '../model/AffiliateRemoveFromProgramRequest';
import CreateAffiliateRequest from '../model/CreateAffiliateRequest';
import CreateCommissionProgramRequest from '../model/CreateCommissionProgramRequest';
import CreateCustomFieldRequest from '../model/CreateCustomFieldRequest';
import CreateDefaultCommissionProgramRequest from '../model/CreateDefaultCommissionProgramRequest';
import CreateOrPatchAffiliateLinkRequest from '../model/CreateOrPatchAffiliateLinkRequest';
import CreateProductCommissionProgramRequest from '../model/CreateProductCommissionProgramRequest';
import CreateSubscriptionCommissionProgramRequest from '../model/CreateSubscriptionCommissionProgramRequest';
import CustomFieldMetaData from '../model/CustomFieldMetaData';
import DeleteSubscriptionPlanCommissionRequest from '../model/DeleteSubscriptionPlanCommissionRequest';
import Error from '../model/Error';
import ListAffiliateCommissionProgramsResponse from '../model/ListAffiliateCommissionProgramsResponse';
import ListAffiliateCommissionResponse from '../model/ListAffiliateCommissionResponse';
import ListAffiliateLinksResponse from '../model/ListAffiliateLinksResponse';
import ListAffiliateSummariesResponse from '../model/ListAffiliateSummariesResponse';
import ObjectModel from '../model/ObjectModel';
import PatchAffiliateRequest from '../model/PatchAffiliateRequest';
import PatchCommissionProgramRequest from '../model/PatchCommissionProgramRequest';
import PatchDefaultCommissionProgramRequest from '../model/PatchDefaultCommissionProgramRequest';
import PatchProductCommissionProgramRequest from '../model/PatchProductCommissionProgramRequest';
import PatchSubscriptionCommissionProgramRequest from '../model/PatchSubscriptionCommissionProgramRequest';
import ProductCommissionProgram from '../model/ProductCommissionProgram';
import RestAffiliate from '../model/RestAffiliate';
import SetDefaultCommissionProgramResponse from '../model/SetDefaultCommissionProgramResponse';
import SubscriptionCommissionProgram from '../model/SubscriptionCommissionProgram';
import UpdateCustomFieldMetaDataRequest from '../model/UpdateCustomFieldMetaDataRequest';

/**
* Affiliate service.
* @module com.keap.sdk.core/api/AffiliateApi
* @version 0.0.43
*/
export default class AffiliateApi {

    /**
    * Constructs a new AffiliateApi. 
    * @alias module:com.keap.sdk.core/api/AffiliateApi
    * @class
    * @param {module:com.keap.sdk.core/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.keap.sdk.core/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Assign Affiliate to Commission program
     * Assigns an Affiliate to Commission Program
     * @param {String} id id
     * @param {module:com.keap.sdk.core/model/AffiliateAddToProgramRequest} affiliateAddToProgramRequest affiliateAddToProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addAffiliateToProgramUsingPOSTWithHttpInfo(id, affiliateAddToProgramRequest) {
      let postBody = affiliateAddToProgramRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addAffiliateToProgramUsingPOST");
      }
      // verify the required parameter 'affiliateAddToProgramRequest' is set
      if (affiliateAddToProgramRequest === undefined || affiliateAddToProgramRequest === null) {
        throw new Error("Missing the required parameter 'affiliateAddToProgramRequest' when calling addAffiliateToProgramUsingPOST");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}:assignToProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign Affiliate to Commission program
     * Assigns an Affiliate to Commission Program
     * @param {String} id id
     * @param {module:com.keap.sdk.core/model/AffiliateAddToProgramRequest} affiliateAddToProgramRequest affiliateAddToProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addAffiliateToProgramUsingPOST(id, affiliateAddToProgramRequest) {
      return this.addAffiliateToProgramUsingPOSTWithHttpInfo(id, affiliateAddToProgramRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate
     * Creates a single Affiliate
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateAffiliateRequest} [insertAffiliate] Affiliate request to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/RestAffiliate} and HTTP response
     */
    addAffiliateUsingPOSTWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['insertAffiliate'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate
     * Creates a single Affiliate
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateAffiliateRequest} opts.insertAffiliate Affiliate request to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/RestAffiliate}
     */
    addAffiliateUsingPOST(opts) {
      return this.addAffiliateUsingPOSTWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Commission Program
     * Creates an Affiliate Commission Program
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateCommissionProgramRequest} [insertCommissionProgram] Commission Program to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionProgramResponse} and HTTP response
     */
    addCommissionProgramUsingPOSTWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['insertCommissionProgram'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Commission Program
     * Creates an Affiliate Commission Program
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateCommissionProgramRequest} opts.insertCommissionProgram Commission Program to insert
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionProgramResponse}
     */
    addCommissionProgramUsingPOST(opts) {
      return this.addCommissionProgramUsingPOSTWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a Product Commission Program
     * Assigns a Product Commission Program to a Product
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateProductCommissionProgramRequest} [productCommissionProgram] Product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ProductCommissionProgram} and HTTP response
     */
    assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['productCommissionProgram'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling assignProductCommissionProgramUsingPOST");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a Product Commission Program
     * Assigns a Product Commission Program to a Product
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateProductCommissionProgramRequest} opts.productCommissionProgram Product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ProductCommissionProgram}
     */
    assignProductCommissionProgramUsingPOST(commissionProgramId, opts) {
      return this.assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Assign a Subscription Commission Program
     * Assigns a Subscription Commission Program to a Subscription
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateSubscriptionCommissionProgramRequest} [subscriptionCommissionProgram] Subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/SubscriptionCommissionProgram} and HTTP response
     */
    assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['subscriptionCommissionProgram'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling assignSubscriptionCommissionProgramUsingPOST");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Assign a Subscription Commission Program
     * Assigns a Subscription Commission Program to a Subscription
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateSubscriptionCommissionProgramRequest} opts.subscriptionCommissionProgram Subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/SubscriptionCommissionProgram}
     */
    assignSubscriptionCommissionProgramUsingPOST(commissionProgramId, opts) {
      return this.assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Custom Field
     * Creates a single Affiliate Custom Field
     * @param {module:com.keap.sdk.core/model/CreateCustomFieldRequest} customField customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/CustomFieldMetaData} and HTTP response
     */
    createAffiliateCustomFieldUsingPOSTWithHttpInfo(customField) {
      let postBody = customField;
      // verify the required parameter 'customField' is set
      if (customField === undefined || customField === null) {
        throw new Error("Missing the required parameter 'customField' when calling createAffiliateCustomFieldUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/affiliates/model/customFields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Custom Field
     * Creates a single Affiliate Custom Field
     * @param {module:com.keap.sdk.core/model/CreateCustomFieldRequest} customField customField
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/CustomFieldMetaData}
     */
    createAffiliateCustomFieldUsingPOST(customField) {
      return this.createAffiliateCustomFieldUsingPOSTWithHttpInfo(customField)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a Default Commission Program
     * Creates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateDefaultCommissionProgramRequest} [createDefaultCommissionProgramRequest] Values of the Default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/SetDefaultCommissionProgramResponse} and HTTP response
     */
    createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['createDefaultCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling createDefaultCommissionProgramUsingPOST");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetDefaultCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Default Commission Program
     * Creates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateDefaultCommissionProgramRequest} opts.createDefaultCommissionProgramRequest Values of the Default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/SetDefaultCommissionProgramResponse}
     */
    createDefaultCommissionProgramUsingPOST(commissionProgramId, opts) {
      return this.createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create an Affiliate Link
     * Creates a single Affiliate Link
     * @param {module:com.keap.sdk.core/model/CreateOrPatchAffiliateLinkRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateLink} and HTTP response
     */
    createRedirectLinkUsingPOSTWithHttpInfo(request) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createRedirectLinkUsingPOST");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an Affiliate Link
     * Creates a single Affiliate Link
     * @param {module:com.keap.sdk.core/model/CreateOrPatchAffiliateLinkRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateLink}
     */
    createRedirectLinkUsingPOST(request) {
      return this.createRedirectLinkUsingPOSTWithHttpInfo(request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Commission Program
     * Deletes a Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId) {
      let postBody = null;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling deleteAffiliateCommissionProgramUsingDELETE");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Commission Program
     * Deletes a Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAffiliateCommissionProgramUsingDELETE(commissionProgramId) {
      return this.deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Affiliate
     * Deletes the specified Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAffiliateUsingDELETEWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAffiliateUsingDELETE");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Affiliate
     * Deletes the specified Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAffiliateUsingDELETE(id) {
      return this.deleteAffiliateUsingDELETEWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete an Affiliate Link
     * Deletes an Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId) {
      let postBody = null;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling deleteRedirectLinkUsingDELETE");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete an Affiliate Link
     * Deletes an Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRedirectLinkUsingDELETE(redirectId) {
      return this.deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     * Get the Affiliate Commission Earned and View LedgerURl for portal
     * @param {String} affiliateId affiliate_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionEarned} and HTTP response
     */
    getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId) {
      let postBody = null;
      // verify the required parameter 'affiliateId' is set
      if (affiliateId === undefined || affiliateId === null) {
        throw new Error("Missing the required parameter 'affiliateId' when calling getAffiliateCommissionTotalUsingGET");
      }

      let pathParams = {
        'affiliate_id': affiliateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionEarned;
      return this.apiClient.callApi(
        '/v2/affiliates/{affiliate_id}/commissionTotal', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     * Get the Affiliate Commission Earned and View LedgerURl for portal
     * @param {String} affiliateId affiliate_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionEarned}
     */
    getAffiliateCommissionTotalUsingGET(affiliateId) {
      return this.getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Commission and Clawbacks
     * Retrieve a list of Affiliate's Commissions and Clawbacks
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until  
     * @param {String} [orderBy] Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListAffiliateCommissionResponse} and HTTP response
     */
    getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'affiliateId' is set
      if (affiliateId === undefined || affiliateId === null) {
        throw new Error("Missing the required parameter 'affiliateId' when calling getAffiliateCommissionsUsingGET");
      }

      let pathParams = {
        'affiliate_id': affiliateId
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateCommissionResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/{affiliate_id}:commissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Commission and Clawbacks
     * Retrieve a list of Affiliate's Commissions and Clawbacks
     * @param {String} affiliateId affiliate_id
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until  
     * @param {String} opts.orderBy Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListAffiliateCommissionResponse}
     */
    getAffiliateCommissionsUsingGET(affiliateId, opts) {
      return this.getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Affiliate Model
     * Get the custom fields and optional properties for the Affiliate object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ObjectModel} and HTTP response
     */
    getAffiliateCustomFieldsUsingGETWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ObjectModel;
      return this.apiClient.callApi(
        '/v2/affiliates/model', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve Affiliate Model
     * Get the custom fields and optional properties for the Affiliate object
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ObjectModel}
     */
    getAffiliateCustomFieldsUsingGET() {
      return this.getAffiliateCustomFieldsUsingGETWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Affiliate
     * Retrieves a single Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/RestAffiliate} and HTTP response
     */
    getAffiliateUsingGET1WithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAffiliateUsingGET1");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Affiliate
     * Retrieves a single Affiliate
     * @param {String} id id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/RestAffiliate}
     */
    getAffiliateUsingGET1(id) {
      return this.getAffiliateUsingGET1WithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Commission Program
     * Retrieves a single Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateProgramV2} and HTTP response
     */
    getCommissionProgramUsingGETWithHttpInfo(commissionProgramId) {
      let postBody = null;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling getCommissionProgramUsingGET");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateProgramV2;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Commission Program
     * Retrieves a single Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateProgramV2}
     */
    getCommissionProgramUsingGET(commissionProgramId) {
      return this.getCommissionProgramUsingGETWithHttpInfo(commissionProgramId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve an Affiliate Link
     * Retrieves information about a single Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateLink} and HTTP response
     */
    getRedirectLinkUsingGETWithHttpInfo(redirectId) {
      let postBody = null;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling getRedirectLinkUsingGET");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve an Affiliate Link
     * Retrieves information about a single Affiliate Link
     * @param {String} redirectId redirect_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateLink}
     */
    getRedirectLinkUsingGET(redirectId) {
      return this.getRedirectLinkUsingGETWithHttpInfo(redirectId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Commission Programs
     * Retrieves a list of Affiliate Commission Programs
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id  
     * @param {String} [orderBy] Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListAffiliateCommissionProgramsResponse} and HTTP response
     */
    listAffiliateCommissionProgramsUsingGETWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateCommissionProgramsResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Commission Programs
     * Retrieves a list of Affiliate Commission Programs
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id  
     * @param {String} opts.orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListAffiliateCommissionProgramsResponse}
     */
    listAffiliateCommissionProgramsUsingGET(opts) {
      return this.listAffiliateCommissionProgramsUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Links
     * Retrieves a list of Affiliate Links
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id  
     * @param {String} [orderBy] Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListAffiliateLinksResponse} and HTTP response
     */
    listAffiliateLinksUsingGETWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateLinksResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Links
     * Retrieves a list of Affiliate Links
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id  
     * @param {String} opts.orderBy Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListAffiliateLinksResponse}
     */
    listAffiliateLinksUsingGET(opts) {
      return this.listAffiliateLinksUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Affiliate Summaries
     * Retrieve a list of Affiliate Summaries
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliate_ids%3D%3D123,456,789` 
     * @param {String} [orderBy] Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListAffiliateSummariesResponse} and HTTP response
     */
    listSummariesUsingGET1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAffiliateSummariesResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/summaries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Affiliate Summaries
     * Retrieve a list of Affiliate Summaries
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the `==` operator to check the equality of one of the filters with your searched  word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:  - `filter=since_time%3D%3D2024-09-17T-15:50+00`  - `filter=until_time%3D%3D2024-09-17T-15:50+00`  - `filter=affiliate_ids%3D%3D123,456,789` 
     * @param {String} opts.orderBy Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListAffiliateSummariesResponse}
     */
    listSummariesUsingGET1(opts) {
      return this.listSummariesUsingGET1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Affiliate Commission Program
     * Updates the properties of an Affiliate Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {module:com.keap.sdk.core/model/PatchCommissionProgramRequest} patchCommissionProgramRequest patchCommissionProgramRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionProgramResponse} and HTTP response
     */
    patchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, patchCommissionProgramRequest, opts) {
      opts = opts || {};
      let postBody = patchCommissionProgramRequest;
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling patchCommissionProgramUsingPATCH");
      }
      // verify the required parameter 'patchCommissionProgramRequest' is set
      if (patchCommissionProgramRequest === undefined || patchCommissionProgramRequest === null) {
        throw new Error("Missing the required parameter 'patchCommissionProgramRequest' when calling patchCommissionProgramUsingPATCH");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Affiliate Commission Program
     * Updates the properties of an Affiliate Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {module:com.keap.sdk.core/model/PatchCommissionProgramRequest} patchCommissionProgramRequest patchCommissionProgramRequest
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateCommissionProgramResponse}
     */
    patchCommissionProgramUsingPATCH(commissionProgramId, patchCommissionProgramRequest, opts) {
      return this.patchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, patchCommissionProgramRequest, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Default Commission Program
     * Updates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:com.keap.sdk.core/model/PatchDefaultCommissionProgramRequest} [patchDefaultCommissionProgramRequest] Values of the default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/SetDefaultCommissionProgramResponse} and HTTP response
     */
    patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['patchDefaultCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling patchDefaultCommissionProgramUsingPATCH");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetDefaultCommissionProgramResponse;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Default Commission Program
     * Updates a Default Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:com.keap.sdk.core/model/PatchDefaultCommissionProgramRequest} opts.patchDefaultCommissionProgramRequest Values of the default Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/SetDefaultCommissionProgramResponse}
     */
    patchDefaultCommissionProgramUsingPATCH(commissionProgramId, opts) {
      return this.patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Product Commission Program
     * Updates a Product Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:com.keap.sdk.core/model/PatchProductCommissionProgramRequest} [patchProductCommissionProgramRequest] Values of the product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ProductCommissionProgram} and HTTP response
     */
    patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['patchProductCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling patchProductCommissionProgramUsingPATCH");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Product Commission Program
     * Updates a Product Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:com.keap.sdk.core/model/PatchProductCommissionProgramRequest} opts.patchProductCommissionProgramRequest Values of the product Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ProductCommissionProgram}
     */
    patchProductCommissionProgramUsingPATCH(commissionProgramId, opts) {
      return this.patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Subscription Commission Program
     * Updates a Subscription Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [updateMask] update_mask
     * @param {module:com.keap.sdk.core/model/PatchSubscriptionCommissionProgramRequest} [patchSubscriptionCommissionProgramRequest] Values of the subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/SubscriptionCommissionProgram} and HTTP response
     */
    patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts) {
      opts = opts || {};
      let postBody = opts['patchSubscriptionCommissionProgramRequest'];
      // verify the required parameter 'commissionProgramId' is set
      if (commissionProgramId === undefined || commissionProgramId === null) {
        throw new Error("Missing the required parameter 'commissionProgramId' when calling patchSubscriptionCommissionProgramUsingPATCH");
      }

      let pathParams = {
        'commission_program_id': commissionProgramId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionCommissionProgram;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Subscription Commission Program
     * Updates a Subscription Commission Program
     * @param {String} commissionProgramId commission_program_id
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.updateMask update_mask
     * @param {module:com.keap.sdk.core/model/PatchSubscriptionCommissionProgramRequest} opts.patchSubscriptionCommissionProgramRequest Values of the subscription Commission Program
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/SubscriptionCommissionProgram}
     */
    patchSubscriptionCommissionProgramUsingPATCH(commissionProgramId, opts) {
      return this.patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove an Affiliate from a Commission Program
     * Removes an Affiliate from a Commission Program
     * @param {String} id id
     * @param {module:com.keap.sdk.core/model/AffiliateRemoveFromProgramRequest} removeFromProgramRequest removeFromProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(id, removeFromProgramRequest) {
      let postBody = removeFromProgramRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeAffiliateFromProgramUsingPOST");
      }
      // verify the required parameter 'removeFromProgramRequest' is set
      if (removeFromProgramRequest === undefined || removeFromProgramRequest === null) {
        throw new Error("Missing the required parameter 'removeFromProgramRequest' when calling removeAffiliateFromProgramUsingPOST");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}:removeFromProgram', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove an Affiliate from a Commission Program
     * Removes an Affiliate from a Commission Program
     * @param {String} id id
     * @param {module:com.keap.sdk.core/model/AffiliateRemoveFromProgramRequest} removeFromProgramRequest removeFromProgramRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeAffiliateFromProgramUsingPOST(id, removeFromProgramRequest) {
      return this.removeAffiliateFromProgramUsingPOSTWithHttpInfo(id, removeFromProgramRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove a Subscription from a Commission Program
     * Removes a Subscription from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:com.keap.sdk.core/model/DeleteSubscriptionPlanCommissionRequest} deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest) {
      let postBody = deleteSubscriptionPlanCommissionRequest;
      // verify the required parameter 'commissionId' is set
      if (commissionId === undefined || commissionId === null) {
        throw new Error("Missing the required parameter 'commissionId' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
      }
      // verify the required parameter 'deleteSubscriptionPlanCommissionRequest' is set
      if (deleteSubscriptionPlanCommissionRequest === undefined || deleteSubscriptionPlanCommissionRequest === null) {
        throw new Error("Missing the required parameter 'deleteSubscriptionPlanCommissionRequest' when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST");
      }

      let pathParams = {
        'commission_id': commissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove a Subscription from a Commission Program
     * Removes a Subscription from a Commission Program
     * @param {String} commissionId commission_id
     * @param {module:com.keap.sdk.core/model/DeleteSubscriptionPlanCommissionRequest} deleteSubscriptionPlanCommissionRequest deleteSubscriptionPlanCommissionRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeSubscriptionPlanCommissionFromCommissionsUsingPOST(commissionId, deleteSubscriptionPlanCommissionRequest) {
      return this.removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId, deleteSubscriptionPlanCommissionRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Affiliate object.
     * @param {String} customFieldId custom_field_id
     * @param {module:com.keap.sdk.core/model/UpdateCustomFieldMetaDataRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} [updateMask] An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/CustomFieldMetaData} and HTTP response
     */
    updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, opts) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'customFieldId' is set
      if (customFieldId === undefined || customFieldId === null) {
        throw new Error("Missing the required parameter 'customFieldId' when calling updateAffiliateCustomFieldUsingPATCH");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateAffiliateCustomFieldUsingPATCH");
      }

      let pathParams = {
        'custom_field_id': customFieldId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomFieldMetaData;
      return this.apiClient.callApi(
        '/v2/affiliates/model/customFields/{custom_field_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Custom Field
     * Updates a custom field of the specified type and options to the Affiliate object.
     * @param {String} customFieldId custom_field_id
     * @param {module:com.keap.sdk.core/model/UpdateCustomFieldMetaDataRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} opts.updateMask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/CustomFieldMetaData}
     */
    updateAffiliateCustomFieldUsingPATCH(customFieldId, request, opts) {
      return this.updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId, request, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Affiliate
     * Updates a single Affiliate
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/PatchAffiliateRequest} [patchAffiliate] Affiliate request to patch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/RestAffiliate} and HTTP response
     */
    updateAffiliateUsingPATCHWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['patchAffiliate'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAffiliateUsingPATCH");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestAffiliate;
      return this.apiClient.callApi(
        '/v2/affiliates/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Affiliate
     * Updates a single Affiliate
     * @param {String} id id
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/PatchAffiliateRequest} opts.patchAffiliate Affiliate request to patch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/RestAffiliate}
     */
    updateAffiliateUsingPATCH(id, opts) {
      return this.updateAffiliateUsingPATCHWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an Affiliate Link
     * Updates an Affiliate Link
     * @param {String} redirectId redirect_id
     * @param {module:com.keap.sdk.core/model/CreateOrPatchAffiliateLinkRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/AffiliateLink} and HTTP response
     */
    updateRedirectLinkUsingPATCHWithHttpInfo(redirectId, request) {
      let postBody = request;
      // verify the required parameter 'redirectId' is set
      if (redirectId === undefined || redirectId === null) {
        throw new Error("Missing the required parameter 'redirectId' when calling updateRedirectLinkUsingPATCH");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateRedirectLinkUsingPATCH");
      }

      let pathParams = {
        'redirect_id': redirectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AffiliateLink;
      return this.apiClient.callApi(
        '/v2/affiliates/redirects/{redirect_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an Affiliate Link
     * Updates an Affiliate Link
     * @param {String} redirectId redirect_id
     * @param {module:com.keap.sdk.core/model/CreateOrPatchAffiliateLinkRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/AffiliateLink}
     */
    updateRedirectLinkUsingPATCH(redirectId, request) {
      return this.updateRedirectLinkUsingPATCHWithHttpInfo(redirectId, request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
