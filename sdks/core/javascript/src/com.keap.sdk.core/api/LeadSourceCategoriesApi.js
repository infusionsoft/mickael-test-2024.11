/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.752995
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUpdateLeadSourceCategoryRequest from '../model/CreateUpdateLeadSourceCategoryRequest';
import Error from '../model/Error';
import LeadSourceCategory from '../model/LeadSourceCategory';

/**
* LeadSourceCategories service.
* @module com.keap.sdk.core/api/LeadSourceCategoriesApi
* @version 0.0.48
*/
export default class LeadSourceCategoriesApi {

    /**
    * Constructs a new LeadSourceCategoriesApi. 
    * @alias module:com.keap.sdk.core/api/LeadSourceCategoriesApi
    * @class
    * @param {module:com.keap.sdk.core/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.keap.sdk.core/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Lead Source Category
     * Create a Lead Source Category.
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateUpdateLeadSourceCategoryRequest} [createUpdateLeadSourceCategoryRequest] leadSourceCategory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/LeadSourceCategory} and HTTP response
     */
    createLeadSourceCategoryUsingPOSTWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['createUpdateLeadSourceCategoryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LeadSourceCategory;
      return this.apiClient.callApi(
        '/v2/leadSourceCategories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Lead Source Category
     * Create a Lead Source Category.
     * @param {Object} opts Optional parameters
     * @param {module:com.keap.sdk.core/model/CreateUpdateLeadSourceCategoryRequest} opts.createUpdateLeadSourceCategoryRequest leadSourceCategory
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/LeadSourceCategory}
     */
    createLeadSourceCategoryUsingPOST(opts) {
      return this.createLeadSourceCategoryUsingPOSTWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Lead Source Category
     * Deletes the specified Lead Source Category.
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteLeadSourceCategoryUsingDELETEWithHttpInfo(categoryId) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling deleteLeadSourceCategoryUsingDELETE");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/leadSourceCategories/{category_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Lead Source Category
     * Deletes the specified Lead Source Category.
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteLeadSourceCategoryUsingDELETE(categoryId) {
      return this.deleteLeadSourceCategoryUsingDELETEWithHttpInfo(categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Lead Source Category
     * Retrieves a single Lead Source Category for a given id
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/LeadSourceCategory} and HTTP response
     */
    getLeadSourceCategoryUsingGETWithHttpInfo(categoryId) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getLeadSourceCategoryUsingGET");
      }

      let pathParams = {
        'category_id': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LeadSourceCategory;
      return this.apiClient.callApi(
        '/v2/leadSourceCategories/{category_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Lead Source Category
     * Retrieves a single Lead Source Category for a given id
     * @param {String} categoryId category_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/LeadSourceCategory}
     */
    getLeadSourceCategoryUsingGET(categoryId) {
      return this.getLeadSourceCategoryUsingGETWithHttpInfo(categoryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
