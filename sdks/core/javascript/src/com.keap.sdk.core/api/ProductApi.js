/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateProductRequest from '../model/CreateProductRequest';
import Error from '../model/Error';
import ListProductsResponse from '../model/ListProductsResponse';
import RestV2Product from '../model/RestV2Product';

/**
* Product service.
* @module com.keap.sdk.core/api/ProductApi
* @version 0.0.47
*/
export default class ProductApi {

    /**
    * Constructs a new ProductApi. 
    * @alias module:com.keap.sdk.core/api/ProductApi
    * @class
    * @param {module:com.keap.sdk.core/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.keap.sdk.core/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Product
     * Creates a new product
     * @param {module:com.keap.sdk.core/model/CreateProductRequest} createProductRequest createProductRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/RestV2Product} and HTTP response
     */
    createProductUsingPOST1WithHttpInfo(createProductRequest) {
      let postBody = createProductRequest;
      // verify the required parameter 'createProductRequest' is set
      if (createProductRequest === undefined || createProductRequest === null) {
        throw new Error("Missing the required parameter 'createProductRequest' when calling createProductUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Product
     * Creates a new product
     * @param {module:com.keap.sdk.core/model/CreateProductRequest} createProductRequest createProductRequest
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/RestV2Product}
     */
    createProductUsingPOST1(createProductRequest) {
      return this.createProductUsingPOST1WithHttpInfo(createProductRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Product
     * Deletes a single product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteProductUsingDELETE1WithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling deleteProductUsingDELETE1");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/products/{product_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Product
     * Deletes a single product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteProductUsingDELETE1(productId) {
      return this.deleteProductUsingDELETE1WithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a Product
     * Gets a single Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/RestV2Product} and HTTP response
     */
    getProductUsingGETWithHttpInfo(productId) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getProductUsingGET");
      }

      let pathParams = {
        'product_id': productId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RestV2Product;
      return this.apiClient.callApi(
        '/v2/products/{product_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a Product
     * Gets a single Product
     * @param {String} productId product_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/RestV2Product}
     */
    getProductUsingGET(productId) {
      return this.getProductUsingGETWithHttpInfo(productId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Products
     * Retrieves a list of Products
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter to apply, allowed fields are:   - (String) name   
     * @param {String} [orderBy] Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListProductsResponse} and HTTP response
     */
    listProductsUsingGET1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProductsResponse;
      return this.apiClient.callApi(
        '/v2/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Products
     * Retrieves a list of Products
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter Filter to apply, allowed fields are:   - (String) name   
     * @param {String} opts.orderBy Attribute and direction to order items.   One of the following fields:   - name   One of the following directions:   - asc   - desc
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListProductsResponse}
     */
    listProductsUsingGET1(opts) {
      return this.listProductsUsingGET1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
