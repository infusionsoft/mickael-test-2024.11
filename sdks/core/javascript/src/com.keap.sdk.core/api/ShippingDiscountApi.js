/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.751586-hf-202412120145
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateShippingDiscountRequest from '../model/CreateShippingDiscountRequest';
import Error from '../model/Error';
import ListShippingDiscountsResponse from '../model/ListShippingDiscountsResponse';
import ShippingDiscount from '../model/ShippingDiscount';
import UpdateShippingDiscountRequest from '../model/UpdateShippingDiscountRequest';

/**
* ShippingDiscount service.
* @module com.keap.sdk.core/api/ShippingDiscountApi
* @version 0.0.46
*/
export default class ShippingDiscountApi {

    /**
    * Constructs a new ShippingDiscountApi. 
    * @alias module:com.keap.sdk.core/api/ShippingDiscountApi
    * @class
    * @param {module:com.keap.sdk.core/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:com.keap.sdk.core/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Shipping Discount
     * Creates a Shipping Discount
     * @param {module:com.keap.sdk.core/model/CreateShippingDiscountRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ShippingDiscount} and HTTP response
     */
    createDiscountUsingPOST1WithHttpInfo(request) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling createDiscountUsingPOST1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Shipping Discount
     * Creates a Shipping Discount
     * @param {module:com.keap.sdk.core/model/CreateShippingDiscountRequest} request request
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ShippingDiscount}
     */
    createDiscountUsingPOST1(request) {
      return this.createDiscountUsingPOST1WithHttpInfo(request)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Shipping Discount
     * Deletes a specified Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDiscountUsingDELETE2WithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling deleteDiscountUsingDELETE2");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Shipping Discount
     * Deletes a specified Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDiscountUsingDELETE2(discountId) {
      return this.deleteDiscountUsingDELETE2WithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Shipping Discount
     * Retrieves a Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ShippingDiscount} and HTTP response
     */
    getDiscountUsingGET1WithHttpInfo(discountId) {
      let postBody = null;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling getDiscountUsingGET1");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Shipping Discount
     * Retrieves a Shipping Discount
     * @param {String} discountId discount_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ShippingDiscount}
     */
    getDiscountUsingGET1(discountId) {
      return this.getDiscountUsingGET1WithHttpInfo(discountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Shipping Discounts
     * Retrieves all Shipping Discounts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [fields] TODO: PAPI-1449
     * @param {String} [filter] Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=name%3D%3DMary` - `filter=description%3D%3DHello+World` - `filter=discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld` 
     * @param {String} [orderBy] Attribute and direction to order items by. E.g. `given_name desc`
     * @param {Number} [pageSize] Total number of items to return per page
     * @param {String} [pageToken] Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ListShippingDiscountsResponse} and HTTP response
     */
    listDiscountsUsingGETWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'filter': opts['filter'],
        'order_by': opts['orderBy'],
        'page_size': opts['pageSize'],
        'page_token': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListShippingDiscountsResponse;
      return this.apiClient.callApi(
        '/v2/discounts/shipping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Shipping Discounts
     * Retrieves all Shipping Discounts
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.fields TODO: PAPI-1449
     * @param {String} opts.filter Filter to apply, allowed fields are: - (String) name - (String) description - (DiscountType) discount_type: AMOUNT or PERCENT  You will need to apply the `==` operator to check the equality of one of the filters with your searched word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: - `filter=name%3D%3DMary` - `filter=description%3D%3DHello+World` - `filter=discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld` 
     * @param {String} opts.orderBy Attribute and direction to order items by. E.g. `given_name desc`
     * @param {Number} opts.pageSize Total number of items to return per page
     * @param {String} opts.pageToken Page token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ListShippingDiscountsResponse}
     */
    listDiscountsUsingGET(opts) {
      return this.listDiscountsUsingGETWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a Shipping Discount
     * Updates a Shipping Discount
     * @param {String} discountId discount_id
     * @param {module:com.keap.sdk.core/model/UpdateShippingDiscountRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} [updateMask] An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:com.keap.sdk.core/model/ShippingDiscount} and HTTP response
     */
    updateDiscountUsingPATCH1WithHttpInfo(discountId, request, opts) {
      opts = opts || {};
      let postBody = request;
      // verify the required parameter 'discountId' is set
      if (discountId === undefined || discountId === null) {
        throw new Error("Missing the required parameter 'discountId' when calling updateDiscountUsingPATCH1");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling updateDiscountUsingPATCH1");
      }

      let pathParams = {
        'discount_id': discountId
      };
      let queryParams = {
        'update_mask': this.apiClient.buildCollectionParam(opts['updateMask'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShippingDiscount;
      return this.apiClient.callApi(
        '/v2/discounts/shipping/{discount_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a Shipping Discount
     * Updates a Shipping Discount
     * @param {String} discountId discount_id
     * @param {module:com.keap.sdk.core/model/UpdateShippingDiscountRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Array.<module:com.keap.sdk.core/model/String>} opts.updateMask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:com.keap.sdk.core/model/ShippingDiscount}
     */
    updateDiscountUsingPATCH1(discountId, request, opts) {
      return this.updateDiscountUsingPATCH1WithHttpInfo(discountId, request, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
