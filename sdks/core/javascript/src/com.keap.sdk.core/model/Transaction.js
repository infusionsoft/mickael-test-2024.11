/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyValue from './CurrencyValue';

/**
 * The Transaction model module.
 * @module com.keap.sdk.core/model/Transaction
 * @version 0.0.107
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:com.keap.sdk.core/model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:com.keap.sdk.core/model/Transaction} obj Optional instance to populate.
     * @return {module:com.keap.sdk.core/model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('contact_id')) {
                obj['contact_id'] = ApiClient.convertToType(data['contact_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_live')) {
                obj['is_live'] = ApiClient.convertToType(data['is_live'], 'Boolean');
            }
            if (data.hasOwnProperty('is_successful')) {
                obj['is_successful'] = ApiClient.convertToType(data['is_successful'], 'Boolean');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('payment_gateway_id')) {
                obj['payment_gateway_id'] = ApiClient.convertToType(data['payment_gateway_id'], 'String');
            }
            if (data.hasOwnProperty('payment_gateway_type')) {
                obj['payment_gateway_type'] = ApiClient.convertToType(data['payment_gateway_type'], 'String');
            }
            if (data.hasOwnProperty('payment_id')) {
                obj['payment_id'] = ApiClient.convertToType(data['payment_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_amount')) {
                obj['transaction_amount'] = CurrencyValue.constructFromObject(data['transaction_amount']);
            }
            if (data.hasOwnProperty('transaction_time')) {
                obj['transaction_time'] = ApiClient.convertToType(data['transaction_time'], 'String');
            }
            if (data.hasOwnProperty('transaction_type')) {
                obj['transaction_type'] = ApiClient.convertToType(data['transaction_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contact_id'] && !(typeof data['contact_id'] === 'string' || data['contact_id'] instanceof String)) {
            throw new Error("Expected the field `contact_id` to be a primitive type in the JSON string but got " + data['contact_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['payment_gateway_id'] && !(typeof data['payment_gateway_id'] === 'string' || data['payment_gateway_id'] instanceof String)) {
            throw new Error("Expected the field `payment_gateway_id` to be a primitive type in the JSON string but got " + data['payment_gateway_id']);
        }
        // ensure the json data is a string
        if (data['payment_gateway_type'] && !(typeof data['payment_gateway_type'] === 'string' || data['payment_gateway_type'] instanceof String)) {
            throw new Error("Expected the field `payment_gateway_type` to be a primitive type in the JSON string but got " + data['payment_gateway_type']);
        }
        // ensure the json data is a string
        if (data['payment_id'] && !(typeof data['payment_id'] === 'string' || data['payment_id'] instanceof String)) {
            throw new Error("Expected the field `payment_id` to be a primitive type in the JSON string but got " + data['payment_id']);
        }
        // validate the optional field `transaction_amount`
        if (data['transaction_amount']) { // data not null
          CurrencyValue.validateJSON(data['transaction_amount']);
        }
        // ensure the json data is a string
        if (data['transaction_time'] && !(typeof data['transaction_time'] === 'string' || data['transaction_time'] instanceof String)) {
            throw new Error("Expected the field `transaction_time` to be a primitive type in the JSON string but got " + data['transaction_time']);
        }
        // ensure the json data is a string
        if (data['transaction_type'] && !(typeof data['transaction_type'] === 'string' || data['transaction_type'] instanceof String)) {
            throw new Error("Expected the field `transaction_type` to be a primitive type in the JSON string but got " + data['transaction_type']);
        }

        return true;
    }


}



/**
 * Reference to the contact the transaction was for.
 * @member {String} contact_id
 */
Transaction.prototype['contact_id'] = undefined;

/**
 * The unique identifier of the transaction.
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * true if this is a live transaction, false if the transaction is a test or sandbox transaction.
 * @member {Boolean} is_live
 */
Transaction.prototype['is_live'] = undefined;

/**
 * true if the transaction resulted in a success, false if the transaction resulted in a failure or error.
 * @member {Boolean} is_successful
 */
Transaction.prototype['is_successful'] = undefined;

/**
 * Reference to the order this transaction was for
 * @member {String} order_id
 */
Transaction.prototype['order_id'] = undefined;

/**
 * Reference to the payment processor to where the transaction attempt was made.
 * @member {String} payment_gateway_id
 */
Transaction.prototype['payment_gateway_id'] = undefined;

/**
 * The type of payment processor. Possible values are: PAYPAL, STRIPE, KEAP_PAY, AUTHORIZE, EWAY, OTHER. For transactions that did got go through a processor/gateway, value is MANUAL
 * @member {String} payment_gateway_type
 */
Transaction.prototype['payment_gateway_type'] = undefined;

/**
 * Reference to the payment record that on successful transactions. No reference if the transaction failed.
 * @member {String} payment_id
 */
Transaction.prototype['payment_id'] = undefined;

/**
 * @member {module:com.keap.sdk.core/model/CurrencyValue} transaction_amount
 */
Transaction.prototype['transaction_amount'] = undefined;

/**
 * ISO date-time of the transaction. e.g 2024-04-28 11:25:44
 * @member {String} transaction_time
 */
Transaction.prototype['transaction_time'] = undefined;

/**
 * The type of transaction. Possible values: CAPTURE, VOID, REFUND, CREDIT, APPROVAL
 * @member {String} transaction_type
 */
Transaction.prototype['transaction_type'] = undefined;






export default Transaction;
