<?php
/**
 * AffiliateApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Com\Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.70.0.739356-hf-202411181744
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Com\Keap\Sdk\Core\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Com\Keap\Sdk\Core\ApiException;
use Com\Keap\Sdk\Core\Configuration;
use Com\Keap\Sdk\Core\HeaderSelector;
use Com\Keap\Sdk\Core\ObjectSerializer;

/**
 * AffiliateApi Class Doc Comment
 *
 * @category Class
 * @package  Com\Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AffiliateApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addAffiliateToProgramUsingPOST_0' => [
            'application/json',
        ],
        'addAffiliateUsingPOST' => [
            'application/json',
        ],
        'addCommissionProgramUsingPOST_0' => [
            'application/json',
        ],
        'assignProductCommissionProgramUsingPOST_0' => [
            'application/json',
        ],
        'assignSubscriptionCommissionProgramUsingPOST_0' => [
            'application/json',
        ],
        'createAffiliateCustomFieldUsingPOST_0' => [
            'application/json',
        ],
        'createDefaultCommissionProgramUsingPOST_0' => [
            'application/json',
        ],
        'createRedirectLinkUsingPOST_0' => [
            'application/json',
        ],
        'deleteAffiliateCommissionProgramUsingDELETE_0' => [
            'application/json',
        ],
        'deleteAffiliateUsingDELETE_0' => [
            'application/json',
        ],
        'deleteRedirectLinkUsingDELETE_0' => [
            'application/json',
        ],
        'getAffiliateCommissionTotalUsingGET_0' => [
            'application/json',
        ],
        'getAffiliateCommissionsUsingGET_0' => [
            'application/json',
        ],
        'getAffiliateCustomFieldsUsingGET_0' => [
            'application/json',
        ],
        'getAffiliateUsingGET1' => [
            'application/json',
        ],
        'getCommissionProgramUsingGET_0' => [
            'application/json',
        ],
        'getRedirectLinkUsingGET_0' => [
            'application/json',
        ],
        'listAffiliateCommissionProgramsUsingGET_0' => [
            'application/json',
        ],
        'listAffiliateLinksUsingGET_0' => [
            'application/json',
        ],
        'listSummariesUsingGET1_0' => [
            'application/json',
        ],
        'patchCommissionProgramUsingPATCH' => [
            'application/json',
        ],
        'patchDefaultCommissionProgramUsingPATCH_0' => [
            'application/json',
        ],
        'patchProductCommissionProgramUsingPATCH_0' => [
            'application/json',
        ],
        'patchSubscriptionCommissionProgramUsingPATCH_0' => [
            'application/json',
        ],
        'removeAffiliateFromProgramUsingPOST_0' => [
            'application/json',
        ],
        'removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0' => [
            'application/json',
        ],
        'updateAffiliateCustomFieldUsingPATCH_0' => [
            'application/json',
        ],
        'updateAffiliateUsingPATCH' => [
            'application/json',
        ],
        'updateRedirectLinkUsingPATCH_0' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addAffiliateToProgramUsingPOST_0
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addAffiliateToProgramUsingPOST_0($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgramUsingPOST_0'][0])
    {
        $this->addAffiliateToProgramUsingPOST_0WithHttpInfo($id, $affiliate_add_to_program_request, $contentType);
    }

    /**
     * Operation addAffiliateToProgramUsingPOST_0WithHttpInfo
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAffiliateToProgramUsingPOST_0WithHttpInfo($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgramUsingPOST_0'][0])
    {
        $request = $this->addAffiliateToProgramUsingPOST_0Request($id, $affiliate_add_to_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAffiliateToProgramUsingPOST_0Async
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateToProgramUsingPOST_0Async($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgramUsingPOST_0'][0])
    {
        return $this->addAffiliateToProgramUsingPOST_0AsyncWithHttpInfo($id, $affiliate_add_to_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAffiliateToProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Assign Affiliate to Commission program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateToProgramUsingPOST_0AsyncWithHttpInfo($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgramUsingPOST_0'][0])
    {
        $returnType = '';
        $request = $this->addAffiliateToProgramUsingPOST_0Request($id, $affiliate_add_to_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAffiliateToProgramUsingPOST_0'
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateAddToProgramRequest $affiliate_add_to_program_request affiliateAddToProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateToProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAffiliateToProgramUsingPOST_0Request($id, $affiliate_add_to_program_request, string $contentType = self::contentTypes['addAffiliateToProgramUsingPOST_0'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addAffiliateToProgramUsingPOST_0'
            );
        }

        // verify the required parameter 'affiliate_add_to_program_request' is set
        if ($affiliate_add_to_program_request === null || (is_array($affiliate_add_to_program_request) && count($affiliate_add_to_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_add_to_program_request when calling addAffiliateToProgramUsingPOST_0'
            );
        }


        $resourcePath = '/v2/affiliates/{id}:assignToProgram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($affiliate_add_to_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($affiliate_add_to_program_request));
            } else {
                $httpBody = $affiliate_add_to_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addAffiliateUsingPOST
     *
     * Create an Affiliate
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateAffiliateRequest $insert_affiliate Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateUsingPOST'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function addAffiliateUsingPOST($insert_affiliate = null, string $contentType = self::contentTypes['addAffiliateUsingPOST'][0])
    {
        list($response) = $this->addAffiliateUsingPOSTWithHttpInfo($insert_affiliate, $contentType);
        return $response;
    }

    /**
     * Operation addAffiliateUsingPOSTWithHttpInfo
     *
     * Create an Affiliate
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateAffiliateRequest $insert_affiliate Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateUsingPOST'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAffiliateUsingPOSTWithHttpInfo($insert_affiliate = null, string $contentType = self::contentTypes['addAffiliateUsingPOST'][0])
    {
        $request = $this->addAffiliateUsingPOSTRequest($insert_affiliate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\RestAffiliate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAffiliateUsingPOSTAsync
     *
     * Create an Affiliate
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateAffiliateRequest $insert_affiliate Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateUsingPOSTAsync($insert_affiliate = null, string $contentType = self::contentTypes['addAffiliateUsingPOST'][0])
    {
        return $this->addAffiliateUsingPOSTAsyncWithHttpInfo($insert_affiliate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAffiliateUsingPOSTAsyncWithHttpInfo
     *
     * Create an Affiliate
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateAffiliateRequest $insert_affiliate Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAffiliateUsingPOSTAsyncWithHttpInfo($insert_affiliate = null, string $contentType = self::contentTypes['addAffiliateUsingPOST'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
        $request = $this->addAffiliateUsingPOSTRequest($insert_affiliate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addAffiliateUsingPOST'
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateAffiliateRequest $insert_affiliate Affiliate request to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAffiliateUsingPOST'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAffiliateUsingPOSTRequest($insert_affiliate = null, string $contentType = self::contentTypes['addAffiliateUsingPOST'][0])
    {



        $resourcePath = '/v2/affiliates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($insert_affiliate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($insert_affiliate));
            } else {
                $httpBody = $insert_affiliate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addCommissionProgramUsingPOST_0
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCommissionProgramRequest $insert_commission_program Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function addCommissionProgramUsingPOST_0($insert_commission_program = null, string $contentType = self::contentTypes['addCommissionProgramUsingPOST_0'][0])
    {
        list($response) = $this->addCommissionProgramUsingPOST_0WithHttpInfo($insert_commission_program, $contentType);
        return $response;
    }

    /**
     * Operation addCommissionProgramUsingPOST_0WithHttpInfo
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCommissionProgramRequest $insert_commission_program Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCommissionProgramUsingPOST_0WithHttpInfo($insert_commission_program = null, string $contentType = self::contentTypes['addCommissionProgramUsingPOST_0'][0])
    {
        $request = $this->addCommissionProgramUsingPOST_0Request($insert_commission_program, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCommissionProgramUsingPOST_0Async
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCommissionProgramRequest $insert_commission_program Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommissionProgramUsingPOST_0Async($insert_commission_program = null, string $contentType = self::contentTypes['addCommissionProgramUsingPOST_0'][0])
    {
        return $this->addCommissionProgramUsingPOST_0AsyncWithHttpInfo($insert_commission_program, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCommissionProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Create an Affiliate Commission Program
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCommissionProgramRequest $insert_commission_program Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCommissionProgramUsingPOST_0AsyncWithHttpInfo($insert_commission_program = null, string $contentType = self::contentTypes['addCommissionProgramUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse';
        $request = $this->addCommissionProgramUsingPOST_0Request($insert_commission_program, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addCommissionProgramUsingPOST_0'
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCommissionProgramRequest $insert_commission_program Commission Program to insert (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCommissionProgramUsingPOST_0Request($insert_commission_program = null, string $contentType = self::contentTypes['addCommissionProgramUsingPOST_0'][0])
    {



        $resourcePath = '/v2/affiliates/commissionPrograms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($insert_commission_program)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($insert_commission_program));
            } else {
                $httpBody = $insert_commission_program;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignProductCommissionProgramUsingPOST_0
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateProductCommissionProgramRequest $product_commission_program Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ProductCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function assignProductCommissionProgramUsingPOST_0($commission_program_id, $product_commission_program = null, string $contentType = self::contentTypes['assignProductCommissionProgramUsingPOST_0'][0])
    {
        list($response) = $this->assignProductCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $product_commission_program, $contentType);
        return $response;
    }

    /**
     * Operation assignProductCommissionProgramUsingPOST_0WithHttpInfo
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateProductCommissionProgramRequest $product_commission_program Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ProductCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignProductCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $product_commission_program = null, string $contentType = self::contentTypes['assignProductCommissionProgramUsingPOST_0'][0])
    {
        $request = $this->assignProductCommissionProgramUsingPOST_0Request($commission_program_id, $product_commission_program, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\ProductCommissionProgram' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ProductCommissionProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignProductCommissionProgramUsingPOST_0Async
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateProductCommissionProgramRequest $product_commission_program Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignProductCommissionProgramUsingPOST_0Async($commission_program_id, $product_commission_program = null, string $contentType = self::contentTypes['assignProductCommissionProgramUsingPOST_0'][0])
    {
        return $this->assignProductCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $product_commission_program, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignProductCommissionProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Assign a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateProductCommissionProgramRequest $product_commission_program Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignProductCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $product_commission_program = null, string $contentType = self::contentTypes['assignProductCommissionProgramUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram';
        $request = $this->assignProductCommissionProgramUsingPOST_0Request($commission_program_id, $product_commission_program, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignProductCommissionProgramUsingPOST_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateProductCommissionProgramRequest $product_commission_program Product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignProductCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignProductCommissionProgramUsingPOST_0Request($commission_program_id, $product_commission_program = null, string $contentType = self::contentTypes['assignProductCommissionProgramUsingPOST_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling assignProductCommissionProgramUsingPOST_0'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($product_commission_program)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($product_commission_program));
            } else {
                $httpBody = $product_commission_program;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation assignSubscriptionCommissionProgramUsingPOST_0
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateSubscriptionCommissionProgramRequest $subscription_commission_program Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function assignSubscriptionCommissionProgramUsingPOST_0($commission_program_id, $subscription_commission_program = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'][0])
    {
        list($response) = $this->assignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $subscription_commission_program, $contentType);
        return $response;
    }

    /**
     * Operation assignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateSubscriptionCommissionProgramRequest $subscription_commission_program Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignSubscriptionCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $subscription_commission_program = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'][0])
    {
        $request = $this->assignSubscriptionCommissionProgramUsingPOST_0Request($commission_program_id, $subscription_commission_program, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignSubscriptionCommissionProgramUsingPOST_0Async
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateSubscriptionCommissionProgramRequest $subscription_commission_program Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignSubscriptionCommissionProgramUsingPOST_0Async($commission_program_id, $subscription_commission_program = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'][0])
    {
        return $this->assignSubscriptionCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $subscription_commission_program, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignSubscriptionCommissionProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Assign a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateSubscriptionCommissionProgramRequest $subscription_commission_program Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignSubscriptionCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $subscription_commission_program = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram';
        $request = $this->assignSubscriptionCommissionProgramUsingPOST_0Request($commission_program_id, $subscription_commission_program, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignSubscriptionCommissionProgramUsingPOST_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateSubscriptionCommissionProgramRequest $subscription_commission_program Subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function assignSubscriptionCommissionProgramUsingPOST_0Request($commission_program_id, $subscription_commission_program = null, string $contentType = self::contentTypes['assignSubscriptionCommissionProgramUsingPOST_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling assignSubscriptionCommissionProgramUsingPOST_0'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subscription_commission_program)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subscription_commission_program));
            } else {
                $httpBody = $subscription_commission_program;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAffiliateCustomFieldUsingPOST_0
     *
     * Create an Affiliate Custom Field
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCustomFieldRequest $custom_field customField (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAffiliateCustomFieldUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\CustomFieldMetaData|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function createAffiliateCustomFieldUsingPOST_0($custom_field, string $contentType = self::contentTypes['createAffiliateCustomFieldUsingPOST_0'][0])
    {
        list($response) = $this->createAffiliateCustomFieldUsingPOST_0WithHttpInfo($custom_field, $contentType);
        return $response;
    }

    /**
     * Operation createAffiliateCustomFieldUsingPOST_0WithHttpInfo
     *
     * Create an Affiliate Custom Field
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCustomFieldRequest $custom_field customField (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAffiliateCustomFieldUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\CustomFieldMetaData|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAffiliateCustomFieldUsingPOST_0WithHttpInfo($custom_field, string $contentType = self::contentTypes['createAffiliateCustomFieldUsingPOST_0'][0])
    {
        $request = $this->createAffiliateCustomFieldUsingPOST_0Request($custom_field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\CustomFieldMetaData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\CustomFieldMetaData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAffiliateCustomFieldUsingPOST_0Async
     *
     * Create an Affiliate Custom Field
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCustomFieldRequest $custom_field customField (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAffiliateCustomFieldUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAffiliateCustomFieldUsingPOST_0Async($custom_field, string $contentType = self::contentTypes['createAffiliateCustomFieldUsingPOST_0'][0])
    {
        return $this->createAffiliateCustomFieldUsingPOST_0AsyncWithHttpInfo($custom_field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAffiliateCustomFieldUsingPOST_0AsyncWithHttpInfo
     *
     * Create an Affiliate Custom Field
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCustomFieldRequest $custom_field customField (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAffiliateCustomFieldUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAffiliateCustomFieldUsingPOST_0AsyncWithHttpInfo($custom_field, string $contentType = self::contentTypes['createAffiliateCustomFieldUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData';
        $request = $this->createAffiliateCustomFieldUsingPOST_0Request($custom_field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAffiliateCustomFieldUsingPOST_0'
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateCustomFieldRequest $custom_field customField (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAffiliateCustomFieldUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAffiliateCustomFieldUsingPOST_0Request($custom_field, string $contentType = self::contentTypes['createAffiliateCustomFieldUsingPOST_0'][0])
    {

        // verify the required parameter 'custom_field' is set
        if ($custom_field === null || (is_array($custom_field) && count($custom_field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_field when calling createAffiliateCustomFieldUsingPOST_0'
            );
        }


        $resourcePath = '/v2/affiliates/model/customFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_field)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_field));
            } else {
                $httpBody = $custom_field;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDefaultCommissionProgramUsingPOST_0
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateDefaultCommissionProgramRequest $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function createDefaultCommissionProgramUsingPOST_0($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgramUsingPOST_0'][0])
    {
        list($response) = $this->createDefaultCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $create_default_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation createDefaultCommissionProgramUsingPOST_0WithHttpInfo
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateDefaultCommissionProgramRequest $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDefaultCommissionProgramUsingPOST_0WithHttpInfo($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgramUsingPOST_0'][0])
    {
        $request = $this->createDefaultCommissionProgramUsingPOST_0Request($commission_program_id, $create_default_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDefaultCommissionProgramUsingPOST_0Async
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateDefaultCommissionProgramRequest $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDefaultCommissionProgramUsingPOST_0Async($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgramUsingPOST_0'][0])
    {
        return $this->createDefaultCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $create_default_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDefaultCommissionProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Create a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateDefaultCommissionProgramRequest $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDefaultCommissionProgramUsingPOST_0AsyncWithHttpInfo($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgramUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse';
        $request = $this->createDefaultCommissionProgramUsingPOST_0Request($commission_program_id, $create_default_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDefaultCommissionProgramUsingPOST_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateDefaultCommissionProgramRequest $create_default_commission_program_request Values of the Default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDefaultCommissionProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDefaultCommissionProgramUsingPOST_0Request($commission_program_id, $create_default_commission_program_request = null, string $contentType = self::contentTypes['createDefaultCommissionProgramUsingPOST_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling createDefaultCommissionProgramUsingPOST_0'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_default_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_default_commission_program_request));
            } else {
                $httpBody = $create_default_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createRedirectLinkUsingPOST_0
     *
     * Create an Affiliate Link
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLinkUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function createRedirectLinkUsingPOST_0($request, string $contentType = self::contentTypes['createRedirectLinkUsingPOST_0'][0])
    {
        list($response) = $this->createRedirectLinkUsingPOST_0WithHttpInfo($request, $contentType);
        return $response;
    }

    /**
     * Operation createRedirectLinkUsingPOST_0WithHttpInfo
     *
     * Create an Affiliate Link
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLinkUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRedirectLinkUsingPOST_0WithHttpInfo($request, string $contentType = self::contentTypes['createRedirectLinkUsingPOST_0'][0])
    {
        $request = $this->createRedirectLinkUsingPOST_0Request($request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createRedirectLinkUsingPOST_0Async
     *
     * Create an Affiliate Link
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLinkUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRedirectLinkUsingPOST_0Async($request, string $contentType = self::contentTypes['createRedirectLinkUsingPOST_0'][0])
    {
        return $this->createRedirectLinkUsingPOST_0AsyncWithHttpInfo($request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createRedirectLinkUsingPOST_0AsyncWithHttpInfo
     *
     * Create an Affiliate Link
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLinkUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createRedirectLinkUsingPOST_0AsyncWithHttpInfo($request, string $contentType = self::contentTypes['createRedirectLinkUsingPOST_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
        $request = $this->createRedirectLinkUsingPOST_0Request($request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createRedirectLinkUsingPOST_0'
     *
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createRedirectLinkUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createRedirectLinkUsingPOST_0Request($request, string $contentType = self::contentTypes['createRedirectLinkUsingPOST_0'][0])
    {

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling createRedirectLinkUsingPOST_0'
            );
        }


        $resourcePath = '/v2/affiliates/redirects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAffiliateCommissionProgramUsingDELETE_0
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAffiliateCommissionProgramUsingDELETE_0($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'][0])
    {
        $this->deleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo($commission_program_id, $contentType);
    }

    /**
     * Operation deleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAffiliateCommissionProgramUsingDELETE_0WithHttpInfo($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'][0])
    {
        $request = $this->deleteAffiliateCommissionProgramUsingDELETE_0Request($commission_program_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAffiliateCommissionProgramUsingDELETE_0Async
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateCommissionProgramUsingDELETE_0Async($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'][0])
    {
        return $this->deleteAffiliateCommissionProgramUsingDELETE_0AsyncWithHttpInfo($commission_program_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAffiliateCommissionProgramUsingDELETE_0AsyncWithHttpInfo
     *
     * Delete a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateCommissionProgramUsingDELETE_0AsyncWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'][0])
    {
        $returnType = '';
        $request = $this->deleteAffiliateCommissionProgramUsingDELETE_0Request($commission_program_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAffiliateCommissionProgramUsingDELETE_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAffiliateCommissionProgramUsingDELETE_0Request($commission_program_id, string $contentType = self::contentTypes['deleteAffiliateCommissionProgramUsingDELETE_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling deleteAffiliateCommissionProgramUsingDELETE_0'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAffiliateUsingDELETE_0
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAffiliateUsingDELETE_0($id, string $contentType = self::contentTypes['deleteAffiliateUsingDELETE_0'][0])
    {
        $this->deleteAffiliateUsingDELETE_0WithHttpInfo($id, $contentType);
    }

    /**
     * Operation deleteAffiliateUsingDELETE_0WithHttpInfo
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAffiliateUsingDELETE_0WithHttpInfo($id, string $contentType = self::contentTypes['deleteAffiliateUsingDELETE_0'][0])
    {
        $request = $this->deleteAffiliateUsingDELETE_0Request($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAffiliateUsingDELETE_0Async
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateUsingDELETE_0Async($id, string $contentType = self::contentTypes['deleteAffiliateUsingDELETE_0'][0])
    {
        return $this->deleteAffiliateUsingDELETE_0AsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAffiliateUsingDELETE_0AsyncWithHttpInfo
     *
     * Delete Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAffiliateUsingDELETE_0AsyncWithHttpInfo($id, string $contentType = self::contentTypes['deleteAffiliateUsingDELETE_0'][0])
    {
        $returnType = '';
        $request = $this->deleteAffiliateUsingDELETE_0Request($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAffiliateUsingDELETE_0'
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAffiliateUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAffiliateUsingDELETE_0Request($id, string $contentType = self::contentTypes['deleteAffiliateUsingDELETE_0'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteAffiliateUsingDELETE_0'
            );
        }


        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRedirectLinkUsingDELETE_0
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLinkUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteRedirectLinkUsingDELETE_0($redirect_id, string $contentType = self::contentTypes['deleteRedirectLinkUsingDELETE_0'][0])
    {
        $this->deleteRedirectLinkUsingDELETE_0WithHttpInfo($redirect_id, $contentType);
    }

    /**
     * Operation deleteRedirectLinkUsingDELETE_0WithHttpInfo
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLinkUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRedirectLinkUsingDELETE_0WithHttpInfo($redirect_id, string $contentType = self::contentTypes['deleteRedirectLinkUsingDELETE_0'][0])
    {
        $request = $this->deleteRedirectLinkUsingDELETE_0Request($redirect_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRedirectLinkUsingDELETE_0Async
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLinkUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRedirectLinkUsingDELETE_0Async($redirect_id, string $contentType = self::contentTypes['deleteRedirectLinkUsingDELETE_0'][0])
    {
        return $this->deleteRedirectLinkUsingDELETE_0AsyncWithHttpInfo($redirect_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRedirectLinkUsingDELETE_0AsyncWithHttpInfo
     *
     * Delete an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLinkUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteRedirectLinkUsingDELETE_0AsyncWithHttpInfo($redirect_id, string $contentType = self::contentTypes['deleteRedirectLinkUsingDELETE_0'][0])
    {
        $returnType = '';
        $request = $this->deleteRedirectLinkUsingDELETE_0Request($redirect_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRedirectLinkUsingDELETE_0'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRedirectLinkUsingDELETE_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRedirectLinkUsingDELETE_0Request($redirect_id, string $contentType = self::contentTypes['deleteRedirectLinkUsingDELETE_0'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling deleteRedirectLinkUsingDELETE_0'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateCommissionTotalUsingGET_0
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotalUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getAffiliateCommissionTotalUsingGET_0($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotalUsingGET_0'][0])
    {
        list($response) = $this->getAffiliateCommissionTotalUsingGET_0WithHttpInfo($affiliate_id, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateCommissionTotalUsingGET_0WithHttpInfo
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotalUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateCommissionTotalUsingGET_0WithHttpInfo($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotalUsingGET_0'][0])
    {
        $request = $this->getAffiliateCommissionTotalUsingGET_0Request($affiliate_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAffiliateCommissionTotalUsingGET_0Async
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotalUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionTotalUsingGET_0Async($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotalUsingGET_0'][0])
    {
        return $this->getAffiliateCommissionTotalUsingGET_0AsyncWithHttpInfo($affiliate_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateCommissionTotalUsingGET_0AsyncWithHttpInfo
     *
     * Retrieve Affiliate Commission Earned and View LedgerURl for portal
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotalUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionTotalUsingGET_0AsyncWithHttpInfo($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotalUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionEarned';
        $request = $this->getAffiliateCommissionTotalUsingGET_0Request($affiliate_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateCommissionTotalUsingGET_0'
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionTotalUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateCommissionTotalUsingGET_0Request($affiliate_id, string $contentType = self::contentTypes['getAffiliateCommissionTotalUsingGET_0'][0])
    {

        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling getAffiliateCommissionTotalUsingGET_0'
            );
        }


        $resourcePath = '/v2/affiliates/{affiliate_id}/commissionTotal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($affiliate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'affiliate_id' . '}',
                ObjectSerializer::toPathValue($affiliate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateCommissionsUsingGET_0
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getAffiliateCommissionsUsingGET_0($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissionsUsingGET_0'][0])
    {
        list($response) = $this->getAffiliateCommissionsUsingGET_0WithHttpInfo($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateCommissionsUsingGET_0WithHttpInfo
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateCommissionsUsingGET_0WithHttpInfo($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissionsUsingGET_0'][0])
    {
        $request = $this->getAffiliateCommissionsUsingGET_0Request($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAffiliateCommissionsUsingGET_0Async
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionsUsingGET_0Async($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissionsUsingGET_0'][0])
    {
        return $this->getAffiliateCommissionsUsingGET_0AsyncWithHttpInfo($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateCommissionsUsingGET_0AsyncWithHttpInfo
     *
     * Retrieve Affiliate Commission and Clawbacks
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCommissionsUsingGET_0AsyncWithHttpInfo($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissionsUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionResponse';
        $request = $this->getAffiliateCommissionsUsingGET_0Request($affiliate_id, $filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateCommissionsUsingGET_0'
     *
     * @param  string $affiliate_id affiliate_id (required)
     * @param  string $filter Filter to apply, allowed fields are:   - (String) affiliateId  - (String) since  - (String) until (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - date_earned   One of the following directions:   - asc   - date_created   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCommissionsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateCommissionsUsingGET_0Request($affiliate_id, $filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['getAffiliateCommissionsUsingGET_0'][0])
    {

        // verify the required parameter 'affiliate_id' is set
        if ($affiliate_id === null || (is_array($affiliate_id) && count($affiliate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $affiliate_id when calling getAffiliateCommissionsUsingGET_0'
            );
        }



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.getAffiliateCommissionsUsingGET_0, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.getAffiliateCommissionsUsingGET_0, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/{affiliate_id}:commissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($affiliate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'affiliate_id' . '}',
                ObjectSerializer::toPathValue($affiliate_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateCustomFieldsUsingGET_0
     *
     * Retrieve Affiliate Model
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCustomFieldsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ObjectModel|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getAffiliateCustomFieldsUsingGET_0(string $contentType = self::contentTypes['getAffiliateCustomFieldsUsingGET_0'][0])
    {
        list($response) = $this->getAffiliateCustomFieldsUsingGET_0WithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getAffiliateCustomFieldsUsingGET_0WithHttpInfo
     *
     * Retrieve Affiliate Model
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCustomFieldsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ObjectModel|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateCustomFieldsUsingGET_0WithHttpInfo(string $contentType = self::contentTypes['getAffiliateCustomFieldsUsingGET_0'][0])
    {
        $request = $this->getAffiliateCustomFieldsUsingGET_0Request($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ObjectModel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ObjectModel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ObjectModel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ObjectModel';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ObjectModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAffiliateCustomFieldsUsingGET_0Async
     *
     * Retrieve Affiliate Model
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCustomFieldsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCustomFieldsUsingGET_0Async(string $contentType = self::contentTypes['getAffiliateCustomFieldsUsingGET_0'][0])
    {
        return $this->getAffiliateCustomFieldsUsingGET_0AsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateCustomFieldsUsingGET_0AsyncWithHttpInfo
     *
     * Retrieve Affiliate Model
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCustomFieldsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateCustomFieldsUsingGET_0AsyncWithHttpInfo(string $contentType = self::contentTypes['getAffiliateCustomFieldsUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ObjectModel';
        $request = $this->getAffiliateCustomFieldsUsingGET_0Request($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateCustomFieldsUsingGET_0'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateCustomFieldsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateCustomFieldsUsingGET_0Request(string $contentType = self::contentTypes['getAffiliateCustomFieldsUsingGET_0'][0])
    {


        $resourcePath = '/v2/affiliates/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAffiliateUsingGET1
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateUsingGET1'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getAffiliateUsingGET1($id, string $contentType = self::contentTypes['getAffiliateUsingGET1'][0])
    {
        list($response) = $this->getAffiliateUsingGET1WithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getAffiliateUsingGET1WithHttpInfo
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateUsingGET1'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAffiliateUsingGET1WithHttpInfo($id, string $contentType = self::contentTypes['getAffiliateUsingGET1'][0])
    {
        $request = $this->getAffiliateUsingGET1Request($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\RestAffiliate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAffiliateUsingGET1Async
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateUsingGET1Async($id, string $contentType = self::contentTypes['getAffiliateUsingGET1'][0])
    {
        return $this->getAffiliateUsingGET1AsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAffiliateUsingGET1AsyncWithHttpInfo
     *
     * Retrieve an Affiliate
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAffiliateUsingGET1AsyncWithHttpInfo($id, string $contentType = self::contentTypes['getAffiliateUsingGET1'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
        $request = $this->getAffiliateUsingGET1Request($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAffiliateUsingGET1'
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAffiliateUsingGET1'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAffiliateUsingGET1Request($id, string $contentType = self::contentTypes['getAffiliateUsingGET1'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getAffiliateUsingGET1'
            );
        }


        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommissionProgramUsingGET_0
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgramUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateProgramV2|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getCommissionProgramUsingGET_0($commission_program_id, string $contentType = self::contentTypes['getCommissionProgramUsingGET_0'][0])
    {
        list($response) = $this->getCommissionProgramUsingGET_0WithHttpInfo($commission_program_id, $contentType);
        return $response;
    }

    /**
     * Operation getCommissionProgramUsingGET_0WithHttpInfo
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgramUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateProgramV2|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommissionProgramUsingGET_0WithHttpInfo($commission_program_id, string $contentType = self::contentTypes['getCommissionProgramUsingGET_0'][0])
    {
        $request = $this->getCommissionProgramUsingGET_0Request($commission_program_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateProgramV2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateProgramV2' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateProgramV2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateProgramV2';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateProgramV2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommissionProgramUsingGET_0Async
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgramUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionProgramUsingGET_0Async($commission_program_id, string $contentType = self::contentTypes['getCommissionProgramUsingGET_0'][0])
    {
        return $this->getCommissionProgramUsingGET_0AsyncWithHttpInfo($commission_program_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommissionProgramUsingGET_0AsyncWithHttpInfo
     *
     * Retrieve a Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgramUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionProgramUsingGET_0AsyncWithHttpInfo($commission_program_id, string $contentType = self::contentTypes['getCommissionProgramUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateProgramV2';
        $request = $this->getCommissionProgramUsingGET_0Request($commission_program_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommissionProgramUsingGET_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissionProgramUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommissionProgramUsingGET_0Request($commission_program_id, string $contentType = self::contentTypes['getCommissionProgramUsingGET_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling getCommissionProgramUsingGET_0'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRedirectLinkUsingGET_0
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLinkUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function getRedirectLinkUsingGET_0($redirect_id, string $contentType = self::contentTypes['getRedirectLinkUsingGET_0'][0])
    {
        list($response) = $this->getRedirectLinkUsingGET_0WithHttpInfo($redirect_id, $contentType);
        return $response;
    }

    /**
     * Operation getRedirectLinkUsingGET_0WithHttpInfo
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLinkUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRedirectLinkUsingGET_0WithHttpInfo($redirect_id, string $contentType = self::contentTypes['getRedirectLinkUsingGET_0'][0])
    {
        $request = $this->getRedirectLinkUsingGET_0Request($redirect_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRedirectLinkUsingGET_0Async
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLinkUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRedirectLinkUsingGET_0Async($redirect_id, string $contentType = self::contentTypes['getRedirectLinkUsingGET_0'][0])
    {
        return $this->getRedirectLinkUsingGET_0AsyncWithHttpInfo($redirect_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRedirectLinkUsingGET_0AsyncWithHttpInfo
     *
     * Retrieve an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLinkUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRedirectLinkUsingGET_0AsyncWithHttpInfo($redirect_id, string $contentType = self::contentTypes['getRedirectLinkUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
        $request = $this->getRedirectLinkUsingGET_0Request($redirect_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRedirectLinkUsingGET_0'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRedirectLinkUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRedirectLinkUsingGET_0Request($redirect_id, string $contentType = self::contentTypes['getRedirectLinkUsingGET_0'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling getRedirectLinkUsingGET_0'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAffiliateCommissionProgramsUsingGET_0
     *
     * List Affiliate Commission Programs
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function listAffiliateCommissionProgramsUsingGET_0($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'][0])
    {
        list($response) = $this->listAffiliateCommissionProgramsUsingGET_0WithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listAffiliateCommissionProgramsUsingGET_0WithHttpInfo
     *
     * List Affiliate Commission Programs
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAffiliateCommissionProgramsUsingGET_0WithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'][0])
    {
        $request = $this->listAffiliateCommissionProgramsUsingGET_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAffiliateCommissionProgramsUsingGET_0Async
     *
     * List Affiliate Commission Programs
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateCommissionProgramsUsingGET_0Async($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'][0])
    {
        return $this->listAffiliateCommissionProgramsUsingGET_0AsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAffiliateCommissionProgramsUsingGET_0AsyncWithHttpInfo
     *
     * List Affiliate Commission Programs
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateCommissionProgramsUsingGET_0AsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateCommissionProgramsResponse';
        $request = $this->listAffiliateCommissionProgramsUsingGET_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAffiliateCommissionProgramsUsingGET_0'
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAffiliateCommissionProgramsUsingGET_0Request($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateCommissionProgramsUsingGET_0'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateCommissionProgramsUsingGET_0, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateCommissionProgramsUsingGET_0, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/commissionPrograms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAffiliateLinksUsingGET_0
     *
     * List Affiliate Links
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinksUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function listAffiliateLinksUsingGET_0($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinksUsingGET_0'][0])
    {
        list($response) = $this->listAffiliateLinksUsingGET_0WithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listAffiliateLinksUsingGET_0WithHttpInfo
     *
     * List Affiliate Links
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinksUsingGET_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAffiliateLinksUsingGET_0WithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinksUsingGET_0'][0])
    {
        $request = $this->listAffiliateLinksUsingGET_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAffiliateLinksUsingGET_0Async
     *
     * List Affiliate Links
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinksUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateLinksUsingGET_0Async($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinksUsingGET_0'][0])
    {
        return $this->listAffiliateLinksUsingGET_0AsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAffiliateLinksUsingGET_0AsyncWithHttpInfo
     *
     * List Affiliate Links
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinksUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAffiliateLinksUsingGET_0AsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinksUsingGET_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateLinksResponse';
        $request = $this->listAffiliateLinksUsingGET_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAffiliateLinksUsingGET_0'
     *
     * @param  string $filter Filter to apply, allowed fields are:   - (String) name   - (String) affiliate_id (optional)
     * @param  string $order_by Attribute and direction to order items.   One of the following fields:   - name   - date_created   One of the following directions:   - asc   - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAffiliateLinksUsingGET_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAffiliateLinksUsingGET_0Request($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listAffiliateLinksUsingGET_0'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateLinksUsingGET_0, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listAffiliateLinksUsingGET_0, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/redirects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSummariesUsingGET1_0
     *
     * List Affiliate Summaries
     *
     * @param  string $filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string $order_by Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummariesUsingGET1_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function listSummariesUsingGET1_0($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummariesUsingGET1_0'][0])
    {
        list($response) = $this->listSummariesUsingGET1_0WithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType);
        return $response;
    }

    /**
     * Operation listSummariesUsingGET1_0WithHttpInfo
     *
     * List Affiliate Summaries
     *
     * @param  string $filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string $order_by Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummariesUsingGET1_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSummariesUsingGET1_0WithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummariesUsingGET1_0'][0])
    {
        $request = $this->listSummariesUsingGET1_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSummariesUsingGET1_0Async
     *
     * List Affiliate Summaries
     *
     * @param  string $filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string $order_by Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummariesUsingGET1_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSummariesUsingGET1_0Async($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummariesUsingGET1_0'][0])
    {
        return $this->listSummariesUsingGET1_0AsyncWithHttpInfo($filter, $order_by, $page_size, $page_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSummariesUsingGET1_0AsyncWithHttpInfo
     *
     * List Affiliate Summaries
     *
     * @param  string $filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string $order_by Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummariesUsingGET1_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSummariesUsingGET1_0AsyncWithHttpInfo($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummariesUsingGET1_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ListAffiliateSummariesResponse';
        $request = $this->listSummariesUsingGET1_0Request($filter, $order_by, $page_size, $page_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSummariesUsingGET1_0'
     *
     * @param  string $filter Filter to apply, allowed fields are: - (List[String]) affiliate_ids - (String) since_time - (String) until_time You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of one of the filters with your searched  word, in the encoded form &#x60;%3D%3D&#x60;. For the filters listed above, here are some examples:  - &#x60;filter&#x3D;since_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;until_time%3D%3D2024-09-17T-15:50+00&#x60;  - &#x60;filter&#x3D;affiliate_ids%3D%3D123,456,789&#x60; (optional)
     * @param  string $order_by Attribute and direction to order items. One of the following fields: - affiliate_id - amount_earned - balance - clawbacks One of the following directions: - asc - desc (optional)
     * @param  int $page_size Total number of items to return per page (optional)
     * @param  string $page_token Page token (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listSummariesUsingGET1_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listSummariesUsingGET1_0Request($filter = null, $order_by = null, $page_size = null, $page_token = null, string $contentType = self::contentTypes['listSummariesUsingGET1_0'][0])
    {



        if ($page_size !== null && $page_size > 1000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listSummariesUsingGET1_0, must be smaller than or equal to 1000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling AffiliateApi.listSummariesUsingGET1_0, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/affiliates/summaries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'page_size', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_token,
            'page_token', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchCommissionProgramUsingPATCH
     *
     * Update a Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchCommissionProgramRequest $patch_commission_program_request patchCommissionProgramRequest (required)
     * @param  string[] $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCommissionProgramUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function patchCommissionProgramUsingPATCH($commission_program_id, $patch_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['patchCommissionProgramUsingPATCH'][0])
    {
        list($response) = $this->patchCommissionProgramUsingPATCHWithHttpInfo($commission_program_id, $patch_commission_program_request, $update_mask, $contentType);
        return $response;
    }

    /**
     * Operation patchCommissionProgramUsingPATCHWithHttpInfo
     *
     * Update a Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchCommissionProgramRequest $patch_commission_program_request patchCommissionProgramRequest (required)
     * @param  string[] $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCommissionProgramUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchCommissionProgramUsingPATCHWithHttpInfo($commission_program_id, $patch_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['patchCommissionProgramUsingPATCH'][0])
    {
        $request = $this->patchCommissionProgramUsingPATCHRequest($commission_program_id, $patch_commission_program_request, $update_mask, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchCommissionProgramUsingPATCHAsync
     *
     * Update a Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchCommissionProgramRequest $patch_commission_program_request patchCommissionProgramRequest (required)
     * @param  string[] $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCommissionProgramUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCommissionProgramUsingPATCHAsync($commission_program_id, $patch_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['patchCommissionProgramUsingPATCH'][0])
    {
        return $this->patchCommissionProgramUsingPATCHAsyncWithHttpInfo($commission_program_id, $patch_commission_program_request, $update_mask, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchCommissionProgramUsingPATCHAsyncWithHttpInfo
     *
     * Update a Affiliate Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchCommissionProgramRequest $patch_commission_program_request patchCommissionProgramRequest (required)
     * @param  string[] $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCommissionProgramUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchCommissionProgramUsingPATCHAsyncWithHttpInfo($commission_program_id, $patch_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['patchCommissionProgramUsingPATCH'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateCommissionProgramResponse';
        $request = $this->patchCommissionProgramUsingPATCHRequest($commission_program_id, $patch_commission_program_request, $update_mask, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchCommissionProgramUsingPATCH'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchCommissionProgramRequest $patch_commission_program_request patchCommissionProgramRequest (required)
     * @param  string[] $update_mask An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchCommissionProgramUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchCommissionProgramUsingPATCHRequest($commission_program_id, $patch_commission_program_request, $update_mask = null, string $contentType = self::contentTypes['patchCommissionProgramUsingPATCH'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling patchCommissionProgramUsingPATCH'
            );
        }

        // verify the required parameter 'patch_commission_program_request' is set
        if ($patch_commission_program_request === null || (is_array($patch_commission_program_request) && count($patch_commission_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $patch_commission_program_request when calling patchCommissionProgramUsingPATCH'
            );
        }



        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_commission_program_request));
            } else {
                $httpBody = $patch_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchDefaultCommissionProgramUsingPATCH_0
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchDefaultCommissionProgramRequest $patch_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function patchDefaultCommissionProgramUsingPATCH_0($commission_program_id, $update_mask = null, $patch_default_commission_program_request = null, string $contentType = self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'][0])
    {
        list($response) = $this->patchDefaultCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask, $patch_default_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation patchDefaultCommissionProgramUsingPATCH_0WithHttpInfo
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchDefaultCommissionProgramRequest $patch_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchDefaultCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask = null, $patch_default_commission_program_request = null, string $contentType = self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'][0])
    {
        $request = $this->patchDefaultCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_default_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchDefaultCommissionProgramUsingPATCH_0Async
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchDefaultCommissionProgramRequest $patch_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultCommissionProgramUsingPATCH_0Async($commission_program_id, $update_mask = null, $patch_default_commission_program_request = null, string $contentType = self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'][0])
    {
        return $this->patchDefaultCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask, $patch_default_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchDefaultCommissionProgramUsingPATCH_0AsyncWithHttpInfo
     *
     * Update a Default Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchDefaultCommissionProgramRequest $patch_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchDefaultCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask = null, $patch_default_commission_program_request = null, string $contentType = self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\SetDefaultCommissionProgramResponse';
        $request = $this->patchDefaultCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_default_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchDefaultCommissionProgramUsingPATCH_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchDefaultCommissionProgramRequest $patch_default_commission_program_request Values of the default Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchDefaultCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask = null, $patch_default_commission_program_request = null, string $contentType = self::contentTypes['patchDefaultCommissionProgramUsingPATCH_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling patchDefaultCommissionProgramUsingPATCH_0'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_default_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_default_commission_program_request));
            } else {
                $httpBody = $patch_default_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchProductCommissionProgramUsingPATCH_0
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchProductCommissionProgramRequest $patch_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchProductCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\ProductCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function patchProductCommissionProgramUsingPATCH_0($commission_program_id, $update_mask = null, $patch_product_commission_program_request = null, string $contentType = self::contentTypes['patchProductCommissionProgramUsingPATCH_0'][0])
    {
        list($response) = $this->patchProductCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask, $patch_product_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation patchProductCommissionProgramUsingPATCH_0WithHttpInfo
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchProductCommissionProgramRequest $patch_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchProductCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\ProductCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchProductCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask = null, $patch_product_commission_program_request = null, string $contentType = self::contentTypes['patchProductCommissionProgramUsingPATCH_0'][0])
    {
        $request = $this->patchProductCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_product_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\ProductCommissionProgram' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\ProductCommissionProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchProductCommissionProgramUsingPATCH_0Async
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchProductCommissionProgramRequest $patch_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchProductCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchProductCommissionProgramUsingPATCH_0Async($commission_program_id, $update_mask = null, $patch_product_commission_program_request = null, string $contentType = self::contentTypes['patchProductCommissionProgramUsingPATCH_0'][0])
    {
        return $this->patchProductCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask, $patch_product_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchProductCommissionProgramUsingPATCH_0AsyncWithHttpInfo
     *
     * Update a Product Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchProductCommissionProgramRequest $patch_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchProductCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchProductCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask = null, $patch_product_commission_program_request = null, string $contentType = self::contentTypes['patchProductCommissionProgramUsingPATCH_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\ProductCommissionProgram';
        $request = $this->patchProductCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_product_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchProductCommissionProgramUsingPATCH_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchProductCommissionProgramRequest $patch_product_commission_program_request Values of the product Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchProductCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchProductCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask = null, $patch_product_commission_program_request = null, string $contentType = self::contentTypes['patchProductCommissionProgramUsingPATCH_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling patchProductCommissionProgramUsingPATCH_0'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_product_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_product_commission_program_request));
            } else {
                $httpBody = $patch_product_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchSubscriptionCommissionProgramUsingPATCH_0
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchSubscriptionCommissionProgramRequest $patch_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function patchSubscriptionCommissionProgramUsingPATCH_0($commission_program_id, $update_mask = null, $patch_subscription_commission_program_request = null, string $contentType = self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'][0])
    {
        list($response) = $this->patchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask, $patch_subscription_commission_program_request, $contentType);
        return $response;
    }

    /**
     * Operation patchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchSubscriptionCommissionProgramRequest $patch_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchSubscriptionCommissionProgramUsingPATCH_0WithHttpInfo($commission_program_id, $update_mask = null, $patch_subscription_commission_program_request = null, string $contentType = self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'][0])
    {
        $request = $this->patchSubscriptionCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_subscription_commission_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchSubscriptionCommissionProgramUsingPATCH_0Async
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchSubscriptionCommissionProgramRequest $patch_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSubscriptionCommissionProgramUsingPATCH_0Async($commission_program_id, $update_mask = null, $patch_subscription_commission_program_request = null, string $contentType = self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'][0])
    {
        return $this->patchSubscriptionCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask, $patch_subscription_commission_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchSubscriptionCommissionProgramUsingPATCH_0AsyncWithHttpInfo
     *
     * Update a Subscription Commission Program
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchSubscriptionCommissionProgramRequest $patch_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchSubscriptionCommissionProgramUsingPATCH_0AsyncWithHttpInfo($commission_program_id, $update_mask = null, $patch_subscription_commission_program_request = null, string $contentType = self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\SubscriptionCommissionProgram';
        $request = $this->patchSubscriptionCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask, $patch_subscription_commission_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchSubscriptionCommissionProgramUsingPATCH_0'
     *
     * @param  string $commission_program_id commission_program_id (required)
     * @param  string[] $update_mask update_mask (optional)
     * @param  \Com\Keap\Sdk\Core\Model\PatchSubscriptionCommissionProgramRequest $patch_subscription_commission_program_request Values of the subscription Commission Program (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchSubscriptionCommissionProgramUsingPATCH_0Request($commission_program_id, $update_mask = null, $patch_subscription_commission_program_request = null, string $contentType = self::contentTypes['patchSubscriptionCommissionProgramUsingPATCH_0'][0])
    {

        // verify the required parameter 'commission_program_id' is set
        if ($commission_program_id === null || (is_array($commission_program_id) && count($commission_program_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_program_id when calling patchSubscriptionCommissionProgramUsingPATCH_0'
            );
        }




        $resourcePath = '/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($commission_program_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_program_id' . '}',
                ObjectSerializer::toPathValue($commission_program_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_subscription_commission_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_subscription_commission_program_request));
            } else {
                $httpBody = $patch_subscription_commission_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeAffiliateFromProgramUsingPOST_0
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateRemoveFromProgramRequest $remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeAffiliateFromProgramUsingPOST_0($id, $remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgramUsingPOST_0'][0])
    {
        $this->removeAffiliateFromProgramUsingPOST_0WithHttpInfo($id, $remove_from_program_request, $contentType);
    }

    /**
     * Operation removeAffiliateFromProgramUsingPOST_0WithHttpInfo
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateRemoveFromProgramRequest $remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAffiliateFromProgramUsingPOST_0WithHttpInfo($id, $remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgramUsingPOST_0'][0])
    {
        $request = $this->removeAffiliateFromProgramUsingPOST_0Request($id, $remove_from_program_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeAffiliateFromProgramUsingPOST_0Async
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateRemoveFromProgramRequest $remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAffiliateFromProgramUsingPOST_0Async($id, $remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgramUsingPOST_0'][0])
    {
        return $this->removeAffiliateFromProgramUsingPOST_0AsyncWithHttpInfo($id, $remove_from_program_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeAffiliateFromProgramUsingPOST_0AsyncWithHttpInfo
     *
     * Remove an Affiliate from a Commission Program
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateRemoveFromProgramRequest $remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeAffiliateFromProgramUsingPOST_0AsyncWithHttpInfo($id, $remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgramUsingPOST_0'][0])
    {
        $returnType = '';
        $request = $this->removeAffiliateFromProgramUsingPOST_0Request($id, $remove_from_program_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeAffiliateFromProgramUsingPOST_0'
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\AffiliateRemoveFromProgramRequest $remove_from_program_request removeFromProgramRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeAffiliateFromProgramUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeAffiliateFromProgramUsingPOST_0Request($id, $remove_from_program_request, string $contentType = self::contentTypes['removeAffiliateFromProgramUsingPOST_0'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling removeAffiliateFromProgramUsingPOST_0'
            );
        }

        // verify the required parameter 'remove_from_program_request' is set
        if ($remove_from_program_request === null || (is_array($remove_from_program_request) && count($remove_from_program_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $remove_from_program_request when calling removeAffiliateFromProgramUsingPOST_0'
            );
        }


        $resourcePath = '/v2/affiliates/{id}:removeFromProgram';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($remove_from_program_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($remove_from_program_request));
            } else {
                $httpBody = $remove_from_program_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'][0])
    {
        $this->removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo($commission_id, $delete_subscription_plan_commission_request, $contentType);
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0WithHttpInfo($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'][0])
    {
        $request = $this->removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0Request($commission_id, $delete_subscription_plan_commission_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0Async
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0Async($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'][0])
    {
        return $this->removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0AsyncWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0AsyncWithHttpInfo
     *
     * Remove a Subscription from a Commission Program
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0AsyncWithHttpInfo($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'][0])
    {
        $returnType = '';
        $request = $this->removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0Request($commission_id, $delete_subscription_plan_commission_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'
     *
     * @param  string $commission_id commission_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\DeleteSubscriptionPlanCommissionRequest $delete_subscription_plan_commission_request deleteSubscriptionPlanCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0Request($commission_id, $delete_subscription_plan_commission_request, string $contentType = self::contentTypes['removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'][0])
    {

        // verify the required parameter 'commission_id' is set
        if ($commission_id === null || (is_array($commission_id) && count($commission_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $commission_id when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'
            );
        }

        // verify the required parameter 'delete_subscription_plan_commission_request' is set
        if ($delete_subscription_plan_commission_request === null || (is_array($delete_subscription_plan_commission_request) && count($delete_subscription_plan_commission_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_subscription_plan_commission_request when calling removeSubscriptionPlanCommissionFromCommissionsUsingPOST_0'
            );
        }


        $resourcePath = '/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($commission_id !== null) {
            $resourcePath = str_replace(
                '{' . 'commission_id' . '}',
                ObjectSerializer::toPathValue($commission_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_subscription_plan_commission_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_subscription_plan_commission_request));
            } else {
                $httpBody = $delete_subscription_plan_commission_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAffiliateCustomFieldUsingPATCH_0
     *
     * Update a Custom Field
     *
     * @param  string $custom_field_id custom_field_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\UpdateCustomFieldMetaDataRequest $request request (required)
     * @param  string[] $update_mask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\CustomFieldMetaData|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function updateAffiliateCustomFieldUsingPATCH_0($custom_field_id, $request, $update_mask = null, string $contentType = self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'][0])
    {
        list($response) = $this->updateAffiliateCustomFieldUsingPATCH_0WithHttpInfo($custom_field_id, $request, $update_mask, $contentType);
        return $response;
    }

    /**
     * Operation updateAffiliateCustomFieldUsingPATCH_0WithHttpInfo
     *
     * Update a Custom Field
     *
     * @param  string $custom_field_id custom_field_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\UpdateCustomFieldMetaDataRequest $request request (required)
     * @param  string[] $update_mask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\CustomFieldMetaData|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAffiliateCustomFieldUsingPATCH_0WithHttpInfo($custom_field_id, $request, $update_mask = null, string $contentType = self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'][0])
    {
        $request = $this->updateAffiliateCustomFieldUsingPATCH_0Request($custom_field_id, $request, $update_mask, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\CustomFieldMetaData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\CustomFieldMetaData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAffiliateCustomFieldUsingPATCH_0Async
     *
     * Update a Custom Field
     *
     * @param  string $custom_field_id custom_field_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\UpdateCustomFieldMetaDataRequest $request request (required)
     * @param  string[] $update_mask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateCustomFieldUsingPATCH_0Async($custom_field_id, $request, $update_mask = null, string $contentType = self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'][0])
    {
        return $this->updateAffiliateCustomFieldUsingPATCH_0AsyncWithHttpInfo($custom_field_id, $request, $update_mask, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAffiliateCustomFieldUsingPATCH_0AsyncWithHttpInfo
     *
     * Update a Custom Field
     *
     * @param  string $custom_field_id custom_field_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\UpdateCustomFieldMetaDataRequest $request request (required)
     * @param  string[] $update_mask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateCustomFieldUsingPATCH_0AsyncWithHttpInfo($custom_field_id, $request, $update_mask = null, string $contentType = self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\CustomFieldMetaData';
        $request = $this->updateAffiliateCustomFieldUsingPATCH_0Request($custom_field_id, $request, $update_mask, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAffiliateCustomFieldUsingPATCH_0'
     *
     * @param  string $custom_field_id custom_field_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\UpdateCustomFieldMetaDataRequest $request request (required)
     * @param  string[] $update_mask An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAffiliateCustomFieldUsingPATCH_0Request($custom_field_id, $request, $update_mask = null, string $contentType = self::contentTypes['updateAffiliateCustomFieldUsingPATCH_0'][0])
    {

        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null || (is_array($custom_field_id) && count($custom_field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_field_id when calling updateAffiliateCustomFieldUsingPATCH_0'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling updateAffiliateCustomFieldUsingPATCH_0'
            );
        }



        $resourcePath = '/v2/affiliates/model/customFields/{custom_field_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $update_mask,
            'update_mask', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_field_id' . '}',
                ObjectSerializer::toPathValue($custom_field_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAffiliateUsingPATCH
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchAffiliateRequest $patch_affiliate Affiliate request to patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function updateAffiliateUsingPATCH($id, $patch_affiliate = null, string $contentType = self::contentTypes['updateAffiliateUsingPATCH'][0])
    {
        list($response) = $this->updateAffiliateUsingPATCHWithHttpInfo($id, $patch_affiliate, $contentType);
        return $response;
    }

    /**
     * Operation updateAffiliateUsingPATCHWithHttpInfo
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchAffiliateRequest $patch_affiliate Affiliate request to patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateUsingPATCH'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\RestAffiliate|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAffiliateUsingPATCHWithHttpInfo($id, $patch_affiliate = null, string $contentType = self::contentTypes['updateAffiliateUsingPATCH'][0])
    {
        $request = $this->updateAffiliateUsingPATCHRequest($id, $patch_affiliate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\RestAffiliate' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\RestAffiliate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\RestAffiliate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAffiliateUsingPATCHAsync
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchAffiliateRequest $patch_affiliate Affiliate request to patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateUsingPATCHAsync($id, $patch_affiliate = null, string $contentType = self::contentTypes['updateAffiliateUsingPATCH'][0])
    {
        return $this->updateAffiliateUsingPATCHAsyncWithHttpInfo($id, $patch_affiliate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAffiliateUsingPATCHAsyncWithHttpInfo
     *
     * Update an Affiliate
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchAffiliateRequest $patch_affiliate Affiliate request to patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAffiliateUsingPATCHAsyncWithHttpInfo($id, $patch_affiliate = null, string $contentType = self::contentTypes['updateAffiliateUsingPATCH'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\RestAffiliate';
        $request = $this->updateAffiliateUsingPATCHRequest($id, $patch_affiliate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAffiliateUsingPATCH'
     *
     * @param  string $id id (required)
     * @param  \Com\Keap\Sdk\Core\Model\PatchAffiliateRequest $patch_affiliate Affiliate request to patch (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAffiliateUsingPATCH'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAffiliateUsingPATCHRequest($id, $patch_affiliate = null, string $contentType = self::contentTypes['updateAffiliateUsingPATCH'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateAffiliateUsingPATCH'
            );
        }



        $resourcePath = '/v2/affiliates/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($patch_affiliate)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($patch_affiliate));
            } else {
                $httpBody = $patch_affiliate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateRedirectLinkUsingPATCH_0
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLinkUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error
     */
    public function updateRedirectLinkUsingPATCH_0($redirect_id, $request, string $contentType = self::contentTypes['updateRedirectLinkUsingPATCH_0'][0])
    {
        list($response) = $this->updateRedirectLinkUsingPATCH_0WithHttpInfo($redirect_id, $request, $contentType);
        return $response;
    }

    /**
     * Operation updateRedirectLinkUsingPATCH_0WithHttpInfo
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLinkUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \Com\Keap\Sdk\Core\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Com\Keap\Sdk\Core\Model\AffiliateLink|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error|\Com\Keap\Sdk\Core\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRedirectLinkUsingPATCH_0WithHttpInfo($redirect_id, $request, string $contentType = self::contentTypes['updateRedirectLinkUsingPATCH_0'][0])
    {
        $request = $this->updateRedirectLinkUsingPATCH_0Request($redirect_id, $request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\AffiliateLink' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\AffiliateLink', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Com\Keap\Sdk\Core\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Com\Keap\Sdk\Core\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Com\Keap\Sdk\Core\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\AffiliateLink',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Com\Keap\Sdk\Core\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateRedirectLinkUsingPATCH_0Async
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLinkUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedirectLinkUsingPATCH_0Async($redirect_id, $request, string $contentType = self::contentTypes['updateRedirectLinkUsingPATCH_0'][0])
    {
        return $this->updateRedirectLinkUsingPATCH_0AsyncWithHttpInfo($redirect_id, $request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateRedirectLinkUsingPATCH_0AsyncWithHttpInfo
     *
     * Update an Affiliate Link
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLinkUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateRedirectLinkUsingPATCH_0AsyncWithHttpInfo($redirect_id, $request, string $contentType = self::contentTypes['updateRedirectLinkUsingPATCH_0'][0])
    {
        $returnType = '\Com\Keap\Sdk\Core\Model\AffiliateLink';
        $request = $this->updateRedirectLinkUsingPATCH_0Request($redirect_id, $request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateRedirectLinkUsingPATCH_0'
     *
     * @param  string $redirect_id redirect_id (required)
     * @param  \Com\Keap\Sdk\Core\Model\CreateOrPatchAffiliateLinkRequest $request request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateRedirectLinkUsingPATCH_0'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateRedirectLinkUsingPATCH_0Request($redirect_id, $request, string $contentType = self::contentTypes['updateRedirectLinkUsingPATCH_0'][0])
    {

        // verify the required parameter 'redirect_id' is set
        if ($redirect_id === null || (is_array($redirect_id) && count($redirect_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_id when calling updateRedirectLinkUsingPATCH_0'
            );
        }

        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling updateRedirectLinkUsingPATCH_0'
            );
        }


        $resourcePath = '/v2/affiliates/redirects/{redirect_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($redirect_id !== null) {
            $resourcePath = str_replace(
                '{' . 'redirect_id' . '}',
                ObjectSerializer::toPathValue($redirect_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($request));
            } else {
                $httpBody = $request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
