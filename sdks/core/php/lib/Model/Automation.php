<?php
/**
 * Automation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Sdk\Core\Model;

use \ArrayAccess;
use \Keap\Sdk\Core\ObjectSerializer;

/**
 * Automation Class Doc Comment
 *
 * @category Class
 * @package  Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Automation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Automation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active_contacts' => 'int',
        'categories' => 'string[]',
        'current_edit_lock_status' => '\Keap\Sdk\Core\Model\AutomationLockStatus',
        'error_message' => 'string',
        'id' => 'string',
        'locked' => 'bool',
        'published_by' => 'string',
        'published_date' => '\DateTime',
        'published_timezone' => 'string',
        'status' => 'string',
        'title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active_contacts' => 'int32',
        'categories' => null,
        'current_edit_lock_status' => null,
        'error_message' => null,
        'id' => null,
        'locked' => null,
        'published_by' => null,
        'published_date' => 'date-time',
        'published_timezone' => null,
        'status' => null,
        'title' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'active_contacts' => false,
        'categories' => false,
        'current_edit_lock_status' => false,
        'error_message' => false,
        'id' => false,
        'locked' => false,
        'published_by' => false,
        'published_date' => false,
        'published_timezone' => false,
        'status' => false,
        'title' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_contacts' => 'active_contacts',
        'categories' => 'categories',
        'current_edit_lock_status' => 'current_edit_lock_status',
        'error_message' => 'error_message',
        'id' => 'id',
        'locked' => 'locked',
        'published_by' => 'published_by',
        'published_date' => 'published_date',
        'published_timezone' => 'published_timezone',
        'status' => 'status',
        'title' => 'title'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_contacts' => 'setActiveContacts',
        'categories' => 'setCategories',
        'current_edit_lock_status' => 'setCurrentEditLockStatus',
        'error_message' => 'setErrorMessage',
        'id' => 'setId',
        'locked' => 'setLocked',
        'published_by' => 'setPublishedBy',
        'published_date' => 'setPublishedDate',
        'published_timezone' => 'setPublishedTimezone',
        'status' => 'setStatus',
        'title' => 'setTitle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_contacts' => 'getActiveContacts',
        'categories' => 'getCategories',
        'current_edit_lock_status' => 'getCurrentEditLockStatus',
        'error_message' => 'getErrorMessage',
        'id' => 'getId',
        'locked' => 'getLocked',
        'published_by' => 'getPublishedBy',
        'published_date' => 'getPublishedDate',
        'published_timezone' => 'getPublishedTimezone',
        'status' => 'getStatus',
        'title' => 'getTitle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('active_contacts', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('current_edit_lock_status', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('locked', $data ?? [], null);
        $this->setIfExists('published_by', $data ?? [], null);
        $this->setIfExists('published_date', $data ?? [], null);
        $this->setIfExists('published_timezone', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_contacts
     *
     * @return int|null
     */
    public function getActiveContacts()
    {
        return $this->container['active_contacts'];
    }

    /**
     * Sets active_contacts
     *
     * @param int|null $active_contacts active_contacts
     *
     * @return self
     */
    public function setActiveContacts($active_contacts)
    {
        if (is_null($active_contacts)) {
            throw new \InvalidArgumentException('non-nullable active_contacts cannot be null');
        }
        $this->container['active_contacts'] = $active_contacts;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets current_edit_lock_status
     *
     * @return \Keap\Sdk\Core\Model\AutomationLockStatus|null
     */
    public function getCurrentEditLockStatus()
    {
        return $this->container['current_edit_lock_status'];
    }

    /**
     * Sets current_edit_lock_status
     *
     * @param \Keap\Sdk\Core\Model\AutomationLockStatus|null $current_edit_lock_status current_edit_lock_status
     *
     * @return self
     */
    public function setCurrentEditLockStatus($current_edit_lock_status)
    {
        if (is_null($current_edit_lock_status)) {
            throw new \InvalidArgumentException('non-nullable current_edit_lock_status cannot be null');
        }
        $this->container['current_edit_lock_status'] = $current_edit_lock_status;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message error_message
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool|null
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool|null $locked locked
     *
     * @return self
     */
    public function setLocked($locked)
    {
        if (is_null($locked)) {
            throw new \InvalidArgumentException('non-nullable locked cannot be null');
        }
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets published_by
     *
     * @return string|null
     */
    public function getPublishedBy()
    {
        return $this->container['published_by'];
    }

    /**
     * Sets published_by
     *
     * @param string|null $published_by published_by
     *
     * @return self
     */
    public function setPublishedBy($published_by)
    {
        if (is_null($published_by)) {
            throw new \InvalidArgumentException('non-nullable published_by cannot be null');
        }
        $this->container['published_by'] = $published_by;

        return $this;
    }

    /**
     * Gets published_date
     *
     * @return \DateTime|null
     */
    public function getPublishedDate()
    {
        return $this->container['published_date'];
    }

    /**
     * Sets published_date
     *
     * @param \DateTime|null $published_date published_date
     *
     * @return self
     */
    public function setPublishedDate($published_date)
    {
        if (is_null($published_date)) {
            throw new \InvalidArgumentException('non-nullable published_date cannot be null');
        }
        $this->container['published_date'] = $published_date;

        return $this;
    }

    /**
     * Gets published_timezone
     *
     * @return string|null
     */
    public function getPublishedTimezone()
    {
        return $this->container['published_timezone'];
    }

    /**
     * Sets published_timezone
     *
     * @param string|null $published_timezone published_timezone
     *
     * @return self
     */
    public function setPublishedTimezone($published_timezone)
    {
        if (is_null($published_timezone)) {
            throw new \InvalidArgumentException('non-nullable published_timezone cannot be null');
        }
        $this->container['published_timezone'] = $published_timezone;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


