<?php
/**
 * FileMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Com\Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.768375
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Com\Keap\Sdk\Core\Model;

use \ArrayAccess;
use \Com\Keap\Sdk\Core\ObjectSerializer;

/**
 * FileMetadata Class Doc Comment
 *
 * @category Class
 * @package  Com\Keap\Sdk\Core
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FileMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FileMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => 'string',
        'contact_id' => 'string',
        'created_by_id' => 'string',
        'created_time' => 'string',
        'file_box_type' => 'string',
        'file_name' => 'string',
        'file_size' => 'int',
        'id' => 'string',
        'is_public' => 'bool',
        'remote_file_key' => 'string',
        'updated_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'contact_id' => null,
        'created_by_id' => null,
        'created_time' => null,
        'file_box_type' => null,
        'file_name' => null,
        'file_size' => 'int64',
        'id' => null,
        'is_public' => null,
        'remote_file_key' => null,
        'updated_time' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
        'contact_id' => false,
        'created_by_id' => false,
        'created_time' => false,
        'file_box_type' => false,
        'file_name' => false,
        'file_size' => false,
        'id' => false,
        'is_public' => false,
        'remote_file_key' => false,
        'updated_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'contact_id' => 'contact_id',
        'created_by_id' => 'created_by_id',
        'created_time' => 'created_time',
        'file_box_type' => 'file_box_type',
        'file_name' => 'file_name',
        'file_size' => 'file_size',
        'id' => 'id',
        'is_public' => 'is_public',
        'remote_file_key' => 'remote_file_key',
        'updated_time' => 'updated_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'contact_id' => 'setContactId',
        'created_by_id' => 'setCreatedById',
        'created_time' => 'setCreatedTime',
        'file_box_type' => 'setFileBoxType',
        'file_name' => 'setFileName',
        'file_size' => 'setFileSize',
        'id' => 'setId',
        'is_public' => 'setIsPublic',
        'remote_file_key' => 'setRemoteFileKey',
        'updated_time' => 'setUpdatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'contact_id' => 'getContactId',
        'created_by_id' => 'getCreatedById',
        'created_time' => 'getCreatedTime',
        'file_box_type' => 'getFileBoxType',
        'file_name' => 'getFileName',
        'file_size' => 'getFileSize',
        'id' => 'getId',
        'is_public' => 'getIsPublic',
        'remote_file_key' => 'getRemoteFileKey',
        'updated_time' => 'getUpdatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CATEGORY_ATTACHMENTS = 'ATTACHMENTS';
    public const CATEGORY_CART = 'CART';
    public const CATEGORY_DOCUMENTS = 'DOCUMENTS';
    public const CATEGORY_HIDDEN = 'HIDDEN';
    public const CATEGORY_INVOICE = 'INVOICE';
    public const CATEGORY_LOGO = 'LOGO';
    public const CATEGORY_TICKETS = 'TICKETS';
    public const CATEGORY_WEB_FORM = 'WEB_FORM';
    public const CATEGORY_FUNNEL = 'FUNNEL';
    public const FILE_BOX_TYPE_APPLICATION = 'APPLICATION';
    public const FILE_BOX_TYPE_IMAGE = 'IMAGE';
    public const FILE_BOX_TYPE_FAX = 'FAX';
    public const FILE_BOX_TYPE_ATTACHMENT = 'ATTACHMENT';
    public const FILE_BOX_TYPE_TICKET = 'TICKET';
    public const FILE_BOX_TYPE_CONTACT = 'CONTACT';
    public const FILE_BOX_TYPE_DIGITAL_PRODUCT = 'DIGITAL_PRODUCT';
    public const FILE_BOX_TYPE_IMPORT = 'IMPORT';
    public const FILE_BOX_TYPE_HIDDEN = 'HIDDEN';
    public const FILE_BOX_TYPE_WEB_FORM = 'WEB_FORM';
    public const FILE_BOX_TYPE_STYLED_CART = 'STYLED_CART';
    public const FILE_BOX_TYPE_RESAMPLED_IMAGE = 'RESAMPLED_IMAGE';
    public const FILE_BOX_TYPE_TEMPLATE_THUMBNAIL = 'TEMPLATE_THUMBNAIL';
    public const FILE_BOX_TYPE_FUNNEL = 'FUNNEL';
    public const FILE_BOX_TYPE_LOGO_THUMBNAIL = 'LOGO_THUMBNAIL';
    public const FILE_BOX_TYPE_UNLAYER = 'UNLAYER';
    public const FILE_BOX_TYPE_BRANDING_CENTER_LOGO = 'BRANDING_CENTER_LOGO';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_ATTACHMENTS,
            self::CATEGORY_CART,
            self::CATEGORY_DOCUMENTS,
            self::CATEGORY_HIDDEN,
            self::CATEGORY_INVOICE,
            self::CATEGORY_LOGO,
            self::CATEGORY_TICKETS,
            self::CATEGORY_WEB_FORM,
            self::CATEGORY_FUNNEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileBoxTypeAllowableValues()
    {
        return [
            self::FILE_BOX_TYPE_APPLICATION,
            self::FILE_BOX_TYPE_IMAGE,
            self::FILE_BOX_TYPE_FAX,
            self::FILE_BOX_TYPE_ATTACHMENT,
            self::FILE_BOX_TYPE_TICKET,
            self::FILE_BOX_TYPE_CONTACT,
            self::FILE_BOX_TYPE_DIGITAL_PRODUCT,
            self::FILE_BOX_TYPE_IMPORT,
            self::FILE_BOX_TYPE_HIDDEN,
            self::FILE_BOX_TYPE_WEB_FORM,
            self::FILE_BOX_TYPE_STYLED_CART,
            self::FILE_BOX_TYPE_RESAMPLED_IMAGE,
            self::FILE_BOX_TYPE_TEMPLATE_THUMBNAIL,
            self::FILE_BOX_TYPE_FUNNEL,
            self::FILE_BOX_TYPE_LOGO_THUMBNAIL,
            self::FILE_BOX_TYPE_UNLAYER,
            self::FILE_BOX_TYPE_BRANDING_CENTER_LOGO,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('created_by_id', $data ?? [], null);
        $this->setIfExists('created_time', $data ?? [], null);
        $this->setIfExists('file_box_type', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('file_size', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('remote_file_key', $data ?? [], null);
        $this->setIfExists('updated_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'category', must be one of '%s'",
                $this->container['category'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFileBoxTypeAllowableValues();
        if (!is_null($this->container['file_box_type']) && !in_array($this->container['file_box_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'file_box_type', must be one of '%s'",
                $this->container['file_box_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $allowedValues = $this->getCategoryAllowableValues();
        if (!in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'category', must be one of '%s'",
                    $category,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets created_by_id
     *
     * @return string|null
     */
    public function getCreatedById()
    {
        return $this->container['created_by_id'];
    }

    /**
     * Sets created_by_id
     *
     * @param string|null $created_by_id created_by_id
     *
     * @return self
     */
    public function setCreatedById($created_by_id)
    {
        if (is_null($created_by_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_id cannot be null');
        }
        $this->container['created_by_id'] = $created_by_id;

        return $this;
    }

    /**
     * Gets created_time
     *
     * @return string|null
     */
    public function getCreatedTime()
    {
        return $this->container['created_time'];
    }

    /**
     * Sets created_time
     *
     * @param string|null $created_time created_time
     *
     * @return self
     */
    public function setCreatedTime($created_time)
    {
        if (is_null($created_time)) {
            throw new \InvalidArgumentException('non-nullable created_time cannot be null');
        }
        $this->container['created_time'] = $created_time;

        return $this;
    }

    /**
     * Gets file_box_type
     *
     * @return string|null
     */
    public function getFileBoxType()
    {
        return $this->container['file_box_type'];
    }

    /**
     * Sets file_box_type
     *
     * @param string|null $file_box_type file_box_type
     *
     * @return self
     */
    public function setFileBoxType($file_box_type)
    {
        if (is_null($file_box_type)) {
            throw new \InvalidArgumentException('non-nullable file_box_type cannot be null');
        }
        $allowedValues = $this->getFileBoxTypeAllowableValues();
        if (!in_array($file_box_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'file_box_type', must be one of '%s'",
                    $file_box_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['file_box_type'] = $file_box_type;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name file_name
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return int|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param int|null $file_size file_size
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        if (is_null($file_size)) {
            throw new \InvalidArgumentException('non-nullable file_size cannot be null');
        }
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets remote_file_key
     *
     * @return string|null
     */
    public function getRemoteFileKey()
    {
        return $this->container['remote_file_key'];
    }

    /**
     * Sets remote_file_key
     *
     * @param string|null $remote_file_key remote_file_key
     *
     * @return self
     */
    public function setRemoteFileKey($remote_file_key)
    {
        if (is_null($remote_file_key)) {
            throw new \InvalidArgumentException('non-nullable remote_file_key cannot be null');
        }
        $this->container['remote_file_key'] = $remote_file_key;

        return $this;
    }

    /**
     * Gets updated_time
     *
     * @return string|null
     */
    public function getUpdatedTime()
    {
        return $this->container['updated_time'];
    }

    /**
     * Sets updated_time
     *
     * @param string|null $updated_time updated_time
     *
     * @return self
     */
    public function setUpdatedTime($updated_time)
    {
        if (is_null($updated_time)) {
            throw new \InvalidArgumentException('non-nullable updated_time cannot be null');
        }
        $this->container['updated_time'] = $updated_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


