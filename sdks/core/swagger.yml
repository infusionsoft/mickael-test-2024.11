{
  "swagger": "2.0",
  "info": {
    "description": "Keap REST Core Service",
    "version": "2.70.0.751586-hf-202412120145",
    "title": "Keap REST API",
    "termsOfService": "https://keap.com/legal",
    "contact": {
      "name": "Keap",
      "url": "https://developer.keap.com/get-support/",
      "email": "api@keap.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "host": "api.infusionsoft.com",
  "basePath": "/crm/rest/app",
  "tags": [
    {
      "name": "Affiliate",
      "description": "Rest Affiliate Controller"
    },
    {
      "name": "Automation",
      "description": "Automations-Endpoint"
    },
    {
      "name": "AutomationCategory",
      "description": "Rest Automation Category Controller"
    },
    {
      "name": "Business Profile",
      "description": "Business-Profile-Endpoint"
    },
    {
      "name": "Campaign",
      "description": "Campaigns-Endpoint"
    },
    {
      "name": "Category Discount",
      "description": "Rest Category Discount Controller"
    },
    {
      "name": "Company",
      "description": "Rest Company Controller"
    },
    {
      "name": "Contact",
      "description": "Rest Contact Controller"
    },
    {
      "name": "Email",
      "description": "Rest Email Controller"
    },
    {
      "name": "Email Address",
      "description": "Rest Api Email Address Controller"
    },
    {
      "name": "Free Trial Discount",
      "description": "Rest Free Trial Discount Controller"
    },
    {
      "name": "FunnelIntegration",
      "description": "Funnel Integrations"
    },
    {
      "name": "Landing Pages",
      "description": "Rest Landing Page Controller"
    },
    {
      "name": "Lead Sources",
      "description": "Rest Lead Source Controller"
    },
    {
      "name": "Locale",
      "description": "Rest Locale Controller"
    },
    {
      "name": "Merchant",
      "description": "Rest Merchant Controller"
    },
    {
      "name": "Note",
      "description": "Rest Note Controller"
    },
    {
      "name": "Opportunity",
      "description": "Rest Opportunity Controller"
    },
    {
      "name": "Order Total Discount",
      "description": "Rest Order Total Discount Controller"
    },
    {
      "name": "Orders",
      "description": "Rest Order Controller"
    },
    {
      "name": "PaymentMethodConfig",
      "description": "Rest Payment Method Config Controller"
    },
    {
      "name": "Product",
      "description": "Product-V2-Endpoint"
    },
    {
      "name": "Referral",
      "description": "Referrals-V2-Endpoint"
    },
    {
      "name": "Reporting",
      "description": "Rest Reporting Controller"
    },
    {
      "name": "Sales",
      "description": "Sale-V2-Endpoint"
    },
    {
      "name": "Settings",
      "description": "Rest Setting Controller"
    },
    {
      "name": "Shipping",
      "description": "Rest Shipping Methods Controller"
    },
    {
      "name": "Shipping Discount",
      "description": "Rest Shipping Discount Controller"
    },
    {
      "name": "Subscription Plans",
      "description": "Rest Subscription Plan Controller"
    },
    {
      "name": "Subscriptions",
      "description": "Rest Subscriptions Controller"
    },
    {
      "name": "Tags",
      "description": "Rest Tag Controller"
    },
    {
      "name": "Task",
      "description": "Rest Task Controller"
    },
    {
      "name": "Users",
      "description": "Rest User Controller"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v2/affiliates": {
      "post": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Create an Affiliate",
        "description": "Creates a single Affiliate",
        "operationId": "addAffiliateUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "insertAffiliate",
            "description": "Affiliate request to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateAffiliateRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestAffiliate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "List Affiliate Commission Programs",
        "description": "Retrieves a list of Affiliate Commission Programs",
        "operationId": "listAffiliateCommissionProgramsUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n- (String) affiliate_id \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \n- date_created  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAffiliateCommissionProgramsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Create an Affiliate Commission Program",
        "description": "Creates an Affiliate Commission Program",
        "operationId": "addCommissionProgramUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "Insert Commission Program",
            "description": "Commission Program to insert",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCommissionProgramRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AffiliateCommissionProgramResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/defaultCommissionProgram/{commission_program_id}": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Create a Default Commission Program",
        "description": "Creates a Default Commission Program",
        "operationId": "createDefaultCommissionProgramUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "CreateDefaultCommissionProgramRequest",
            "description": "Values of the Default Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDefaultCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SetDefaultCommissionProgramResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/defaultCommissionPrograms/{commission_program_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Update a Default Commission Program",
        "description": "Updates a Default Commission Program",
        "operationId": "patchDefaultCommissionProgramUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "PatchDefaultCommissionProgramRequest",
            "description": "Values of the default Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchDefaultCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "update_mask",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SetDefaultCommissionProgramResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/productCommissionProgram/{commission_program_id}": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Assign a Product Commission Program",
        "description": "Assigns a Product Commission Program to a Product",
        "operationId": "assignProductCommissionProgramUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "Product Commission Program",
            "description": "Product Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateProductCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ProductCommissionProgram"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/productCommissionPrograms/{commission_program_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Update a Product Commission Program",
        "description": "Updates a Product Commission Program",
        "operationId": "patchProductCommissionProgramUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "PatchProductCommissionProgramRequest",
            "description": "Values of the product Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchProductCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "update_mask",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProductCommissionProgram"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/subscriptionCommissionProgram/{commission_program_id}": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Assign a Subscription Commission Program",
        "description": "Assigns a Subscription Commission Program to a Subscription",
        "operationId": "assignSubscriptionCommissionProgramUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "Subscription Commission Program",
            "description": "Subscription Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SubscriptionCommissionProgram"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/subscriptionCommissionPrograms/{commission_program_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Update a Subscription Commission Program",
        "description": "Updates a Subscription Commission Program",
        "operationId": "patchSubscriptionCommissionProgramUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "PatchSubscriptionCommissionProgramRequest",
            "description": "Values of the subscription Commission Program",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchSubscriptionCommissionProgramRequest"
            }
          },
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "update_mask",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SubscriptionCommissionProgram"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/{commission_id}:removeSubscriptionCommission": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Remove a Subscription from a Commission Program",
        "description": "Removes a Subscription from a Commission Program",
        "operationId": "removeSubscriptionPlanCommissionFromCommissionsUsingPOST",
        "parameters": [
          {
            "name": "commission_id",
            "in": "path",
            "description": "commission_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "deleteSubscriptionPlanCommissionRequest",
            "description": "deleteSubscriptionPlanCommissionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSubscriptionPlanCommissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/commissionPrograms/{commission_program_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Retrieve a Commission Program",
        "description": "Retrieves a single Commission Program",
        "operationId": "getCommissionProgramUsingGET",
        "parameters": [
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateProgramV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Delete a Commission Program",
        "description": "Deletes a Commission Program",
        "operationId": "deleteAffiliateCommissionProgramUsingDELETE",
        "parameters": [
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Update a Affiliate Commission Program",
        "description": "Updates the properties of an Affiliate Commission Program",
        "operationId": "patchCommissionProgramUsingPATCH",
        "parameters": [
          {
            "name": "commission_program_id",
            "in": "path",
            "description": "commission_program_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "patchCommissionProgramRequest",
            "description": "patchCommissionProgramRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchCommissionProgramRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "notes",
              "priority"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateCommissionProgramResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/model": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Retrieve Affiliate Model",
        "description": "Get the custom fields and optional properties for the Affiliate object",
        "operationId": "getAffiliateCustomFieldsUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Create an Affiliate Custom Field",
        "description": "Creates a single Affiliate Custom Field",
        "operationId": "createAffiliateCustomFieldUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/model/customFields/{custom_field_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Update a Custom Field",
        "description": "Updates a custom field of the specified type and options to the Affiliate object.",
        "operationId": "updateAffiliateCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/redirects": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "List Affiliate Links",
        "description": "Retrieves a list of Affiliate Links",
        "operationId": "listAffiliateLinksUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n- (String) affiliate_id \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \n- date_created  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAffiliateLinksResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Create an Affiliate Link",
        "description": "Creates a single Affiliate Link",
        "operationId": "createRedirectLinkUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrPatchAffiliateLinkRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/AffiliateLink"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/redirects/{redirect_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Retrieve an Affiliate Link",
        "description": "Retrieves information about a single Affiliate Link",
        "operationId": "getRedirectLinkUsingGET",
        "parameters": [
          {
            "name": "redirect_id",
            "in": "path",
            "description": "redirect_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateLink"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Delete an Affiliate Link",
        "description": "Deletes an Affiliate Link",
        "operationId": "deleteRedirectLinkUsingDELETE",
        "parameters": [
          {
            "name": "redirect_id",
            "in": "path",
            "description": "redirect_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Update an Affiliate Link",
        "description": "Updates an Affiliate Link",
        "operationId": "updateRedirectLinkUsingPATCH",
        "parameters": [
          {
            "name": "redirect_id",
            "in": "path",
            "description": "redirect_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrPatchAffiliateLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateLink"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/summaries": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "List Affiliate Summaries",
        "description": "Retrieve a list of Affiliate Summaries",
        "operationId": "listSummariesUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (List[String]) affiliate_ids\n- (String) since_time\n- (String) until_time\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\n word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n - `filter=since_time%3D%3D2024-09-17T-15:50+00`\n - `filter=until_time%3D%3D2024-09-17T-15:50+00`\n - `filter=affiliate_ids%3D%3D123,456,789`\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.\nOne of the following fields:\n- affiliate_id\n- amount_earned\n- balance\n- clawbacks\nOne of the following directions:\n- asc\n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAffiliateSummariesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/{affiliate_id}/commissionTotal": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Retrieve Affiliate Commission Earned and View LedgerURl for portal",
        "description": "Get the Affiliate Commission Earned and View LedgerURl for portal",
        "operationId": "getAffiliateCommissionTotalUsingGET",
        "parameters": [
          {
            "name": "affiliate_id",
            "in": "path",
            "description": "affiliate_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AffiliateCommissionEarned"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/{affiliate_id}:commissions": {
      "get": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Retrieve Affiliate Commission and Clawbacks",
        "description": "Retrieve a list of Affiliate's Commissions and Clawbacks",
        "operationId": "getAffiliateCommissionsUsingGET",
        "parameters": [
          {
            "name": "affiliate_id",
            "in": "path",
            "description": "affiliate_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) affiliateId \n- (String) since \n- (String) until \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- date_earned  \nOne of the following directions:  \n- asc  \n- date_created  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAffiliateCommissionResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/{id}": {
      "get": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Retrieve an Affiliate",
        "description": "Retrieves a single Affiliate",
        "operationId": "getAffiliateUsingGET_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestAffiliate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Delete Affiliate",
        "description": "Deletes the specified Affiliate",
        "operationId": "deleteAffiliateUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Affiliate"
        ],
        "summary": "Update an Affiliate",
        "description": "Updates a single Affiliate",
        "operationId": "updateAffiliateUsingPATCH",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "patchAffiliate",
            "description": "Affiliate request to patch",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchAffiliateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestAffiliate"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/{id}:assignToProgram": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Assign Affiliate to Commission program",
        "description": "Assigns an Affiliate to Commission Program",
        "operationId": "addAffiliateToProgramUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "affiliateAddToProgramRequest",
            "description": "affiliateAddToProgramRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AffiliateAddToProgramRequest"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/affiliates/{id}:removeFromProgram": {
      "post": {
        "tags": [
          "Pre-Release",
          "Affiliate"
        ],
        "summary": "Remove an Affiliate from a Commission Program",
        "description": "Removes an Affiliate from a Commission Program",
        "operationId": "removeAffiliateFromProgramUsingPOST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "removeFromProgramRequest",
            "description": "removeFromProgramRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AffiliateRemoveFromProgramRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automationCategory": {
      "get": {
        "tags": [
          "AutomationCategory"
        ],
        "summary": "List automation categories",
        "description": "Lists all automation categories based on the request parameters",
        "operationId": "listCategoriesUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAutomationCategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "AutomationCategory"
        ],
        "summary": "Create automation category",
        "description": "Creates a single automation category",
        "operationId": "createCategoryUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "createAutomationCategoryRequest",
            "description": "createAutomationCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAutomationCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutomationCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "AutomationCategory"
        ],
        "summary": "Save automation category",
        "description": "Creates or updates a single automation category",
        "operationId": "saveCategoryUsingPUT",
        "parameters": [
          {
            "in": "body",
            "name": "saveAutomationCategoryRequest",
            "description": "saveAutomationCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveAutomationCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AutomationCategory"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "AutomationCategory"
        ],
        "summary": "Delete automation category",
        "description": "Deletes one or more automation categories based on the request parameters",
        "operationId": "deleteCategoriesUsingDELETE",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automations": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "List Automations",
        "description": "Lists all automations based on the request parameters.",
        "operationId": "listAutomationsUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n\nYou will need to apply the `==` operator to check the equality of the filter with your searched \ntext, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name. \n - `filter=name%3D%3DSpring Automation` \n- `filter=name%3D%3DTag New Contacts` \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \n- category  \n- activeContacts  \n- publishedDate  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "stats",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAutomationResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Automation"
        ],
        "summary": "Delete an Automation",
        "description": "Deletes a single automation",
        "operationId": "deleteAutomationUsingDELETE",
        "parameters": [
          {
            "name": "automation_ids",
            "in": "query",
            "description": "automation_ids",
            "required": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automations/category": {
      "put": {
        "tags": [
          "Automation"
        ],
        "summary": "Update an Automation's Category",
        "description": "Updates the category of one or more automations",
        "operationId": "updateAutomationCategoryUsingPUT",
        "parameters": [
          {
            "in": "body",
            "name": "updateAutomationCategoryRequest",
            "description": "updateAutomationCategoryRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAutomationCategoryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automations/ids": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "List Automations Ids",
        "description": "Lists all automations ids based on the request parameters.",
        "operationId": "listAllAutomationIdsUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n\nYou will need to apply the `==` operator to check the equality of the filter with your searched \ntext, in the encoded form `%3D%3D`. The search will look for the text anywhere in the automation name. \n - `filter=name%3D%3DSpring Automation` \n- `filter=name%3D%3DTag New Contacts` \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \n- category  \n- activeContacts  \n- publishedDate  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "stats",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListAutomationIdsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automations/{automation_id}": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Retrieve an Automation",
        "description": "Retrieves a single automation",
        "operationId": "getAutomationUsingGET",
        "parameters": [
          {
            "name": "automation_id",
            "in": "path",
            "description": "automation_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Automation"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/automations/{automation_id}/sequences/{sequence_id}:addContacts": {
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Add Contacts to an Automation Sequence",
        "description": "Adds a list of contacts to an automation sequence\nResponse contains a map of the provided list of Contact Ids and their individual result.",
        "operationId": "addContactsToAutomationSequenceUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "addToAutomationSequenceRequest",
            "description": "addToAutomationSequenceRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddToAutomationSequenceRequest"
            }
          },
          {
            "name": "automation_id",
            "in": "path",
            "description": "automation_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sequence_id",
            "in": "path",
            "description": "sequence_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddToAutomationSequenceResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/businessProfile": {
      "get": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Retrieve Business Profile",
        "description": "Retrieves Business Profile information.",
        "operationId": "getBusinessProfileUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetBusinessProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Business Profile"
        ],
        "summary": "Update Business Profile",
        "description": "Updates Business Profile information.",
        "operationId": "patchBusinessProfileUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "businessProfile",
            "description": "businessProfile",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchBusinessProfileRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of fields to be updated. If set, only the fields provided in the update_mask will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "email",
              "website",
              "phone",
              "address",
              "currency_code",
              "business_goals",
              "business_primary_color",
              "business_secondary_color"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetBusinessProfileResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/campaigns": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "List Campaigns",
        "description": "Retrieves all campaigns for the authenticated user",
        "operationId": "listCampaignsUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n\nYou will need to apply the `==` operator to check the equality of the filter with your searched \ntext, in the encoded form `%3D%3D`. The search will look for the text anywhere in the campaign name. \n - `filter=name%3D%3DSpring Campaign` \n- `filter=name%3D%3DTag New Contacts` \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \n- publisheddate  \n- id  \n- completedContactCount  \n- activeContacts  \n- datecreated  \n- lastupdated  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "stats",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListCampaignsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/campaigns/{campaign_id}": {
      "get": {
        "tags": [
          "Campaign"
        ],
        "summary": "Retrieve a Campaign",
        "description": "Retrieves a single campaign",
        "operationId": "getCampaignUsingGET_1",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "campaign_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Campaign"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/campaigns/{campaign_id}/sequences/{sequence_id}:addContacts": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Add Contacts to Campaign Sequence",
        "description": "Adds a list of contacts to a campaign sequence\nResponse contains a map of the provided list of Contact Ids related to their individual result.",
        "operationId": "addContactsToCampaignSequenceUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "addContactsToSequenceRequest",
            "description": "addContactsToSequenceRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddContactsToSequenceRequest"
            }
          },
          {
            "name": "campaign_id",
            "in": "path",
            "description": "campaign_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "sequence_id",
            "in": "path",
            "description": "sequence_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AddContactsToSequenceResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/campaigns/{campaign_id}/sequences/{sequence_id}:removeContacts": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "Remove Contacts from Campaign Sequence",
        "description": "Removes a list of contacts from a campaign sequence\nResponse contains a map of the provided list of Contact Ids related to their individual result.",
        "operationId": "removeContactsFromCampaignSequenceUsingPOST",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "path",
            "description": "campaign_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "removeContactsFromSequenceRequest",
            "description": "removeContactsFromSequenceRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RemoveContactsFromSequenceRequest"
            }
          },
          {
            "name": "sequence_id",
            "in": "path",
            "description": "sequence_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RemoveContactsFromSequenceResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "List Companies",
        "description": "Retrieves a list of all Companies",
        "operationId": "listCompaniesUsingGET_1",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-delimited list of Company properties to include in the response. (Fields such as `notes`, `fax_number` and `custom_fields` aren't included, by default.)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListCompaniesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a Company",
        "description": "Creates a new Company.`country_code` is required if `region` is specified.",
        "operationId": "createCompanyUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "company",
            "description": "company",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateCompanyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/companies/{company_id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Retrieve a Company",
        "description": "Retrieves a single Company",
        "operationId": "getCompanyUsingGET_1",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "company_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-delimited list of Company properties to include in the response. (Available fields are: `company_name`, `address`, `custom_fields`, `email_address`, `fax_number`, `phone_number`, `website`, `notes`)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "Delete a Company",
        "description": "Deletes the specified Company",
        "operationId": "deleteCompanyUsingDELETE",
        "parameters": [
          {
            "name": "company_id",
            "in": "path",
            "description": "company_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update a Company",
        "description": "Updates a Company with the values provided in the request",
        "operationId": "patchCompanyUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "company",
            "description": "company",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchCompanyRequest"
            }
          },
          {
            "name": "company_id",
            "in": "path",
            "description": "company_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "id",
              "company_name",
              "address",
              "phone_number",
              "fax_number",
              "email_address",
              "notes",
              "website",
              "custom_fields",
              "create_time",
              "update_time"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Contacts",
        "description": "Retrieves a list of Contacts",
        "operationId": "listContactsUsingGET_1",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-delimited list of Contact properties to include in the response. (Available fields are: `score_value`, `addresses`, `anniversary`, `birthday`, `company`, `contact_type`, `custom_fields`, `create_time`, `email_addresses`, `fax_numbers`, `job_title`, `update_time`, `create_time`, `leadsource_id`,`middle_name`, `origin`, `owner_id`, `phone_numbers`, `preferred_locale`, `preferred_name`,`prefix`, `relationships`, `social_accounts`, `source_type`, `spouse_name`, `suffix`, `time_zone`,`website`, `tag_ids`, `utm_parameters`)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) email  \n- (String) given_name  \n- (String) family_name  \n- (String) company_id  \n- (Set[String]) contact_ids  \n- (String) start_update_time  \n- (String) end_update_time \n\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched \nword, in the encoded form `%3D%3D`. For the filters listed above, here are some examples: \n - `filter=given_name%3D%3DMary` \n- `filter=company_id%3D%3D123` \n- `filter=company_id%3D%3D123%3Bfamily_name%3D%3DSmith` \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- id  \n- date_created  \n- email  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListContactsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Contact",
        "description": "Creates a new Contact.\n*Note:* Contact must contain at least one item in `email_addresses` or `phone_numbers` and `country_code` is required if `region` is specified.",
        "operationId": "createContactUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "contact",
            "description": "contact",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePatchContactRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/links/types": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Contact Link types",
        "description": "Retrieves a list of Contact Link types.",
        "operationId": "listContactLinkTypesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results. Formatted as (unencoded) ?filter=name==expectedValue",
            "required": false,
            "type": "string",
            "enum": [
              "name"
            ]
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListContactLinkTypesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a Contact Link type",
        "description": "Creates a new type of Contact Link.",
        "operationId": "createContactLinkTypeUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactLinkTypeRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContactLinkType"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/model": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve Contact Model",
        "description": "Get the custom fields and optional properties for the Contact object",
        "operationId": "retrieveContactModelUsingGET_1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/{contact_id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve a Contact",
        "description": "Retrieves a single Contact",
        "operationId": "getContactUsingGET_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-delimited list of Contact properties to include in the response. (Available fields are: `score_value`, `addresses`, `anniversary`, `birthday`, `company`, `contact_type`, `custom_fields`, `create_time`, `email_addresses`, `fax_numbers`, `job_title`, `update_time`, `create_time`, `leadsource_id`,`middle_name`, `origin`, `owner_id`, `phone_numbers`, `preferred_locale`, `preferred_name`,`prefix`, `relationships`, `social_accounts`, `source_type`, `spouse_name`, `suffix`, `time_zone`,`website`, `tag_ids`, `utm_parameters`)",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Delete a Contact",
        "description": "Deletes the specified Contact.",
        "operationId": "deleteContactUsingDELETE_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Contact"
        ],
        "summary": "Update a Contact",
        "description": "Updates a Contact",
        "operationId": "patchContactUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "contact",
            "description": "contact",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePatchContactRequest"
            }
          },
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "addresses",
              "anniversary",
              "birthday",
              "company",
              "contact_type",
              "custom_fields",
              "email_addresses",
              "family_name",
              "fax_numbers",
              "given_name",
              "job_title",
              "lead_source_id",
              "links",
              "middle_name",
              "notes",
              "opt_in_reason",
              "origin",
              "owner_id",
              "phone_numbers",
              "preferred_locale",
              "preferred_name",
              "prefix",
              "referral_code",
              "social_accounts",
              "source_type",
              "spouse_name",
              "suffix",
              "time_zone",
              "website",
              "utm_parameters"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/{contact_id}/links": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "List Linked Contacts",
        "description": "Retrieves a list of Linked Contacts for a given Contact",
        "operationId": "listContactLinksUsingGET",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListContactLinksResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/{contact_id}/notes": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "List Notes",
        "description": "Retrieves a list of Notes",
        "operationId": "listNotesUsingGET_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListNotesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Note"
        ],
        "summary": "Create a Note",
        "description": "Creates a new Note.",
        "operationId": "createNoteUsingPOST_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNoteRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Note"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/{contact_id}/notes/{note_id}": {
      "get": {
        "tags": [
          "Note"
        ],
        "summary": "Retrieve a Note",
        "description": "Retrieves the specified Note",
        "operationId": "getNoteUsingGET_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "note_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetNoteResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Note"
        ],
        "summary": "Delete a Note",
        "description": "Deletes the specified Note",
        "operationId": "deleteNoteUsingDELETE_1",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "note_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Note"
        ],
        "summary": "Update a Note",
        "description": "Updates a Note for a Contact",
        "operationId": "updateNoteUsingPATCH",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "note_id",
            "in": "path",
            "description": "note_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateNoteRequest",
            "description": "updateNoteRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNoteRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "contact_id",
              "text",
              "title",
              "type",
              "user_id"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateNoteResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts/{contact_id}/paymentMethods": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Retrieve Payment Methods",
        "description": "List all Payment Methods for a Contact.",
        "operationId": "listPaymentMethodsUsingGET",
        "parameters": [
          {
            "name": "contact_id",
            "in": "path",
            "description": "contact_id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentMethodList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts:link": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Link Contacts",
        "description": "Links two Contacts together using the provided Link type",
        "operationId": "linkContactsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "linkContactsRequest",
            "description": "linkContactsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkContactsRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ContactLink"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts:search": {
      "get": {
        "tags": [
          "Pre-Release",
          "Contact"
        ],
        "summary": "Search for Contacts",
        "description": "Get a list of Contacts based search parameters.",
        "operationId": "getContactsBySearchTermUsingGET",
        "parameters": [
          {
            "name": "searchParam",
            "in": "query",
            "description": "searchParam",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListBasicContactResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/contacts:unlink": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Delete Link between two Contacts",
        "description": "Deletes Link between two Contacts",
        "operationId": "unlinkContactsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "linkContactsRequest",
            "description": "linkContactsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LinkContactsRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/freeTrials/{discount_id}": {
      "delete": {
        "tags": [
          "Pre-Release",
          "Free Trial Discount"
        ],
        "summary": "Delete a Free Trial Discount",
        "description": "Deletes a specified Free Trial Discount",
        "operationId": "deleteDiscountUsingDELETE_1",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/orderTotals": {
      "get": {
        "tags": [
          "Pre-Release",
          "Order Total Discount"
        ],
        "summary": "List all Order Total Discounts",
        "description": "Retrieves all Order Total Discounts",
        "operationId": "listOrderTotalDiscountsUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) name\n- (String) description\n- (Boolean) apply_to_commissions\n- (DiscountType) discount_type: AMOUNT or PERCENT\n- (DiscountStrategy) discount_strategy: GROSS or NET\n\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\nword, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n- `filter=name%3D%3DMary`\n- `filter=applyToCommissions%3D%3DTrue`\n- `filter=discount_type%3D%3DAMOUNT%3Bdiscount_strategy%3D%3DNET`\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOrderTotalDiscountsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Order Total Discount"
        ],
        "summary": "Create an Order Total Discount",
        "description": "Creates an Order Total Discount",
        "operationId": "createOrderTotalDiscountUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateOrderTotalDiscountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/OrderTotalDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/orderTotals/{discount_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Order Total Discount"
        ],
        "summary": "Retrieve an Order Total Discount",
        "description": "Retrieves an Order Total Discount",
        "operationId": "getOrderTotalDiscountUsingGET",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderTotalDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Order Total Discount"
        ],
        "summary": "Delete an Order Total Discount",
        "description": "Deletes a specified Order Total Discount",
        "operationId": "deleteOrderTotalDiscountUsingDELETE",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Order Total Discount"
        ],
        "summary": "Update an Order Total Discount",
        "description": "Updates an Order Total Discount",
        "operationId": "updateOrderTotalDiscountUsingPATCH",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOrderTotalDiscountRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "description",
              "apply_to_commissions",
              "discount_type",
              "discount_value",
              "discount_strategy",
              "criteria"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrderTotalDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/productCategories": {
      "post": {
        "tags": [
          "Pre-Release",
          "Category Discount"
        ],
        "summary": "Create a Category Discount",
        "description": "Create a Category Discount.",
        "operationId": "createDiscountUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateDiscountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CategoryDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/productCategories/{discount_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Category Discount"
        ],
        "summary": "Retrieve a Category Discount",
        "description": "Retrieves a single Category Discount",
        "operationId": "getDiscountUsingGET",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CategoryDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Category Discount"
        ],
        "summary": "Delete a Category Discount",
        "description": "Deletes a specified Category Discount",
        "operationId": "deleteDiscountUsingDELETE",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Category Discount"
        ],
        "summary": "Update a Category Discount",
        "description": "Update a Category Discount.",
        "operationId": "updateDiscountUsingPATCH",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateDiscountRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "contact_id",
              "order_items",
              "order_title",
              "order_time",
              "order_type",
              "promo_codes",
              "lead_affiliate_id",
              "sales_affiliate_id",
              "shipping_address"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CategoryDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/shipping": {
      "get": {
        "tags": [
          "Pre-Release",
          "Shipping Discount"
        ],
        "summary": "List all Shipping Discounts",
        "description": "Retrieves all Shipping Discounts",
        "operationId": "listDiscountsUsingGET",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "TODO: PAPI-1449",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) name\n- (String) description\n- (DiscountType) discount_type: AMOUNT or PERCENT\n\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\nword, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n- `filter=name%3D%3DMary`\n- `filter=description%3D%3DHello+World`\n- `filter=discount_type%3D%3DAMOUNT%3Bdescription%3D%3DHello%2BWorld`\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListShippingDiscountsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Shipping Discount"
        ],
        "summary": "Create a Shipping Discount",
        "description": "Creates a Shipping Discount",
        "operationId": "createDiscountUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateShippingDiscountRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ShippingDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/discounts/shipping/{discount_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Shipping Discount"
        ],
        "summary": "Retrieve a Shipping Discount",
        "description": "Retrieves a Shipping Discount",
        "operationId": "getDiscountUsingGET_1",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShippingDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Shipping Discount"
        ],
        "summary": "Delete a Shipping Discount",
        "description": "Deletes a specified Shipping Discount",
        "operationId": "deleteDiscountUsingDELETE_2",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Shipping Discount"
        ],
        "summary": "Update a Shipping Discount",
        "description": "Updates a Shipping Discount",
        "operationId": "updateDiscountUsingPATCH_1",
        "parameters": [
          {
            "name": "discount_id",
            "in": "path",
            "description": "discount_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateShippingDiscountRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "TODO: PAPI-1452"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ShippingDiscount"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emailAddresses/{email}": {
      "get": {
        "tags": [
          "Email Address"
        ],
        "summary": "Retrieve an Email Address status",
        "description": "Retrieves the opt-in status for given Email Address",
        "operationId": "getEmailAddressStatusUsingGET",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestEmailAddress"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "Email Address"
        ],
        "summary": "Update an Email Address opt-in status",
        "description": "Updates an Email Address opt-in status\n\nYou may opt-in or mark an email address as _Marketable_ by including the following field in the request JSON with an opt-in reason. (This field is also shown in the complete request body sample.) The reason you provide here will help with compliance. Example reasons: \"Customer opted-in through webform\", \"Company gave explicit permission.\"\n\n```json\n\"opt_in_reason\": \"your reason for opt-in\"\n```\nNote that the email address status will only be updated to `Unconfirmed` (marketable) for email addresses that are currently in the following states:\n- `Unengaged Marketable`\n- `Unengaged Non-Marketable`\n- `Non-Marketable`\n- `Opt-Out: Manual`\n\nAll other existing statuses e.g. `List Unsubscribe`, `Opt-Out`, `System` etc will remain non-marketable and in their existing state.",
        "operationId": "updateEmailAddressOptStatusUsingPUT",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "email",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "updateEmailAddress",
            "description": "updateEmailAddress",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateEmailAddress"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestEmailAddress"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emails": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create an Email Record",
        "description": "Creates a Record of an Email sent to a Contact",
        "operationId": "createEmailUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "emailWithContent",
            "description": "emailWithContent",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateEmailSentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EmailSentWithContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emails/{id}": {
      "get": {
        "tags": [
          "Email"
        ],
        "summary": "Retrieve an Email",
        "description": "Retrieves a single Email that has been sent",
        "operationId": "getEmailUsingGET_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/EmailSentWithContent"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Email"
        ],
        "summary": "Delete an Email Record",
        "description": "Deletes a specific Email Record",
        "operationId": "deleteEmailUsingDELETE_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emails:batchAdd": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Create a set of Email Records",
        "description": "Creates a set of Records of Emails sent to Contacts, maximum 1000 per transaction.",
        "operationId": "createEmailsUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "CreateEmailsSentRequest",
            "description": "Email records to persist, with content.",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateEmailsSentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/EmailsSentList"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emails:batchRemove": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Remove a set of Email Records",
        "description": "Removes a set of Email Records",
        "operationId": "deleteEmailsUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "deleteEmailsRequest",
            "description": "deleteEmailsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteEmailsRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeleteEmailsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/emails:send": {
      "post": {
        "tags": [
          "Email"
        ],
        "summary": "Send an Email",
        "description": "Sends an Email to a list of Contacts",
        "operationId": "sendEmailUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "EmailSendRequest",
            "description": "emailSendRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EmailSendRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/funnelIntegration": {
      "post": {
        "tags": [
          "Pre-Release",
          "FunnelIntegration"
        ],
        "summary": "Create Funnel Integrations into the app.",
        "description": "Allows a list of both triggers / goals, and actions / sequence items to be installed at the same time.",
        "operationId": "createFunnelIntegrationUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "createFunnelIntegrationRequest",
            "description": "createFunnelIntegrationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFunnelIntegrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/funnelIntegration/trigger": {
      "post": {
        "tags": [
          "Pre-Release",
          "FunnelIntegration"
        ],
        "summary": "Achieve Funnel Integration Trigger Goal",
        "operationId": "createIntegrationTriggerEventUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "createFunnelIntegrationTriggerEvents",
            "description": "createFunnelIntegrationTriggerEvents",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFunnelIntegrationTriggerEvents"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FunnelIntegrationTriggerResultDTO"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/funnelIntegration/uninstall": {
      "post": {
        "tags": [
          "Pre-Release",
          "FunnelIntegration"
        ],
        "summary": "Deletes Funnel Integrations from the app.",
        "description": "Deletes all triggers / goals, and actions / sequence items for the given funnel integration",
        "operationId": "deleteFunnelIntegrationUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "deleteFunnelIntegrationRequest",
            "description": "deleteFunnelIntegrationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteFunnelIntegrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/landingpages": {
      "get": {
        "tags": [
          "Pre-Release",
          "Landing Pages"
        ],
        "summary": "List Landing Pages",
        "description": "Retrieves a list of all landing pages",
        "operationId": "listLandingPagesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListLandingPagesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/leadsources": {
      "get": {
        "tags": [
          "Pre-Release",
          "Lead Sources"
        ],
        "summary": "List Lead Sources",
        "description": "Retrieves a list of lead sources",
        "operationId": "listLeadSourcesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListLeadSourcesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Lead Sources"
        ],
        "summary": "Create a Lead Source",
        "description": "Creates a new Lead Source",
        "operationId": "createLeadSourceUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "leadsource",
            "description": "leadsource",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateLeadSourceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/LeadSource"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/locales/countries": {
      "get": {
        "tags": [
          "Pre-Release",
          "Locale"
        ],
        "summary": "List Countries",
        "operationId": "listCountriesUsingGET_2",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListCountriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/locales/countries/{country_code}/provinces": {
      "get": {
        "tags": [
          "Pre-Release",
          "Locale"
        ],
        "summary": "List a Country's Provinces",
        "operationId": "listProvincesForCountryUsingGET",
        "parameters": [
          {
            "name": "country_code",
            "in": "path",
            "description": "country_code",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListProvincesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/merchants": {
      "get": {
        "tags": [
          "Pre-Release",
          "Merchant"
        ],
        "summary": "List Merchant accounts",
        "description": "Retrieves a list of Merchant accounts",
        "operationId": "listMerchantsUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) id\n- (String) account_name\n- (String) type\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\nword, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n- `filter=id%3D%3D123`\n- `filter=account_name%3D%3Dabc`\n- `filter=id%3D%3D123%3Baccount_name=abc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.\nOne of the following fields:\n- id\n- account_name\n- type\nOne of the following directions:\n- asc\n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListRestMerchantResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/notes/model": {
      "get": {
        "tags": [
          "Pre-Release",
          "Note"
        ],
        "summary": "Retrieve Note Model",
        "description": "Gets the custom fields for the Note object",
        "operationId": "retrieveNoteModelUsingGET_1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/notes/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Note"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Note object.",
        "operationId": "createNoteCustomFieldUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/notes/model/customFields/{custom_field_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Note"
        ],
        "summary": "Update a Custom Field",
        "description": "Updates a custom field of the specified type and options to the Note object.",
        "operationId": "updateNotesCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of fields to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/notes/templates": {
      "get": {
        "tags": [
          "Pre-Release",
          "Note"
        ],
        "summary": "Retrieve Note Templates",
        "description": "Retrieves a list of Note Templates",
        "operationId": "listNoteTemplatesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListNoteTemplateResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/oauth/connect/userinfo": {
      "get": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "Retrieve User Info",
        "description": "Retrieves information for the current authenticated end-user, as outlined by the [OpenID Connect specification](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo).",
        "operationId": "getUserInfoUsingGET_1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetUserInfoResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities": {
      "get": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "List Opportunities",
        "description": "Retrieves a list of all Opportunities.",
        "operationId": "listOpportunitiesUsingGET_1",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "fields",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) stage_id\n- (String) user_id\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to opportunities items.\nOne of the following fields:\n- next_action_time\n- contact_name\n- opportunity_name\n- created_time\nOne of the following directions:\n- asc\n- desc\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOpportunitiesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Create an Opportunity",
        "description": "Creates a new opportunity as the authenticated user.",
        "operationId": "createOpportunityUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "opportunity",
            "description": "opportunity",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestV2Opportunity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Create an Opportunity Custom Field",
        "description": "Adds a custom field of the specified type and options to the Opportunity object.",
        "operationId": "createOpportunityCustomFieldsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities/model/customFields/{custom_field_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Update a Opportunity's Custom Field",
        "description": "Updates a custom field of the specified type and options to the Opportunity object.",
        "operationId": "updateOpportunityCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities/stages": {
      "get": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "List of Opportunity Stages",
        "description": "Retrieves a list of Opportunity Stages.",
        "operationId": "listOpportunityStagesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order stage items.\nOne of the following fields:\n- stage_order\nOne of the following directions:\n- asc\n- desc\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOpportunityStagesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Create an Opportunity Stage",
        "description": "Creates a new Opportunity Stage",
        "operationId": "createOpportunityStageUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "opportunityStage",
            "description": "opportunity",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateOpportunityStageRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestOpportunityStage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities/stages/{stage_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Retrieve an Opportunity Stage",
        "description": "Retrieves the specified Opportunity Stage",
        "operationId": "getOpportunityStageUsingGET",
        "parameters": [
          {
            "name": "stage_id",
            "in": "path",
            "description": "stage_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestOpportunityStage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Delete an Opportunity Stage",
        "description": "Deletes the specified Opportunity Stage",
        "operationId": "deleteOpportunityStageUsingDELETE",
        "parameters": [
          {
            "name": "stage_id",
            "in": "path",
            "description": "stage_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Update an Opportunity Stage",
        "description": "Updates specified values of a given Opportunity Stage",
        "operationId": "updateOpportunityStageUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateOpportunityStageRequest"
            }
          },
          {
            "name": "stage_id",
            "in": "path",
            "description": "stage_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "order",
              "target_number_days",
              "probability",
              "checklist_items"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestOpportunityStage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/opportunities/{opportunity_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Retrieve a Opportunity",
        "description": "Retrieves the specified Opportunity",
        "operationId": "getOpportunityUsingGET_1",
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "opportunity_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestV2Opportunity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Delete an Opportunity",
        "description": "Deletes the specified Opportunity",
        "operationId": "deleteOpportunityUsingDELETE",
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "opportunity_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Opportunity"
        ],
        "summary": "Update an opportunity",
        "description": "Updates specified values of a given opportunity",
        "operationId": "updateOpportunityUsingPATCH",
        "parameters": [
          {
            "name": "opportunity_id",
            "in": "path",
            "description": "opportunity_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PatchOpportunityRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "opportunity_title",
              "next_action_time",
              "next_action_notes",
              "opportunity_notesestimated_close_time",
              "include_in_forecast",
              "projected_revenue_low",
              "projected_revenue_highcontact_id",
              "stage_id",
              "user_id",
              "custom_fields",
              "affiliate_id"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestV2Opportunity"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders": {
      "get": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "List orders",
        "description": "Retrieves a list of orders",
        "operationId": "listOrdersUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) product_id\n- (String) contact_id\n- (Boolean) paid\n- (String) created_since_time\n- (String) created_until_time\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\nword, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n- `filter=product_id%3D%3D123`\n- `filter=contact_id%3D%3D567`\n- `filter=product_id%3D%3D123%3Bcontact_id%3D%3D567`",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.\nOne of the following fields:\n- id\n- product_id\n- contact_id\n- due_date\nOne of the following directions:\n- asc\n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOrders"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Create an Order",
        "description": "Create a one time Order with Order items.",
        "operationId": "createOrderUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "createOrderRequest",
            "description": "createOrderRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RestCreateOrderRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestV2Order"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/model": {
      "get": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Retrieve an Order's Custom Field Model",
        "description": "Gets the custom field's model for the Order object",
        "operationId": "retrieveOrderCustomFieldModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Create an Order's Custom Field",
        "description": "Adds a custom field of the specified type and options to the Order object.",
        "operationId": "createOrderCustomFieldUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/model/customFields/{custom_field_id}": {
      "delete": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Delete an Order's Custom Field",
        "description": "Deletes a Custom Field from Order.",
        "operationId": "deleteOrderCustomFieldUsingDELETE",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Update an Order's Custom Field",
        "description": "Updates a custom field of the specified type and options to the Order object.",
        "operationId": "updateOrderCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/{order_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Retrieve an Order",
        "description": "Retrieves a single Order for a given order id",
        "operationId": "getOrderUsingGET_1",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestV2Order"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Delete an Order",
        "description": "  Deletes an Order<br/>\n  Note: The Order must not have any transactions recorded to be subject to deletion.\n",
        "operationId": "deleteOrderUsingDELETE_1",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Update an Order",
        "description": "Updates an Order",
        "operationId": "patchOrderUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "order",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RestV2PatchOrderRequest"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "contact_id",
              "order_items",
              "order_title",
              "order_time",
              "order_type",
              "promo_codes",
              "lead_affiliate_id",
              "sales_affiliate_id",
              "shipping_address"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestV2Order"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/{order_id}/items": {
      "post": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Create an Order Item",
        "description": "Creates an order item on an existing order.",
        "operationId": "createOrderItemsOnOrderUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "createRestOrderItemRequest",
            "description": "createRestOrderItemRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRestOrderItemRequest"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestV2OrderItem"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/orders/{order_id}/payments": {
      "get": {
        "tags": [
          "Pre-Release",
          "Orders"
        ],
        "summary": "Retrieve Order Payments",
        "description": "Retrieves a list of payments made against a given order, including historical or external payments of cash or credit card.",
        "operationId": "listOrderPaymentsUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) invoice_id\n- (String) payment_id\n- (String) amount\n- (String) pay_status\n- (Boolean) skip_commission\n\nYou will need to apply the `==` operator to check the equality of one of the filters with your searched\n word, in the encoded form `%3D%3D`. For the filters listed above, here are some examples:\n- `filter=payment_id%3D%3D123`\n- `filter=pay_status%3D%3DAPPROVED`\n- `filter=invoice_id%3D%3D456%3Bskip_commission=true`\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.\nOne of the following fields:\n- invoice_id\n- payment_id\n- amount\n- pay_time\n- pay_status\n- skip_commission\n- last_updated_time\nOne of the following directions:\n- asc\n- desc\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListOrderPaymentsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a Payment",
        "description": "Creates a payment record that can charge a credit card. Alternatively, adds a record of historical or external payment of cash or credit card.",
        "operationId": "createPaymentOnOrderUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "createPaymentRequest",
            "description": "createPaymentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePaymentRequest"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "order_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/PaymentResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/paymentMethodConfigs": {
      "post": {
        "tags": [
          "PaymentMethodConfig"
        ],
        "summary": "Create Payment Method Configuration",
        "description": "Creates configuration details for rendering payment method components",
        "operationId": "createPaymentMethodConfigUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePaymentMethodConfigRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaymentMethodConfig"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/products": {
      "get": {
        "tags": [
          "Pre-Release",
          "Product"
        ],
        "summary": "List Products",
        "description": "Retrieves a list of Products",
        "operationId": "listProductsUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/ListProductsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Product"
        ],
        "summary": "Create a Product",
        "description": "Creates a new product",
        "operationId": "createProductUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "createProductRequest",
            "description": "createProductRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProductRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestV2Product"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/products/{product_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Product"
        ],
        "summary": "Get a Product",
        "description": "Gets a single Product",
        "operationId": "getProductUsingGET",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "product_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RestV2Product"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Product"
        ],
        "summary": "Delete a Product",
        "description": "Deletes a single product",
        "operationId": "deleteProductUsingDELETE_1",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "product_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/referrals": {
      "post": {
        "tags": [
          "Pre-Release",
          "Referral"
        ],
        "summary": "Create a Referral",
        "description": "Creates a new referral partner referral on the provided contact",
        "operationId": "createReferralUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateReferralRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Referral"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/reporting/reports/{report_id}:run": {
      "post": {
        "tags": [
          "Reporting"
        ],
        "summary": "Run a Report",
        "description": "Runs a report as defined in the application (identified as Saved Search)<br/><span style='color:red'>Deprecated as of v2</span>",
        "operationId": "runReportUsingPOST",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma-separated list of fields to return (or do not supply a value to return all)",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "default": 1000,
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Representation of the last row retrieved from the previous page. An empty value implies a request for the first page.",
            "required": false,
            "type": "string"
          },
          {
            "name": "report_id",
            "in": "path",
            "description": "The unique identifier of the report (Saved Search) to execute",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportExecutionResult"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/sales/merchants/{id}:setDefault": {
      "post": {
        "tags": [
          "Sales"
        ],
        "summary": "Set default Merchant Account",
        "description": "Sets the specified Merchant Account as the default Merchant Account.",
        "operationId": "setMerchantGatewayAsDefaultUsingPOST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/settings/applications:getConfiguration": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Application Configuration",
        "description": "Get configuration values for the application instance.",
        "operationId": "getApplicationConfigurationsUsingGET",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "By default only application data is returned. In addition to that, data is returned for the fields that are mentioned in the query.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "affiliate",
                "appointment",
                "contact",
                "ecommerce",
                "email",
                "forms",
                "fulfillment",
                "invoice",
                "note",
                "opportunity",
                "task",
                "template"
              ]
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "affiliate",
              "appointment",
              "contact",
              "ecommerce",
              "email",
              "forms",
              "fulfillment",
              "invoice",
              "note",
              "opportunity",
              "task",
              "template"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetSettingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/settings/applications:isEnabled": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Application Status",
        "description": "Check if the application is enabled or not",
        "operationId": "isApplicationEnabledUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetApplicationEnabledStatusResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/settings/contactOptionTypes": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Contact Option types",
        "description": "Gets a list of Contact Option types.",
        "operationId": "getContactOptionTypesUsingGET_1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetContactOptionTypesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/shipping": {
      "get": {
        "tags": [
          "Pre-Release",
          "Shipping"
        ],
        "summary": "List Shipping methods",
        "description": "Retrieves a list of Shipping methods",
        "operationId": "listShippingMethodsUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListRestShippingMethodsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptionPlans": {
      "get": {
        "tags": [
          "Pre-Release",
          "Subscription Plans"
        ],
        "summary": "List Subscription Plans",
        "description": "Retrieves a list of Subscription Plans",
        "operationId": "listSubscriptionPlansUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:  \n- (String) name  \n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.  \nOne of the following fields:  \n- name  \nOne of the following directions:  \n- asc  \n- desc",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListSubscriptionPlansResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptions": {
      "get": {
        "tags": [
          "Pre-Release",
          "Subscriptions"
        ],
        "summary": "List Subscriptions",
        "description": "Retrieves a list of subscriptions using the specified search criteria.",
        "operationId": "listSubscriptionsUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Filter to apply, allowed fields are:\n- (String) contact_id\n- (String) subscription_plan_id\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items.\nOne of the following fields:\n- id\n- contact_id\n- subscription_plan_id\nOne of the following directions:\n- ASC\n- DESC\n",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListSubscriptionsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Create Subscription",
        "description": "Creates a subscription with the specified product and product subscription id.",
        "operationId": "createSubscriptionV2UsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "createSubscriptionV2",
            "description": "createSubscriptionV2",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSubscriptionV2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/RestSubscriptionV2"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptions/model": {
      "get": {
        "tags": [
          "Pre-Release",
          "Subscriptions"
        ],
        "summary": "Retrieve Subscription's Custom Field Model",
        "description": "Gets the custom field's model for the Subscription object",
        "operationId": "retrieveSubscriptionCustomFieldModelUsingGET",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptions/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Subscriptions"
        ],
        "summary": "Create a Subscription's Custom Field",
        "description": "Adds a custom field of the specified type and options to the Subscription object.",
        "operationId": "createSubscriptionCustomFieldUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptions/model/customFields/{custom_field_id}": {
      "patch": {
        "tags": [
          "Pre-Release",
          "Subscriptions"
        ],
        "summary": "Update a Subscription's Custom Field",
        "description": "Updates a custom field of the specified type and options to the Subscription object.",
        "operationId": "updateSubscriptionCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/subscriptions/{subscription_id}:deactivate": {
      "post": {
        "tags": [
          "Pre-Release",
          "Subscriptions"
        ],
        "summary": "Cancel Subscription",
        "description": "Cancels the specified subscription",
        "operationId": "cancelSubscriptionUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "cancelSubscriptionsRequest",
            "description": "cancelSubscriptionsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelSubscriptionsRequest"
            }
          },
          {
            "name": "subscription_id",
            "in": "path",
            "description": "subscription_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tags",
        "description": "Retrieve a list of Tags defined in the application.\nTo search for `null` or empty fields use `filter==NONE`",
        "operationId": "listTagsUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTagsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag",
        "description": "Creates a new Tag",
        "operationId": "createTagUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "tag",
            "description": "tag",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateTagRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/categories": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tag Categories",
        "description": "Retrieves the list of defined Tag Categories\nTo search for `null` or empty fields use `filter==NONE`",
        "operationId": "listTagCategoriesUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTagCategoriesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create Tag Category",
        "description": "Creates a new Tag Category.",
        "operationId": "createTagCategoryUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUpdateTagCategoryRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/categories/{tag_category_id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a Tag Category",
        "description": "Returns information about the specified Tag Category",
        "operationId": "getCategoryUsingGET",
        "parameters": [
          {
            "name": "tag_category_id",
            "in": "path",
            "description": "tag_category_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/GetTagCategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete Tag Category",
        "description": "Deletes the specified Tag Category",
        "operationId": "deleteTagCategoryUsingDELETE",
        "parameters": [
          {
            "name": "tag_category_id",
            "in": "path",
            "description": "tag_category_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "summary": "Update a Tag Category",
        "description": "Updates a Tag Category with only the values provided in the request",
        "operationId": "patchTagCategoryUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "tagCategory",
            "description": "tagCategory",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateUpdateTagCategoryRequest"
            }
          },
          {
            "name": "tag_category_id",
            "in": "path",
            "description": "tag_category_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "description"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateTagCategoryResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/{tag_id}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a Tag",
        "description": "Retrieves information about the specified Tag",
        "operationId": "getTagUsingGET_1",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete Tag",
        "description": "Deletes a Tag.",
        "operationId": "deleteTagUsingDELETE",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Tags"
        ],
        "summary": "Update a Tag",
        "description": "Updates a Tag with only the values provided in the request",
        "operationId": "patchTagUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "tag",
            "description": "tag",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateUpdateTagRequest"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "name",
              "description",
              "category"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateTagResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/{tag_id}/companies": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tagged Companies",
        "description": "Retrieves a list of Companies that have the given Tag applied.\nTo search for `null` or empty fields use `filter==NONE`",
        "operationId": "listCompaniesForTagIdUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTaggedCompaniesResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/{tag_id}/contacts": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tagged Contacts",
        "description": "Retrieve a list of Contacts with the specified Tag.\nTo search for `null` or empty fields use `filter==NONE`",
        "operationId": "listContactsWithTagIdUsingGET",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTaggedContactsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/{tag_id}/contacts:applyTags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Apply Tag",
        "description": "Applies a Tag to a list of Contacts.",
        "operationId": "applyTagsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "applyRemoveTagRequest",
            "description": "applyRemoveTagRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyRemoveTagRequest"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplyTagsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tags/{tag_id}/contacts:removeTags": {
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove Tags",
        "description": "Removes a Tag from a list of Contacts.",
        "operationId": "removeTagsUsingPOST",
        "parameters": [
          {
            "in": "body",
            "name": "applyRemoveTagRequest",
            "description": "applyRemoveTagRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ApplyRemoveTagRequest"
            }
          },
          {
            "name": "tag_id",
            "in": "path",
            "description": "tag_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tasks": {
      "get": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "List Tasks",
        "description": "Retrieve a list of tasks based on the provided filter. Tasks which are not assigned to a User may be queried with user_id==UNASSIGNED.",
        "operationId": "listTasksUsingGET_1",
        "parameters": [
          {
            "name": "end_due_time",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. `given_name desc`",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Total number of items to return per page",
            "required": false,
            "type": "integer",
            "maximum": 1000,
            "exclusiveMaximum": false,
            "minimum": 1,
            "exclusiveMinimum": false,
            "format": "int32",
            "x-example": 0
          },
          {
            "name": "page_token",
            "in": "query",
            "description": "Page token",
            "required": false,
            "type": "string"
          },
          {
            "name": "start_due_time",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListTasksResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Create a Task",
        "description": "Creates a new task as the authenticated user.  \nThis endpoint does not currently support setting Custom Field values.",
        "operationId": "createTaskUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "task",
            "description": "task",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateTaskRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tasks/model": {
      "get": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Retrieve Task Model",
        "description": "Get the custom fields for the Task object",
        "operationId": "retrieveTaskModelUsingGET_1",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ObjectModel"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tasks/model/customFields": {
      "post": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Create a Custom Field",
        "description": "Adds a custom field of the specified type and options to the Task object.",
        "operationId": "createTaskCustomFieldUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "customField",
            "description": "customField",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/CreateCustomFieldResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tasks/model/customFields/{custom_field_id}": {
      "delete": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Delete a Custom Field",
        "description": "Deletes a Custom Field from Task.",
        "operationId": "deleteTaskCustomFieldUsingDELETE",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Update a Task's Custom Field",
        "description": "Updates a custom field of the specified type and options to the Task object.",
        "operationId": "updateTaskCustomFieldUsingPATCH",
        "parameters": [
          {
            "name": "custom_field_id",
            "in": "path",
            "description": "custom_field_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateCustomFieldMetaDataRequest"
            }
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "group_id",
              "label",
              "options"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CustomFieldMetaData"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/tasks/{task_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Retrieve a Task",
        "description": "Retrieves a single task",
        "operationId": "getTaskUsingGET_1",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "task_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Delete a Task",
        "description": "Deletes a single task",
        "operationId": "deleteTaskUsingDELETE_1",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "description": "task_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Task"
        ],
        "summary": "Update a Task",
        "description": "Updates a task with only the values provided in the request. \nThis endpoint does not currently support updating Custom Field values.",
        "operationId": "patchTaskUsingPATCH",
        "parameters": [
          {
            "in": "body",
            "name": "task",
            "description": "task",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreatePatchTaskRequest"
            }
          },
          {
            "name": "task_id",
            "in": "path",
            "description": "task_id",
            "required": true,
            "type": "string"
          },
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "id",
              "title",
              "description",
              "type",
              "priority",
              "completion_time",
              "due_time",
              "remind_time_mins",
              "assigned_to_user_id",
              "contact_id",
              "completed"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UpdateTaskResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/users": {
      "get": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "List Users",
        "description": "Retrieves a list of users",
        "operationId": "listUsersUsingGET_1",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Search filter to apply to results",
            "required": false,
            "type": "string",
            "allowEmptyValue": true
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Attribute and direction to order items by. E.g. 'given_name desc'",
            "required": false,
            "type": "string",
            "allowEmptyValue": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListUserResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "Create a User",
        "description": "Creates a new user record. NB: Users will be invited to the application and remain in the \"Invited\" status until the user accepts the invite. \"Inactive\" users will not take up a user license.",
        "operationId": "createUserUsingPOST_1",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateUserRequestV2"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/users/{user_id}": {
      "get": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "Get User",
        "description": "Retrieves a specific User",
        "operationId": "getUserByIdUsingGET",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      },
      "patch": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "Update User",
        "description": "Updates information on a specific User",
        "operationId": "patchUserUsingPATCH",
        "parameters": [
          {
            "name": "update_mask",
            "in": "query",
            "description": "An optional list of properties to be updated. If set, only the provided properties will be updated and others will be skipped.",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "allowEmptyValue": false,
            "enum": [
              "address",
              "company_name",
              "email_address",
              "family_name",
              "fax_numbers",
              "given_name",
              "job_title",
              "phone_numbers",
              "time_zone",
              "website"
            ]
          },
          {
            "in": "body",
            "name": "user",
            "description": "user",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PatchUserRequestV2"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "description": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    },
    "/v2/users/{user_id}/signature": {
      "get": {
        "tags": [
          "Pre-Release",
          "Users"
        ],
        "summary": "Get User email signature",
        "description": "Retrieves a HTML snippet that contains the user's email signature.",
        "operationId": "getUserSignatureUsingGET_1",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "user_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "securityDefinitions": {
    "oauth2": {
      "type": "oauth2",
      "authorizationUrl": "https://accounts.infusionsoft.com/app/oauth/authorize",
      "tokenUrl": "https://api.infusionsoft.com/token",
      "flow": "accessCode"
    }
  },
  "definitions": {
    "AddContactsToSequenceRequest": {
      "type": "object",
      "properties": {
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AddContactsToSequenceRequest"
    },
    "AddContactsToSequenceResponse": {
      "type": "object",
      "properties": {
        "add_to_sequence_results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "AddContactsToSequenceResponse"
    },
    "AddToAutomationSequenceRequest": {
      "type": "object",
      "properties": {
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AddToAutomationSequenceRequest"
    },
    "AddToAutomationSequenceResponse": {
      "type": "object",
      "properties": {
        "add_to_automation_sequence_results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "AddToAutomationSequenceResponse"
    },
    "Address": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "example": "United States of America",
          "description": "The long-name descriptive version of the Country Code"
        },
        "country_code": {
          "type": "string",
          "example": "USA",
          "description": "An ISO 3166-2 Country Code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)"
        },
        "field": {
          "type": "string",
          "enum": [
            "ADDRESS_FIELD_UNSPECIFIED",
            "BILLING",
            "SHIPPING",
            "OTHER"
          ]
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "locality": {
          "type": "string",
          "example": "Phoenix",
          "description": "The municipality to which the address belongs"
        },
        "postal_code": {
          "type": "string"
        },
        "region": {
          "type": "string",
          "example": "Arizona",
          "description": "The long-name descriptive version of the Region Code"
        },
        "region_code": {
          "type": "string",
          "example": "US-AZ",
          "description": "An ISO 3166-2 Province Code, such as one of the US States (https://en.wikipedia.org/wiki/ISO_3166-2:US)"
        },
        "zip_code": {
          "type": "string"
        },
        "zip_four": {
          "type": "string"
        }
      },
      "title": "Address"
    },
    "AddressInformation": {
      "type": "object",
      "properties": {
        "company": {
          "type": "string"
        },
        "country_code": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "is_invoice_to_company": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "locality": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "zip_code": {
          "type": "string"
        },
        "zip_four": {
          "type": "string"
        }
      },
      "title": "AddressInformation"
    },
    "AffiliateAddToProgramRequest": {
      "type": "object",
      "properties": {
        "affiliate_program_id": {
          "type": "string"
        }
      },
      "title": "AffiliateAddToProgramRequest"
    },
    "AffiliateCommission": {
      "type": "object",
      "properties": {
        "aff_owed_id": {
          "type": "integer",
          "format": "int64"
        },
        "amount_earned": {
          "type": "number",
          "format": "float"
        },
        "contact_first_name": {
          "type": "string"
        },
        "contact_id": {
          "type": "integer",
          "format": "int64"
        },
        "contact_last_name": {
          "type": "string"
        },
        "date_earned": {
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "type": "string"
        },
        "invoice_id": {
          "type": "integer",
          "format": "int64"
        },
        "product_name": {
          "type": "string"
        },
        "sales_affiliate_id": {
          "type": "integer",
          "format": "int64"
        },
        "sold_by_first_name": {
          "type": "string"
        },
        "sold_by_last_name": {
          "type": "string"
        }
      },
      "title": "AffiliateCommission"
    },
    "AffiliateCommissionEarned": {
      "type": "object",
      "properties": {
        "affiliate_commission_total": {
          "type": "number",
          "format": "double"
        },
        "view_ledger_url": {
          "type": "string"
        }
      },
      "title": "AffiliateCommissionEarned"
    },
    "AffiliateCommissionProgramResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "AffiliateCommissionProgramResponse"
    },
    "AffiliateLink": {
      "type": "object",
      "properties": {
        "affiliate_id": {
          "type": "string"
        },
        "date_created": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "local_url_code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "program_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "redirect_url": {
          "type": "string"
        }
      },
      "title": "AffiliateLink"
    },
    "AffiliateProgramV2": {
      "type": "object",
      "properties": {
        "affiliate_id": {
          "type": "string",
          "example": 123,
          "description": "The affiliate_Id for Affiliate commission program"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "example": "2019-08-24T14:15:22Z",
          "description": "The created time of affiliate commission program"
        },
        "default_commission": {
          "$ref": "#/definitions/DefaultCommission"
        },
        "id": {
          "type": "string",
          "example": 1,
          "description": "The affiliate commission program name"
        },
        "name": {
          "type": "string",
          "example": "commission program",
          "description": "The affiliate commission program name"
        },
        "notes": {
          "type": "string",
          "example": "notes for the commission program",
          "description": "The affiliate commission program notes"
        },
        "priority": {
          "type": "string",
          "example": 0,
          "description": "The Affiliate commission program priority"
        },
        "product_commissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCommission"
          }
        },
        "subscription_commissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionCommission"
          }
        }
      },
      "title": "AffiliateProgramV2"
    },
    "AffiliateRemoveFromProgramRequest": {
      "type": "object",
      "properties": {
        "affiliate_program_id": {
          "type": "string"
        }
      },
      "title": "AffiliateRemoveFromProgramRequest"
    },
    "AffiliateSummaryRecord": {
      "type": "object",
      "properties": {
        "affiliateId": {
          "type": "integer",
          "format": "int64"
        },
        "amountEarned": {
          "type": "number",
          "format": "double"
        },
        "balance": {
          "type": "number",
          "format": "double"
        },
        "clawbacks": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "AffiliateSummaryRecord"
    },
    "ApplicationCompany": {
      "type": "object",
      "properties": {
        "caller_id_number": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "phone_ext": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "street_address_1": {
          "type": "string"
        },
        "street_address_2": {
          "type": "string"
        },
        "web_logo_url": {
          "type": "string"
        },
        "website": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      },
      "title": "ApplicationCompany"
    },
    "ApplicationConfigurationModuleAffiliate": {
      "type": "object",
      "properties": {
        "choose_affiliate": {
          "type": "boolean"
        },
        "commission": {
          "$ref": "#/definitions/ApplicationConfigurationModuleAffiliateCommission"
        },
        "custom_affiliate_url": {
          "type": "string"
        },
        "display_affiliate_ip_address": {
          "type": "boolean"
        },
        "do_not_notify_affiliate": {
          "type": "boolean"
        },
        "skip_pay_if_unused": {
          "type": "boolean"
        },
        "use_referral_history_if_no_tracking_cookie": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleAffiliate"
    },
    "ApplicationConfigurationModuleAffiliateCommission": {
      "type": "object",
      "properties": {
        "calculation_type": {
          "type": "string"
        },
        "levels": {
          "type": "integer",
          "format": "int32"
        },
        "participant_types": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleAffiliateCommission"
    },
    "ApplicationConfigurationModuleApplication": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/ApplicationCompany"
        },
        "default_view_locale": {
          "type": "string"
        },
        "features_enabled": {
          "$ref": "#/definitions/ApplicationFeaturesEnabled"
        },
        "time_zone": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleApplication"
    },
    "ApplicationConfigurationModuleAppointment": {
      "type": "object",
      "properties": {
        "appointment_types": {
          "type": "string"
        },
        "share_opportunity_with_related_user": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleAppointment"
    },
    "ApplicationConfigurationModuleContact": {
      "type": "object",
      "properties": {
        "address_labels": {
          "$ref": "#/definitions/ApplicationConfigurationModuleContactAddressLabels"
        },
        "contact_types": {
          "type": "string"
        },
        "default_new_contact_form": {
          "type": "string"
        },
        "disable_contact_edit_in_client_login": {
          "type": "boolean"
        },
        "fax_types": {
          "type": "string"
        },
        "phone_types": {
          "type": "string"
        },
        "suffix_types": {
          "type": "string"
        },
        "title_types": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleContact"
    },
    "ApplicationConfigurationModuleContactAddressLabels": {
      "type": "object",
      "properties": {
        "line_1": {
          "type": "string"
        },
        "line_2": {
          "type": "string"
        },
        "line_3": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleContactAddressLabels"
    },
    "ApplicationConfigurationModuleEcommerce": {
      "type": "object",
      "properties": {
        "credit_card_types": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "default_charge_max_retry_attempts": {
          "type": "integer",
          "format": "int32"
        },
        "default_country": {
          "type": "string"
        },
        "default_merchant": {
          "type": "string"
        },
        "default_number_of_days_between_charge_attempts": {
          "type": "integer",
          "format": "int32"
        },
        "default_tax": {
          "type": "string"
        },
        "default_to_auto_charge": {
          "type": "boolean"
        },
        "merchant_account_max_retry_attempts": {
          "type": "integer",
          "format": "int32"
        },
        "payment_types": {
          "type": "string"
        },
        "promo_codes": {
          "type": "string"
        },
        "track_cost_per_unit": {
          "type": "boolean"
        },
        "track_inventory": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleEcommerce"
    },
    "ApplicationConfigurationModuleEmail": {
      "type": "object",
      "properties": {
        "append_contact_key_to_links": {
          "type": "boolean"
        },
        "default_opt_in_link": {
          "type": "string"
        },
        "default_opt_out_link": {
          "type": "string"
        },
        "hide_emails_to_and_from_domains": {
          "type": "string"
        },
        "whitelisted_domains": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleEmail"
    },
    "ApplicationConfigurationModuleForms": {
      "type": "object",
      "properties": {
        "spam_filters_enabled": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleForms"
    },
    "ApplicationConfigurationModuleFulfillment": {
      "type": "object",
      "properties": {
        "default_message_fields": {
          "type": "string"
        },
        "default_message_to": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleFulfillment"
    },
    "ApplicationConfigurationModuleInvoice": {
      "type": "object",
      "properties": {
        "tax_label": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleInvoice"
    },
    "ApplicationConfigurationModuleNote": {
      "type": "object",
      "properties": {
        "appointment_types": {
          "type": "string"
        },
        "share_opportunity_with_related_user": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleNote"
    },
    "ApplicationConfigurationModuleOpportunity": {
      "type": "object",
      "properties": {
        "default_stage": {
          "type": "string"
        },
        "states": {
          "$ref": "#/definitions/ApplicationConfigurationModuleOpportunityStates"
        }
      },
      "title": "ApplicationConfigurationModuleOpportunity"
    },
    "ApplicationConfigurationModuleOpportunityStates": {
      "type": "object",
      "properties": {
        "active": {
          "$ref": "#/definitions/ApplicationConfigurationModuleOpportunityStatesActive"
        },
        "loss": {
          "$ref": "#/definitions/ApplicationConfigurationModuleOpportunityStatesLoss"
        },
        "win": {
          "$ref": "#/definitions/ApplicationConfigurationModuleOpportunityStatesWin"
        }
      },
      "title": "ApplicationConfigurationModuleOpportunityStates"
    },
    "ApplicationConfigurationModuleOpportunityStatesActive": {
      "type": "object",
      "properties": {
        "stages": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleOpportunityStatesActive"
    },
    "ApplicationConfigurationModuleOpportunityStatesLoss": {
      "type": "object",
      "properties": {
        "reasons": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleOpportunityStatesLoss"
    },
    "ApplicationConfigurationModuleOpportunityStatesWin": {
      "type": "object",
      "properties": {
        "reasons": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        }
      },
      "title": "ApplicationConfigurationModuleOpportunityStatesWin"
    },
    "ApplicationConfigurationModuleTask": {
      "type": "object",
      "properties": {
        "appointment_types": {
          "type": "string"
        },
        "share_opportunity_with_related_user": {
          "type": "boolean"
        }
      },
      "title": "ApplicationConfigurationModuleTask"
    },
    "ApplicationConfigurationModuleTemplate": {
      "type": "object",
      "properties": {
        "default_country_code": {
          "type": "integer",
          "format": "int32"
        },
        "default_user_id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "ApplicationConfigurationModuleTemplate"
    },
    "ApplicationFeaturesEnabled": {
      "type": "object",
      "properties": {
        "marketing": {
          "type": "boolean"
        }
      },
      "title": "ApplicationFeaturesEnabled"
    },
    "ApplyRemoveTagRequest": {
      "type": "object",
      "properties": {
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ApplyRemoveTagRequest"
    },
    "ApplyTagsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "ApplyTagsResponse"
    },
    "Automation": {
      "type": "object",
      "properties": {
        "active_contacts": {
          "type": "integer",
          "format": "int32"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "current_edit_lock_status": {
          "$ref": "#/definitions/AutomationLockStatus"
        },
        "error_message": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "published_by": {
          "type": "string"
        },
        "published_date": {
          "type": "string",
          "format": "date-time"
        },
        "published_timezone": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "title": "Automation"
    },
    "AutomationCategory": {
      "type": "object",
      "properties": {
        "automation_count": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "AutomationCategory"
    },
    "AutomationLockStatus": {
      "type": "object",
      "properties": {
        "locked": {
          "type": "boolean"
        },
        "user_firstname": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      },
      "title": "AutomationLockStatus"
    },
    "BasicCompany": {
      "type": "object",
      "properties": {
        "company_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "BasicCompany"
    },
    "BasicContact": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "family_name": {
          "type": "string"
        },
        "given_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "BasicContact"
    },
    "BasicUser": {
      "type": "object",
      "properties": {
        "email_address": {
          "type": "string"
        },
        "family_name": {
          "type": "string"
        },
        "given_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "BasicUser"
    },
    "BusinessProfileAddressRequest": {
      "type": "object",
      "required": [
        "country_code",
        "line1",
        "line2",
        "locality",
        "postal_code",
        "region"
      ],
      "properties": {
        "country_code": {
          "type": "string",
          "example": "USA",
          "description": "An ISO 3166-1 Country Code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "locality": {
          "type": "string",
          "example": "Phoenix",
          "description": "The municipality to which the address belongs"
        },
        "postal_code": {
          "type": "string"
        },
        "region": {
          "type": "string",
          "example": "Arizona",
          "description": "The long-name descriptive version of the Region Code"
        }
      },
      "title": "BusinessProfileAddressRequest"
    },
    "BusinessProfileAddressResponse": {
      "type": "object",
      "properties": {
        "country_code": {
          "type": "string",
          "example": "USA",
          "description": "An ISO 3166-1 Country Code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3)"
        },
        "line1": {
          "type": "string"
        },
        "line2": {
          "type": "string"
        },
        "locality": {
          "type": "string",
          "example": "Phoenix",
          "description": "The municipality to which the address belongs"
        },
        "postal_code": {
          "type": "string"
        },
        "region": {
          "type": "string",
          "example": "Arizona",
          "description": "The long-name descriptive version of the Region Code"
        }
      },
      "title": "BusinessProfileAddressResponse"
    },
    "Campaign": {
      "type": "object",
      "properties": {
        "active_contact_count": {
          "type": "integer",
          "format": "int32"
        },
        "completed_contact_count": {
          "type": "integer",
          "format": "int32"
        },
        "created_by_global_id": {
          "type": "string"
        },
        "date_created": {
          "type": "string"
        },
        "error_message": {
          "type": "string"
        },
        "goals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Goal"
          }
        },
        "id": {
          "type": "string"
        },
        "locked": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "published_date": {
          "type": "string",
          "format": "date-time"
        },
        "published_status": {
          "type": "boolean"
        },
        "published_time_zone": {
          "type": "string"
        },
        "sequences": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Sequence"
          }
        },
        "time_zone": {
          "type": "string"
        }
      },
      "title": "Campaign"
    },
    "CancelSubscriptionsRequest": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        }
      },
      "title": "CancelSubscriptionsRequest"
    },
    "CardInfo": {
      "type": "object",
      "properties": {
        "brand": {
          "type": "string"
        },
        "cardType": {
          "type": "string"
        },
        "expirationMonth": {
          "type": "string"
        },
        "expirationYear": {
          "type": "string"
        },
        "lastFour": {
          "type": "string"
        }
      },
      "title": "CardInfo"
    },
    "CategoryDiscount": {
      "type": "object",
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "category_id": {
          "type": "string"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_percent": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "product_categories": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CategoryDiscount"
    },
    "CategoryReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "title": "CategoryReference"
    },
    "CheckListItemDetails": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "done_date": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "instance_id": {
          "type": "integer",
          "format": "int64"
        },
        "item_order": {
          "type": "integer",
          "format": "int32"
        },
        "required": {
          "type": "boolean"
        }
      },
      "title": "CheckListItemDetails"
    },
    "ChecklistItem": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "required": {
          "type": "boolean"
        }
      },
      "title": "ChecklistItem"
    },
    "Company": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "company_name": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValue"
          }
        },
        "email_address": {
          "$ref": "#/definitions/EmailAddress"
        },
        "fax_number": {
          "$ref": "#/definitions/FaxNumber"
        },
        "id": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "phone_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "update_time": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "Company"
    },
    "Contact": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "anniversary_date": {
          "type": "string"
        },
        "birth_date": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/BasicCompany"
        },
        "contact_type": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValue"
          }
        },
        "email_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailAddress"
          }
        },
        "family_name": {
          "type": "string"
        },
        "fax_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FaxNumber"
          }
        },
        "given_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "job_title": {
          "type": "string"
        },
        "leadsource_id": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          }
        },
        "middle_name": {
          "type": "string"
        },
        "origin": {
          "$ref": "#/definitions/Origin"
        },
        "owner_id": {
          "type": "string"
        },
        "phone_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        },
        "preferred_locale": {
          "type": "string",
          "example": "en_US"
        },
        "preferred_name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "referral_code": {
          "type": "string"
        },
        "score_value": {
          "type": "string"
        },
        "social_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialAccount"
          }
        },
        "source_type": {
          "type": "string",
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "API",
            "APPOINTMENT",
            "FORM_API_HOSTED",
            "FORM_API_INTERNAL",
            "IMPORT",
            "INTERNAL_FORM",
            "LANDING_PAGE",
            "MANUAL",
            "OTHER",
            "UNKNOWN",
            "WEBFORM"
          ]
        },
        "spouse_name": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "tag_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "time_zone": {
          "type": "string"
        },
        "update_time": {
          "type": "string"
        },
        "utm_parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactUtmResponse"
          }
        },
        "website": {
          "type": "string"
        }
      },
      "title": "Contact"
    },
    "ContactLink": {
      "type": "object",
      "properties": {
        "contact1_id": {
          "type": "string"
        },
        "contact2_id": {
          "type": "string"
        },
        "link_type_id": {
          "type": "string"
        },
        "link_type_name": {
          "type": "string"
        }
      },
      "title": "ContactLink"
    },
    "ContactLinkType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "max_links": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ContactLinkType"
    },
    "ContactUtmResponse": {
      "type": "object",
      "properties": {
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "firstTouch": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "keapSourceId": {
          "type": "string"
        },
        "lastTouch": {
          "type": "boolean"
        },
        "utmCampaign": {
          "type": "string"
        },
        "utmContent": {
          "type": "string"
        },
        "utmMedium": {
          "type": "string"
        },
        "utmSource": {
          "type": "string"
        },
        "utmTerm": {
          "type": "string"
        }
      },
      "title": "ContactUtmResponse"
    },
    "Country": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Country"
    },
    "CreateAffiliateRequest": {
      "type": "object",
      "required": [
        "code",
        "contact_id",
        "status"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "M123",
          "description": "The Affiliate code which have some validations.\n1. The code should not have white spaces\n2. The code should starts with letters\n3. The code minimum 4 characters length"
        },
        "contact_id": {
          "type": "string",
          "example": 1,
          "description": "The contactId identifier , Must be a positive number"
        },
        "name": {
          "type": "string",
          "example": "Affiliate Name",
          "description": "The Affiliate name will be derived from the Contact,\nwhen not explicitly provided"
        },
        "status": {
          "type": "string",
          "example": "active",
          "description": "The Affiliate Status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      },
      "title": "CreateAffiliateRequest"
    },
    "CreateAutomationCategoryRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "title": "CreateAutomationCategoryRequest"
    },
    "CreateCommissionProgramRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Fitness program",
          "description": "The name of the Commission Program"
        },
        "notes": {
          "type": "string",
          "example": "20% default commission",
          "description": "The notes of the Commission Program"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The priority of the Commission Program"
        }
      },
      "title": "CreateCommissionProgramRequest"
    },
    "CreateCompanyRequest": {
      "type": "object",
      "required": [
        "company_name"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "company_name": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValue"
          }
        },
        "email_address": {
          "$ref": "#/definitions/EmailAddress"
        },
        "fax_number": {
          "$ref": "#/definitions/FaxNumber"
        },
        "notes": {
          "type": "string"
        },
        "phone_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "CreateCompanyRequest"
    },
    "CreateContactLinkTypeRequest": {
      "type": "object",
      "properties": {
        "max_links": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateContactLinkTypeRequest"
    },
    "CreateContactUtmPropertiesRequest": {
      "type": "object",
      "required": [
        "keap_source_id"
      ],
      "properties": {
        "keap_source_id": {
          "type": "string",
          "example": 6088383224687662,
          "description": "The formId"
        },
        "utm_campaign": {
          "type": "string",
          "example": "spring_sale",
          "description": "UTM campaign information"
        },
        "utm_content": {
          "type": "string",
          "example": "textlink",
          "description": "UTM content information"
        },
        "utm_medium": {
          "type": "string",
          "example": "cpc",
          "description": "UTM medium information"
        },
        "utm_source": {
          "type": "string",
          "example": "google",
          "description": "UTM source information"
        },
        "utm_term": {
          "type": "string",
          "example": "financial_consulting",
          "description": "UTM term information"
        }
      },
      "title": "CreateContactUtmPropertiesRequest"
    },
    "CreateCustomFieldOptionRequest": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateCustomFieldOptionRequest"
          }
        }
      },
      "title": "CreateCustomFieldOptionRequest"
    },
    "CreateCustomFieldRequest": {
      "type": "object",
      "required": [
        "field_type",
        "label"
      ],
      "properties": {
        "field_type": {
          "type": "string",
          "enum": [
            "CURRENCY",
            "DATE",
            "DATE_TIME",
            "DAY_OF_WEEK",
            "DECIMAL_NUMBER",
            "DRILLDOWN",
            "DROPDOWN",
            "EMAIL",
            "LIST_BOX",
            "MONTH",
            "NAME",
            "PERCENT",
            "PHONE_NUMBER",
            "RADIO",
            "SOCIAL_SECURITY_NUMBER",
            "STATE",
            "TEXT",
            "TEXT_AREA",
            "USER",
            "USER_LIST_BOX",
            "WEBSITE",
            "WHOLE_NUMBER",
            "YEAR",
            "YES_NO"
          ]
        },
        "group_id": {
          "type": "string",
          "description": "An optional tab group to place the field under in the interface.  If not specified, will default to the 'Custom Fields' tab."
        },
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateCustomFieldOptionRequest"
          }
        },
        "user_group_id": {
          "type": "string",
          "description": "An optional user group to choose from when selecting values for User or UserListBox fields."
        }
      },
      "title": "CreateCustomFieldRequest"
    },
    "CreateCustomFieldResponse": {
      "type": "object",
      "properties": {
        "custom_field": {
          "$ref": "#/definitions/CustomFieldMetaData"
        }
      },
      "title": "CreateCustomFieldResponse"
    },
    "CreateDefaultCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        }
      },
      "title": "CreateDefaultCommissionProgramRequest"
    },
    "CreateEmailSentRequest": {
      "type": "object",
      "required": [
        "sent_to_address"
      ],
      "properties": {
        "clicked_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "headers": {
          "type": "string"
        },
        "html_content": {
          "type": "string",
          "description": "Base64 encoded HTML"
        },
        "opened_time": {
          "type": "string"
        },
        "original_provider": {
          "type": "string",
          "description": "Provider that sent the email, defaults to UNKNOWN",
          "enum": [
            "UNKNOWN",
            "INFUSIONSOFT",
            "MICROSOFT",
            "GOOGLE"
          ]
        },
        "original_provider_id": {
          "type": "string",
          "description": "Provider id that sent the email, must be unique when combined with provider.  If omitted a UUID without dashes is autogenerated for the record."
        },
        "plain_content": {
          "type": "string",
          "description": "Base64 encoded text"
        },
        "provider_source_id": {
          "type": "string",
          "description": "The email address of the synced email account that generated this message."
        },
        "received_time": {
          "type": "string"
        },
        "sent_from_address": {
          "type": "string"
        },
        "sent_from_reply_address": {
          "type": "string"
        },
        "sent_time": {
          "type": "string"
        },
        "sent_to_address": {
          "type": "string"
        },
        "sent_to_bcc_address_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sent_to_cc_address_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "CreateEmailSentRequest"
    },
    "CreateEmailsSentRequest": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateEmailSentRequest"
          }
        }
      },
      "title": "CreateEmailsSentRequest"
    },
    "CreateFunnelIntegrationRequest": {
      "type": "object",
      "properties": {
        "base_url": {
          "type": "string",
          "description": "The base URL of the integration, that will be used to call the integration related REST endpoints."
        },
        "context": {
          "type": "string",
          "description": "The context of the integration, that will be used internally to identify the integration."
        },
        "enabled": {
          "type": "boolean",
          "description": "The flag to enable or disable the integration."
        },
        "funnel_integration_actions": {
          "type": "array",
          "description": "The list of actions that will be installed with the integration.",
          "items": {
            "$ref": "#/definitions/FunnelIntegrationAction"
          }
        },
        "funnel_integration_triggers": {
          "type": "array",
          "description": "The list of triggers that will be installed with the integration.",
          "items": {
            "$ref": "#/definitions/FunnelIntegrationAction"
          }
        },
        "name": {
          "type": "string",
          "example": "My Integration, MyIntegration, My 1 New Very Exciting Integration",
          "description": "The name of the integration, that will be used internally to identify the integration."
        }
      },
      "title": "CreateFunnelIntegrationRequest"
    },
    "CreateFunnelIntegrationTriggerEvents": {
      "type": "object",
      "properties": {
        "funnel_integration_trigger_events": {
          "type": "array",
          "description": "A list of trigger events to be created.",
          "items": {
            "$ref": "#/definitions/FunnelIntegrationTriggerEventDTO"
          }
        }
      },
      "title": "CreateFunnelIntegrationTriggerEvents"
    },
    "CreateLeadSourceRequest": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/LeadSourceCategory"
        },
        "description": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "status_is_active": {
          "type": "boolean"
        },
        "vendor": {
          "type": "string"
        }
      },
      "title": "CreateLeadSourceRequest"
    },
    "CreateNoteRequest": {
      "type": "object",
      "required": [
        "user_id"
      ],
      "properties": {
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "A value for either `title` or `type` is required."
        },
        "type": {
          "type": "string",
          "description": "A value for either `title` or `type` is required. The value may be one of `Appointment`, `Call`, `Email`, `Fax`, `Letter` or `Other` in Keap Max/Pro, or an admin-configured value in Classic."
        },
        "user_id": {
          "type": "string"
        }
      },
      "title": "CreateNoteRequest"
    },
    "CreateOpportunityRequest": {
      "type": "object",
      "required": [
        "opportunity_title"
      ],
      "properties": {
        "affiliate_id": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "estimated_close_time": {
          "type": "string"
        },
        "include_in_forecast": {
          "type": "boolean"
        },
        "next_action_notes": {
          "type": "string"
        },
        "next_action_time": {
          "type": "string"
        },
        "opportunity_notes": {
          "type": "string"
        },
        "opportunity_title": {
          "type": "string"
        },
        "projected_revenue_high": {
          "type": "number",
          "format": "double"
        },
        "projected_revenue_low": {
          "type": "number",
          "format": "double"
        },
        "stage_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      },
      "title": "CreateOpportunityRequest"
    },
    "CreateOpportunityStageChecklistItem": {
      "type": "object",
      "required": [
        "description",
        "order",
        "required"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": "Must be Numeric could be negative values as well for ordering"
        },
        "required": {
          "type": "boolean",
          "example": false
        }
      },
      "title": "CreateOpportunityStageChecklistItem"
    },
    "CreateOpportunityStageRequest": {
      "type": "object",
      "required": [
        "name",
        "order",
        "probability",
        "target_number_days"
      ],
      "properties": {
        "checklist_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateOpportunityStageChecklistItem"
          }
        },
        "name": {
          "type": "string",
          "example": "Won"
        },
        "order": {
          "type": "integer",
          "format": "int32",
          "example": "must be Numeric"
        },
        "probability": {
          "type": "integer",
          "format": "int32",
          "example": "must be integer between 0 and 100"
        },
        "target_number_days": {
          "type": "integer",
          "format": "int32",
          "example": "value should be >=0"
        }
      },
      "title": "CreateOpportunityStageRequest"
    },
    "CreateOrPatchAffiliateLinkRequest": {
      "type": "object",
      "properties": {
        "affiliate_id": {
          "type": "string",
          "example": 1,
          "description": "The AffiliateId"
        },
        "code": {
          "type": "string",
          "example": "fP100",
          "description": "Code"
        },
        "name": {
          "type": "string",
          "example": "Fitness Program",
          "description": "The Affiliate Link Name"
        },
        "program_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "website_address": {
          "type": "string",
          "example": "www.fitnessProgram.com",
          "description": "Website Address"
        }
      },
      "title": "CreateOrPatchAffiliateLinkRequest"
    },
    "CreateOrderTotalDiscountRequest": {
      "type": "object",
      "required": [
        "discount_type",
        "discount_value",
        "name"
      ],
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_strategy": {
          "type": "string",
          "enum": [
            "GROSS",
            "NET"
          ]
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateOrderTotalDiscountRequest"
    },
    "CreatePatchContactRequest": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "anniversary_date": {
          "type": "string"
        },
        "birth_date": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/BasicCompany"
        },
        "contact_type": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/CustomFieldValue"
          }
        },
        "email_addresses": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/EmailAddressRequest"
          }
        },
        "family_name": {
          "type": "string"
        },
        "fax_numbers": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/FaxNumber"
          }
        },
        "given_name": {
          "type": "string"
        },
        "job_title": {
          "type": "string"
        },
        "leadsource_id": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "origin": {
          "$ref": "#/definitions/OriginRequest"
        },
        "owner_id": {
          "type": "string"
        },
        "phone_numbers": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        },
        "preferred_locale": {
          "type": "string",
          "example": "en_US"
        },
        "preferred_name": {
          "type": "string"
        },
        "prefix": {
          "type": "string"
        },
        "referral_code": {
          "type": "string"
        },
        "social_accounts": {
          "type": "array",
          "description": "If an empty array is specified, all existing values will be removed.",
          "items": {
            "$ref": "#/definitions/SocialAccount"
          }
        },
        "source_type": {
          "type": "string",
          "enum": [
            "SOURCE_TYPE_UNSPECIFIED",
            "API",
            "APPOINTMENT",
            "FORM_API_HOSTED",
            "FORM_API_INTERNAL",
            "IMPORT",
            "INTERNAL_FORM",
            "LANDING_PAGE",
            "MANUAL",
            "OTHER",
            "UNKNOWN",
            "WEBFORM"
          ]
        },
        "spouse_name": {
          "type": "string"
        },
        "suffix": {
          "type": "string"
        },
        "time_zone": {
          "type": "string"
        },
        "utm_parameters": {
          "$ref": "#/definitions/CreateContactUtmPropertiesRequest"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "CreatePatchContactRequest"
    },
    "CreatePatchTaskRequest": {
      "type": "object",
      "properties": {
        "assigned_to_user_id": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "completion_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "CRITICAL",
            "ESSENTIAL",
            "NONESSENTIAL"
          ]
        },
        "remind_time_mins": {
          "type": "integer",
          "format": "int32",
          "description": "Value in minutes before start_date to show pop-up reminder.  Acceptable values are [5,10,15,30,60,120,240,480,1440,2880]"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "EMAIL",
            "CALL",
            "APPOINTMENT",
            "FAX",
            "LETTER",
            "OTHER"
          ]
        }
      },
      "title": "CreatePatchTaskRequest"
    },
    "CreatePaymentMethodConfigRequest": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string"
        }
      },
      "title": "CreatePaymentMethodConfigRequest"
    },
    "CreatePaymentRequest": {
      "type": "object",
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "notes": {
          "type": "string"
        },
        "payment_amount": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "CreatePaymentRequest"
    },
    "CreateProductCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        }
      },
      "title": "CreateProductCommissionProgramRequest"
    },
    "CreateProductRequest": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "True means active, False means inactive"
        },
        "city_taxable": {
          "type": "boolean",
          "description": "If city-based taxes should be applied to this product"
        },
        "country_taxable": {
          "type": "boolean",
          "description": "If country-based taxes should be applied to this product"
        },
        "description": {
          "type": "string",
          "description": "Product long description"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "price": {
          "type": "integer",
          "format": "int64",
          "description": "The product price. The value is in the currency’s smallest unit. e.g. $12.50 is 1250."
        },
        "short_description": {
          "type": "string",
          "description": "Product short description"
        },
        "sku": {
          "type": "string",
          "description": "Product SKU"
        },
        "state_taxable": {
          "type": "boolean",
          "description": "If state-based taxes should be applied to this product"
        },
        "storefront_hidden": {
          "type": "boolean",
          "description": "If the product should not be shown in the storefront"
        },
        "subscription_only": {
          "type": "boolean",
          "description": "If the product is a subscription-only product"
        },
        "taxable": {
          "type": "boolean",
          "description": "Whether or not the product should be taxed"
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "Product weight"
        }
      },
      "title": "CreateProductRequest"
    },
    "CreateReferralRequest": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiration_time": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "referral_partner_id": {
          "type": "string"
        },
        "referral_time": {
          "type": "string"
        },
        "referral_type": {
          "type": "string",
          "enum": [
            "COOKIE",
            "PERMANENT",
            "MANUAL"
          ]
        },
        "source": {
          "type": "string"
        }
      },
      "title": "CreateReferralRequest"
    },
    "CreateRestOrderItemRequest": {
      "type": "object",
      "required": [
        "product_id",
        "quantity"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "Overridable price of the product. If not specified, the default will be used. Must be greater than or equal to 0."
        },
        "product_id": {
          "type": "string",
          "description": "The id of the product to be added to the order."
        },
        "product_type": {
          "type": "string",
          "enum": [
            "PRODUCT",
            "DIGITAL"
          ]
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Quantity must be greater than or equal to 1"
        }
      },
      "title": "CreateRestOrderItemRequest"
    },
    "CreateShippingDiscountRequest": {
      "type": "object",
      "required": [
        "discount_type",
        "discount_value",
        "name"
      ],
      "properties": {
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateShippingDiscountRequest"
    },
    "CreateSubscriptionCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        },
        "subscription_id": {
          "type": "string"
        }
      },
      "title": "CreateSubscriptionCommissionProgramRequest"
    },
    "CreateSubscriptionV2": {
      "type": "object",
      "required": [
        "contact_id"
      ],
      "properties": {
        "allow_duplicate": {
          "type": "boolean",
          "description": "If true, it will disable the check to see if there is already an identical subscription for the contact. Default is false."
        },
        "allow_tax": {
          "type": "boolean",
          "description": "Only works if the product the product subscription is for is taxable. Default is false."
        },
        "auto_charge": {
          "type": "boolean",
          "description": "Defaults to true."
        },
        "billing_amount": {
          "type": "number",
          "format": "double",
          "description": "Must be 0 or greater. Default is the price in the product subscription."
        },
        "contact_id": {
          "type": "string"
        },
        "first_bill_date": {
          "type": "string",
          "format": "date",
          "description": "The first day the subscription will bill, in EST. Must not be in the past. Default is today."
        },
        "payment_method_id": {
          "type": "string",
          "description": "Default is the contact's most recently used card, if auto charge is true. Default is 0 otherwise."
        },
        "quantity": {
          "type": "integer",
          "format": "int32",
          "description": "Must be greater than 0. Default is 1."
        },
        "sale_affiliate_id": {
          "type": "string"
        },
        "subscription_plan_id": {
          "type": "string",
          "description": "Id of the product subscription."
        }
      },
      "title": "CreateSubscriptionV2"
    },
    "CreateTaskRequest": {
      "type": "object",
      "required": [
        "assigned_to_user_id"
      ],
      "properties": {
        "assigned_to_user_id": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "completion_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "CRITICAL",
            "ESSENTIAL",
            "NONESSENTIAL"
          ]
        },
        "remind_time_mins": {
          "type": "integer",
          "format": "int32",
          "description": "Value in minutes before start_date to show pop-up reminder.  Acceptable values are [5,10,15,30,60,120,240,480,1440,2880]"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "EMAIL",
            "CALL",
            "APPOINTMENT",
            "FAX",
            "LETTER",
            "OTHER"
          ]
        }
      },
      "title": "CreateTaskRequest"
    },
    "CreateUpdateDiscountRequest": {
      "type": "object",
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_percent": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "product_category_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateUpdateDiscountRequest"
    },
    "CreateUpdateTagCategoryRequest": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateUpdateTagCategoryRequest"
    },
    "CreateUpdateTagRequest": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryReference"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "CreateUpdateTagRequest"
    },
    "CreateUserRequestV2": {
      "type": "object",
      "required": [
        "email_address",
        "given_name"
      ],
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "email_address": {
          "$ref": "#/definitions/EmailAddressRequest"
        },
        "given_name": {
          "type": "string"
        },
        "partner": {
          "type": "boolean"
        }
      },
      "title": "CreateUserRequestV2"
    },
    "CurrencyValue": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64",
          "description": "The price amount in the smallest currency unit"
        },
        "currency_code": {
          "type": "string",
          "description": "Three-letter ISO currency code"
        },
        "formatted_amount": {
          "type": "string",
          "description": "The product amount formatted using the tenant's currency locale"
        }
      },
      "title": "CurrencyValue"
    },
    "CustomField": {
      "type": "object",
      "properties": {
        "content": {
          "type": "object"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "CustomField"
    },
    "CustomFieldMetaData": {
      "type": "object",
      "properties": {
        "default_value": {
          "type": "string"
        },
        "field_name": {
          "type": "string"
        },
        "field_type": {
          "type": "string",
          "enum": [
            "CURRENCY",
            "DATE",
            "DATE_TIME",
            "DAY_OF_WEEK",
            "DECIMAL_NUMBER",
            "DRILLDOWN",
            "DROPDOWN",
            "EMAIL",
            "LIST_BOX",
            "MONTH",
            "NAME",
            "PERCENT",
            "PHONE_NUMBER",
            "RADIO",
            "SOCIAL_SECURITY_NUMBER",
            "STATE",
            "TEXT",
            "TEXT_AREA",
            "USER",
            "USER_LIST_BOX",
            "WEBSITE",
            "WHOLE_NUMBER",
            "YEAR",
            "YES_NO"
          ]
        },
        "group_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldOption"
          }
        },
        "record_type": {
          "type": "string",
          "enum": [
            "CONTACT",
            "REFERRAL_PARTNER",
            "OPPORTUNITY",
            "TASK_NOTE_APPOINTMENT",
            "COMPANY",
            "ORDER",
            "SUBSCRIPTION"
          ]
        }
      },
      "title": "CustomFieldMetaData"
    },
    "CustomFieldOption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldOption"
          }
        }
      },
      "title": "CustomFieldOption"
    },
    "CustomFieldValue": {
      "type": "object",
      "properties": {
        "content": {
          "type": "object"
        },
        "id": {
          "type": "string"
        }
      },
      "title": "CustomFieldValue"
    },
    "DefaultCommission": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "number",
          "format": "double"
        },
        "percentage": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "DefaultCommission"
    },
    "DeleteEmailsRequest": {
      "type": "object",
      "properties": {
        "email_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "DeleteEmailsRequest"
    },
    "DeleteEmailsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "DeleteEmailsResponse"
    },
    "DeleteFunnelIntegrationRequest": {
      "type": "object",
      "properties": {
        "action_names": {
          "type": "array",
          "description": "The name of the actions, that will be looked for and uninstalled.",
          "items": {
            "type": "string"
          }
        },
        "integration_names": {
          "type": "array",
          "description": "The name of the integrations, that will be looked for and uninstalled. This will uninstall all triggers and actions related to this automation.",
          "items": {
            "type": "string"
          }
        },
        "trigger_names": {
          "type": "array",
          "description": "The name of the triggers, that will be looked for and uninstalled.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "DeleteFunnelIntegrationRequest"
    },
    "DeleteSubscriptionPlanCommissionRequest": {
      "type": "object",
      "properties": {
        "product_id": {
          "type": "string"
        },
        "subscription_plan_id": {
          "type": "string"
        }
      },
      "title": "DeleteSubscriptionPlanCommissionRequest"
    },
    "Discount": {
      "type": "object",
      "required": [
        "amount",
        "discount_method",
        "special_item_id"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "discount_method": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "line_item_id": {
          "type": "string"
        },
        "special_item_id": {
          "type": "string"
        }
      },
      "title": "Discount"
    },
    "DiscountCriteria": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "criteria_id": {
          "type": "string"
        },
        "operator": {
          "type": "string",
          "enum": [
            "LESS_THAN",
            "GREATER_THAN"
          ]
        },
        "plan_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "product_quantity_max": {
          "type": "integer",
          "format": "int32"
        },
        "product_quantity_min": {
          "type": "integer",
          "format": "int32"
        },
        "range_end_time": {
          "type": "string"
        },
        "range_start_time": {
          "type": "string"
        },
        "subscription_quantity": {
          "type": "integer",
          "format": "int32"
        },
        "total_amount": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string",
          "enum": [
            "DATE_RANGE",
            "PROMO_CODE",
            "PRODUCT",
            "SUBSCRIPTION_PLAN",
            "ORDER_TOTAL"
          ]
        }
      },
      "title": "DiscountCriteria"
    },
    "EmailAddress": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "email_opt_status": {
          "type": "string",
          "enum": [
            "UNENGAGED_MARKETABLE",
            "SINGLE_OPT_IN",
            "DOUBLE_OPT_IN",
            "CONFIRMED",
            "UNENGAGED_NON_MARKETABLE",
            "NON_MARKETABLE",
            "LOCKDOWN",
            "BOUNCE",
            "HARD_BOUNCE",
            "MANUAL",
            "ADMIN",
            "SYSTEM",
            "LIST_UNSUBSCRIBE",
            "FEEDBACK",
            "SPAM",
            "INVALID",
            "DEACTIVATED"
          ]
        },
        "field": {
          "type": "string",
          "enum": [
            "EMAIL_FIELD_UNSPECIFIED",
            "EMAIL1",
            "EMAIL2",
            "EMAIL3"
          ]
        },
        "is_opt_in": {
          "type": "boolean"
        },
        "opt_in_reason": {
          "type": "string"
        }
      },
      "title": "EmailAddress"
    },
    "EmailAddressRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "field": {
          "type": "string",
          "enum": [
            "EMAIL_FIELD_UNSPECIFIED",
            "EMAIL1",
            "EMAIL2",
            "EMAIL3"
          ]
        },
        "opt_in_reason": {
          "type": "string"
        }
      },
      "title": "EmailAddressRequest"
    },
    "EmailSendRequest": {
      "type": "object",
      "required": [
        "contacts",
        "subject",
        "user_id"
      ],
      "properties": {
        "address_field": {
          "type": "string",
          "description": "Email field of each Contact record to address the email to, such as 'Email', 'EmailAddress2', 'EmailAddress3' or '_CustomFieldName', defaulting to the contact's primary email"
        },
        "attachments": {
          "type": "array",
          "description": "Attachments to be sent with each copy of the email, maximum of 10 with size of 1MB each",
          "items": {
            "$ref": "#/definitions/EmailSendRequestAttachment"
          }
        },
        "contacts": {
          "type": "array",
          "description": "An array of Contact Ids to receive the email",
          "items": {
            "type": "string"
          }
        },
        "html_content": {
          "type": "string",
          "description": "The HTML-formatted content of the email, encoded in Base64"
        },
        "plain_content": {
          "type": "string",
          "description": "The plain-text content of the email, encoded in Base64"
        },
        "subject": {
          "type": "string",
          "description": "The subject line of the email"
        },
        "user_id": {
          "type": "string",
          "description": "The infusionsoft user to send the email on behalf of"
        }
      },
      "title": "EmailSendRequest"
    },
    "EmailSendRequestAttachment": {
      "type": "object",
      "properties": {
        "file_data": {
          "type": "string",
          "description": "The content of the attachment, encoded in Base64"
        },
        "file_name": {
          "type": "string",
          "description": "The filename of the attached file, including extension"
        }
      },
      "title": "EmailSendRequestAttachment"
    },
    "EmailSentCreateError": {
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/CreateEmailSentRequest"
        },
        "error_message": {
          "type": "string"
        }
      },
      "title": "EmailSentCreateError"
    },
    "EmailSentWithContent": {
      "type": "object",
      "properties": {
        "clicked_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "headers": {
          "type": "string"
        },
        "html_content": {
          "type": "string",
          "description": "Base64 encoded HTML"
        },
        "id": {
          "type": "string"
        },
        "opened_time": {
          "type": "string"
        },
        "original_provider": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "INFUSIONSOFT",
            "MICROSOFT",
            "GOOGLE"
          ]
        },
        "original_provider_id": {
          "type": "string"
        },
        "plain_content": {
          "type": "string",
          "description": "Base64 encoded plain text"
        },
        "provider_source_id": {
          "type": "string"
        },
        "received_time": {
          "type": "string"
        },
        "sent_from_address": {
          "type": "string"
        },
        "sent_from_reply_address": {
          "type": "string"
        },
        "sent_time": {
          "type": "string"
        },
        "sent_to_address": {
          "type": "string"
        },
        "sent_to_bcc_address_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sent_to_cc_address_list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subject": {
          "type": "string"
        }
      },
      "title": "EmailSentWithContent"
    },
    "EmailsSentList": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailSentWithContent"
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailSentCreateError"
          }
        }
      },
      "title": "EmailsSentList"
    },
    "Error": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Error"
    },
    "FaxNumber": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string",
          "enum": [
            "FAX_NUMBER_FIELD_UNSPECIFIED",
            "FAX1",
            "FAX2"
          ]
        },
        "number": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "FaxNumber"
    },
    "FunnelIntegrationAction": {
      "type": "object",
      "properties": {
        "base_url": {
          "type": "string",
          "description": "The base URL of the trigger, that will be used to call the integration related REST endpoints."
        },
        "context": {
          "type": "string",
          "description": "The context of the trigger, that will be used internally to identify the integration."
        },
        "enabled": {
          "type": "boolean",
          "description": "The flag to enable or disable the integration trigger."
        },
        "icon_url": {
          "type": "string",
          "description": "The icon URL of the trigger, that will be used to display the icon of this specific integration trigger."
        },
        "name": {
          "type": "string",
          "example": "My Trigger, MyTrigger, My 1 New Very Exciting Trigger",
          "description": "The name of the trigger, that will be used internally to identify and initiate the trigger."
        },
        "schema_fields": {
          "type": "array",
          "example": "\"schema_fields\": [\n                {\n                    \"name\": \"my_schema_field\",\n                    \"type\": \"String\",\n                    \"label\": \"My Schema Field\"\n                },\n                {\n                    \"name\": \"num_sales\",\n                    \"type\": \"Integer\",\n                    \"label\": \"Number of Sales\"\n                }\n\n            ],",
          "description": "The schema for this trigger that can be used in the builder context, and populated when a trigger is initiated.",
          "items": {
            "$ref": "#/definitions/FunnelIntegrationSchemaField"
          }
        }
      },
      "title": "FunnelIntegrationAction"
    },
    "FunnelIntegrationHttpRequest": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "example": {
            "contact_id": "123"
          },
          "description": "The body of the HTTP request that will be made when this action is processed in the builder(s)."
        },
        "call_type": {
          "type": "string",
          "example": "POST",
          "description": "The type of HTTP request that will be made when this action is processed in the builder(s)."
        },
        "header_parameters": {
          "type": "object",
          "example": {
            "header1": "value1",
            "contact_name": "~Contact.FirstName~"
          },
          "description": "A map of the header parameters of the HTTP request that will be made when this action is processed in the builder(s).",
          "additionalProperties": {
            "type": "string"
          }
        },
        "query_parameters": {
          "type": "object",
          "example": {
            "param1": "value1",
            "contact_name": "~Contact.FirstName~"
          },
          "description": "A map of the query parameters of the HTTP request that will be made when this action is processed in the builder(s).",
          "additionalProperties": {
            "type": "string"
          }
        },
        "url": {
          "type": "string",
          "example": "https://api.example.com",
          "description": "The URL of the HTTP request that will be made when this action is processed in the builder(s)."
        }
      },
      "title": "FunnelIntegrationHttpRequest"
    },
    "FunnelIntegrationSchemaField": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string",
          "example": "My Integration Field",
          "description": "The label that will be used to show the name of the field in the UI."
        },
        "name": {
          "type": "string",
          "example": "my_integration_field",
          "description": "The name of the schema field. Will be the defauly label, if no label is provided."
        },
        "type": {
          "type": "string",
          "example": "String",
          "description": "The data type of the field."
        }
      },
      "title": "FunnelIntegrationSchemaField"
    },
    "FunnelIntegrationTriggerEventDTO": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "integer",
          "format": "int64"
        },
        "oracle_id": {
          "type": "string"
        },
        "schema_data": {
          "type": "string"
        }
      },
      "title": "FunnelIntegrationTriggerEventDTO"
    },
    "FunnelIntegrationTriggerResultDTO": {
      "type": "object",
      "properties": {
        "automation_id": {
          "type": "integer",
          "format": "int64"
        },
        "goal_id": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "schema_data": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "title": "FunnelIntegrationTriggerResultDTO"
    },
    "GetApplicationEnabledStatusResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        }
      },
      "title": "GetApplicationEnabledStatusResponse"
    },
    "GetBusinessProfileResponse": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/BusinessProfileAddressResponse"
        },
        "business_goals": {
          "type": "array",
          "description": "The goals of this business, ie. Grow Business, Convert more leads",
          "items": {
            "type": "string"
          }
        },
        "business_primary_color": {
          "type": "string"
        },
        "business_secondary_color": {
          "type": "string"
        },
        "business_type": {
          "type": "string",
          "description": "The type of business"
        },
        "currency_code": {
          "type": "string",
          "example": "USD",
          "description": "ISO 4217 Currency Code"
        },
        "email": {
          "type": "string"
        },
        "language_tag": {
          "type": "string"
        },
        "logo_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "time_zone": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "GetBusinessProfileResponse",
      "description": "Profile information about the business that owns/uses this account"
    },
    "GetContactOptionTypesResponse": {
      "type": "object",
      "properties": {
        "option_types": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "GetContactOptionTypesResponse"
    },
    "GetNoteResponse": {
      "type": "object",
      "properties": {
        "assigned_to_user": {
          "$ref": "#/definitions/BasicUser"
        },
        "contact_id": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "created_by_user_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_updated_by_user_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "update_time": {
          "type": "string"
        }
      },
      "title": "GetNoteResponse"
    },
    "GetSettingsResponse": {
      "type": "object",
      "properties": {
        "affiliate": {
          "$ref": "#/definitions/ApplicationConfigurationModuleAffiliate"
        },
        "application": {
          "$ref": "#/definitions/ApplicationConfigurationModuleApplication"
        },
        "appointment": {
          "$ref": "#/definitions/ApplicationConfigurationModuleAppointment"
        },
        "contact": {
          "$ref": "#/definitions/ApplicationConfigurationModuleContact"
        },
        "ecommerce": {
          "$ref": "#/definitions/ApplicationConfigurationModuleEcommerce"
        },
        "email": {
          "$ref": "#/definitions/ApplicationConfigurationModuleEmail"
        },
        "forms": {
          "$ref": "#/definitions/ApplicationConfigurationModuleForms"
        },
        "fulfillment": {
          "$ref": "#/definitions/ApplicationConfigurationModuleFulfillment"
        },
        "invoice": {
          "$ref": "#/definitions/ApplicationConfigurationModuleInvoice"
        },
        "note": {
          "$ref": "#/definitions/ApplicationConfigurationModuleNote"
        },
        "opportunity": {
          "$ref": "#/definitions/ApplicationConfigurationModuleOpportunity"
        },
        "task": {
          "$ref": "#/definitions/ApplicationConfigurationModuleTask"
        },
        "template": {
          "$ref": "#/definitions/ApplicationConfigurationModuleTemplate"
        }
      },
      "title": "GetSettingsResponse"
    },
    "GetTagCategoryResponse": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "GetTagCategoryResponse"
    },
    "GetUserInfoResponse": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "family_name": {
          "type": "string"
        },
        "given_name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "is_admin": {
          "type": "boolean"
        },
        "keap_id": {
          "type": "string"
        },
        "middle_name": {
          "type": "string"
        },
        "preferred_name": {
          "type": "string"
        },
        "sub": {
          "type": "string"
        }
      },
      "title": "GetUserInfoResponse"
    },
    "Goal": {
      "type": "object",
      "properties": {
        "historical_contact_counts": {
          "$ref": "#/definitions/HistoricalCounts"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next_sequence_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "previous_sequence_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "WebForm",
            "LandingPage",
            "Survey",
            "LinkClick",
            "EmailOpened",
            "Score",
            "Purchase",
            "FailedPurchase",
            "Quote",
            "WebsiteTrigger",
            "InternalForm",
            "SmartForm",
            "AppointmentEvent",
            "Task",
            "StageMove",
            "Note",
            "Tag",
            "PipelineStageMove",
            "UnlayerLandingPage",
            "GroSocial",
            "TwitterForm",
            "API",
            "WordPress",
            "NewLandingPage",
            "IntegrationTrigger"
          ]
        }
      },
      "title": "Goal"
    },
    "HistoricalCounts": {
      "type": "object",
      "properties": {
        "24_hours": {
          "type": "integer",
          "format": "int32"
        },
        "30_days": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "HistoricalCounts"
    },
    "InvoiceOrderPayment": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "invoice_id": {
          "type": "string"
        },
        "last_updated_time": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "pay_status": {
          "type": "string",
          "enum": [
            "MANUAL_PAID",
            "REFUNDED",
            "VOIDED",
            "PAYPAL_PAID",
            "APPROVED",
            "FAILED",
            "ERROR",
            "PENDING"
          ]
        },
        "pay_time": {
          "type": "string"
        },
        "payment_id": {
          "type": "string"
        },
        "refund_invoice_payment_id": {
          "type": "string"
        },
        "skip_commission": {
          "type": "boolean"
        }
      },
      "title": "InvoiceOrderPayment"
    },
    "Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next_item_id": {
          "type": "string"
        },
        "previous_item_id": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "NULL",
            "Start",
            "Wait",
            "DelayTimer",
            "ContactTimer",
            "DateTimer",
            "AppointmentTimer",
            "Email",
            "BardEmail",
            "UnlayerEmail",
            "EmailConfirm",
            "Voice",
            "Fax",
            "Letter",
            "AutomatedSms",
            "Tag",
            "Opportunity",
            "Note",
            "Task",
            "CompleteTasks",
            "Appointment",
            "AssignOwner",
            "FieldValue",
            "Fulfillment",
            "CreateOrder",
            "Deal",
            "AddToSequence",
            "CancelSubscription",
            "MoveOpportunity",
            "Http",
            "CustomerHub",
            "HttpRequest",
            "IntegrationAction",
            "ActionSet"
          ]
        }
      },
      "title": "Item"
    },
    "LandingPage": {
      "type": "object",
      "properties": {
        "html_preview_url": {
          "type": "string"
        },
        "html_url": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "template_group_status": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "title": "LandingPage"
    },
    "LeadSource": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/LeadSourceCategory"
        },
        "description": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "status_is_active": {
          "type": "boolean"
        },
        "vendor": {
          "type": "string"
        }
      },
      "title": "LeadSource"
    },
    "LeadSourceCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "LeadSourceCategory"
    },
    "Link": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "link_type_id": {
          "type": "string"
        },
        "link_type_name": {
          "type": "string"
        },
        "linked_contact_id": {
          "type": "string"
        }
      },
      "title": "Link"
    },
    "LinkContactsRequest": {
      "type": "object",
      "properties": {
        "contact1_id": {
          "type": "string"
        },
        "contact2_id": {
          "type": "string"
        },
        "link_type_id": {
          "type": "string"
        }
      },
      "title": "LinkContactsRequest"
    },
    "ListAffiliateCommissionProgramsResponse": {
      "type": "object",
      "properties": {
        "commission_programs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffiliateProgramV2"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListAffiliateCommissionProgramsResponse"
    },
    "ListAffiliateCommissionResponse": {
      "type": "object",
      "properties": {
        "AffiliateCommissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffiliateCommission"
          }
        },
        "next_page_token": {
          "type": "string"
        },
        "total_aff_comm_earned": {
          "type": "number",
          "format": "double"
        },
        "total_claw_back": {
          "type": "number",
          "format": "double"
        },
        "total_comm_earned": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ListAffiliateCommissionResponse"
    },
    "ListAffiliateLinksResponse": {
      "type": "object",
      "properties": {
        "affiliate_links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffiliateLink"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListAffiliateLinksResponse"
    },
    "ListAffiliateSummariesResponse": {
      "type": "object",
      "properties": {
        "affiliate_summaries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AffiliateSummaryRecord"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListAffiliateSummariesResponse"
    },
    "ListAutomationCategoryResponse": {
      "type": "object",
      "properties": {
        "automation_categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AutomationCategory"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListAutomationCategoryResponse"
    },
    "ListAutomationIdsResponse": {
      "type": "object",
      "properties": {
        "automation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locked_automation_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ListAutomationIdsResponse"
    },
    "ListAutomationResponse": {
      "type": "object",
      "properties": {
        "automation_count": {
          "type": "integer",
          "format": "int32"
        },
        "automations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Automation"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListAutomationResponse"
    },
    "ListBasicContactResponse": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicContact"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListBasicContactResponse"
    },
    "ListCampaignsResponse": {
      "type": "object",
      "properties": {
        "campaigns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Campaign"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListCampaignsResponse"
    },
    "ListCompaniesResponse": {
      "type": "object",
      "properties": {
        "companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListCompaniesResponse"
    },
    "ListContactLinkTypesResponse": {
      "type": "object",
      "properties": {
        "contact_link_types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactLinkType"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListContactLinkTypesResponse"
    },
    "ListContactLinksResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactLink"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListContactLinksResponse"
    },
    "ListContactsResponse": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListContactsResponse"
    },
    "ListCountriesResponse": {
      "type": "object",
      "required": [
        "countries"
      ],
      "properties": {
        "countries": {
          "type": "array",
          "description": "A key-value pair of country code and country name.",
          "items": {
            "$ref": "#/definitions/Country"
          }
        }
      },
      "title": "ListCountriesResponse"
    },
    "ListLandingPagesResponse": {
      "type": "object",
      "properties": {
        "landingpages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LandingPage"
          }
        },
        "next_page_token": {
          "type": "string"
        },
        "page_size": {
          "type": "string"
        },
        "pages": {
          "type": "string"
        }
      },
      "title": "ListLandingPagesResponse"
    },
    "ListLeadSourcesResponse": {
      "type": "object",
      "properties": {
        "leadsources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeadSource"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListLeadSourcesResponse"
    },
    "ListNoteTemplateResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "note_templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NoteTemplate"
          }
        }
      },
      "title": "ListNoteTemplateResponse"
    },
    "ListNotesResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        }
      },
      "title": "ListNotesResponse"
    },
    "ListOpportunitiesResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "opportunities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestV2Opportunity"
          }
        }
      },
      "title": "ListOpportunitiesResponse"
    },
    "ListOpportunityStagesResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestOpportunityStage"
          }
        }
      },
      "title": "ListOpportunityStagesResponse"
    },
    "ListOrderPaymentsResponse": {
      "type": "object",
      "properties": {
        "invoice_order_payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InvoiceOrderPayment"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListOrderPaymentsResponse"
    },
    "ListOrderTotalDiscountsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "order_total_discounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderTotalDiscount"
          }
        }
      },
      "title": "ListOrderTotalDiscountsResponse"
    },
    "ListOrders": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestV2Order"
          }
        }
      },
      "title": "ListOrders"
    },
    "ListProductsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestProduct"
          }
        }
      },
      "title": "ListProductsResponse"
    },
    "ListProvincesResponse": {
      "type": "object",
      "required": [
        "provinces"
      ],
      "properties": {
        "provinces": {
          "type": "array",
          "description": "A key-value pair of province code and province name.",
          "items": {
            "$ref": "#/definitions/Provinces"
          }
        }
      },
      "title": "ListProvincesResponse"
    },
    "ListRestMerchantAccountResponse": {
      "type": "object",
      "properties": {
        "account_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_test": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "USE_DEFAULT",
            "PAY_PAL",
            "PAY_PAL_PAYFLOW_PRO",
            "PAYPAL_COMMERCE",
            "PAYPAL_COMMERCE_UCC",
            "GATEWAY_PAYFLOW_PRO",
            "AUTHORIZE",
            "AUTHORIZE_CARD_PRESENT",
            "POWER_PAY",
            "CART_CONNECT",
            "SAGE_PAY",
            "E_WAY",
            "USA_E_PAY",
            "MONERIS",
            "DPS",
            "DUMMY",
            "INTERNET_SECURE",
            "EASY_PAY_DIRECT",
            "NEXUS",
            "INF_PAY",
            "FLEXPAY",
            "STRIPE",
            "STRIPE_ELEMENTS",
            "WORLD_PAY",
            "RAINFOREST",
            "WEPAY",
            "KEAPPAY",
            "MANUAL"
          ]
        }
      },
      "title": "ListRestMerchantAccountResponse"
    },
    "ListRestMerchantResponse": {
      "type": "object",
      "properties": {
        "default_merchant_account_id": {
          "type": "string"
        },
        "merchant_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ListRestMerchantAccountResponse"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListRestMerchantResponse"
    },
    "ListRestShippingMethodsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "shipping_methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingMethod"
          }
        }
      },
      "title": "ListRestShippingMethodsResponse"
    },
    "ListShippingDiscountsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "shipping_discounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingDiscount"
          }
        }
      },
      "title": "ListShippingDiscountsResponse"
    },
    "ListSubscriptionPlansResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestSubscriptionPlan"
          }
        }
      },
      "title": "ListSubscriptionPlansResponse"
    },
    "ListSubscriptionsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestSubscriptionV2"
          }
        }
      },
      "title": "ListSubscriptionsResponse"
    },
    "ListTagCategoriesResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "tag_categories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      },
      "title": "ListTagCategoriesResponse"
    },
    "ListTaggedCompaniesResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "tagged_companies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedCompany"
          }
        }
      },
      "title": "ListTaggedCompaniesResponse"
    },
    "ListTaggedContactsResponse": {
      "type": "object",
      "properties": {
        "contacts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BasicContact"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      },
      "title": "ListTaggedContactsResponse"
    },
    "ListTagsResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        }
      },
      "title": "ListTagsResponse"
    },
    "ListTasksResponse": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "tasks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Task"
          }
        }
      },
      "title": "ListTasksResponse"
    },
    "ListUserResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "title": "ListUserResponse"
    },
    "Note": {
      "type": "object",
      "properties": {
        "assigned_to_user": {
          "$ref": "#/definitions/BasicUser"
        },
        "contact_id": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "created_by_user_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_updated_by_user_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "update_time": {
          "type": "string"
        }
      },
      "title": "Note"
    },
    "NoteTemplate": {
      "type": "object",
      "properties": {
        "action_type": {
          "type": "string",
          "enum": [
            "APPOINTMENT",
            "CALL",
            "EMAIL",
            "FAX",
            "LETTER",
            "OTHER"
          ]
        },
        "assignment_user_id": {
          "type": "integer",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "notify_users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        }
      },
      "title": "NoteTemplate"
    },
    "ObjectModel": {
      "type": "object",
      "properties": {
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldMetaData"
          }
        },
        "optional_properties": {
          "type": "array",
          "description": "These fields are not transmitted by default on this model, but can be requested by specifying them in a comma-separated list in the optional_properties query parameter.",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "ObjectModel"
    },
    "OpportunityContact": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "company_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "example": 0
        },
        "job_title": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string"
        }
      },
      "title": "OpportunityContact"
    },
    "OpportunityStage": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "details": {
          "$ref": "#/definitions/StageDetails"
        },
        "id": {
          "type": "string",
          "example": 0
        },
        "name": {
          "type": "string"
        },
        "reasons": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "OpportunityStage"
    },
    "OrderItemTax": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "orderItemId": {
          "type": "integer",
          "format": "int64"
        },
        "rate": {
          "type": "number",
          "format": "double"
        },
        "taxTemplateId": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "OrderItemTax"
    },
    "OrderTotalDiscount": {
      "type": "object",
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_id": {
          "type": "string"
        },
        "discount_strategy": {
          "type": "string",
          "enum": [
            "GROSS",
            "NET"
          ]
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "OrderTotalDiscount"
    },
    "Origin": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        }
      },
      "title": "Origin"
    },
    "OriginRequest": {
      "type": "object",
      "properties": {
        "ip_address": {
          "type": "string"
        }
      },
      "title": "OriginRequest"
    },
    "PatchAffiliateRequest": {
      "type": "object",
      "required": [
        "code",
        "status"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "M123",
          "description": "The Affiliate code which have some validations.\n1. The code should not have white spaces\n2. The code should starts with letters\n3. The code minimum 4 characters length"
        },
        "contact_id": {
          "type": "string",
          "example": 1,
          "description": "The contactId identifier , Must be a positive number"
        },
        "name": {
          "type": "string",
          "example": "Affiliate Name",
          "description": "The Affiliate name will be derived from the Contact,\nwhen not explicitly provided"
        },
        "status": {
          "type": "string",
          "example": "ACTIVE",
          "description": "The Affiliate Status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        }
      },
      "title": "PatchAffiliateRequest"
    },
    "PatchBusinessProfileRequest": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/BusinessProfileAddressRequest"
        },
        "business_goals": {
          "type": "array",
          "description": "The goals of this business, ie. Grow Business, Convert more leads",
          "items": {
            "type": "string"
          }
        },
        "business_primary_color": {
          "type": "string"
        },
        "business_secondary_color": {
          "type": "string"
        },
        "currency_code": {
          "type": "string",
          "example": "USD",
          "description": "ISO 4217 Currency Code"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "PatchBusinessProfileRequest",
      "description": "Update profile information about the business that owns/uses this account"
    },
    "PatchCommissionProgramRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Fitness program",
          "description": "The name of the Commission Program"
        },
        "notes": {
          "type": "string",
          "example": "20% default commission",
          "description": "The notes of the Commission Program"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "example": 100,
          "description": "The priority of the Commission Program"
        }
      },
      "title": "PatchCommissionProgramRequest"
    },
    "PatchCompanyRequest": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "company_name": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldValue"
          }
        },
        "email_address": {
          "$ref": "#/definitions/EmailAddress"
        },
        "fax_number": {
          "$ref": "#/definitions/FaxNumber"
        },
        "notes": {
          "type": "string"
        },
        "phone_number": {
          "$ref": "#/definitions/PhoneNumber"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "PatchCompanyRequest"
    },
    "PatchDefaultCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        }
      },
      "title": "PatchDefaultCommissionProgramRequest"
    },
    "PatchOpportunityRequest": {
      "type": "object",
      "properties": {
        "affiliate_id": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "estimated_close_time": {
          "type": "string"
        },
        "include_in_forecast": {
          "type": "boolean"
        },
        "next_action_notes": {
          "type": "string"
        },
        "next_action_time": {
          "type": "string"
        },
        "opportunity_notes": {
          "type": "string"
        },
        "opportunity_title": {
          "type": "string"
        },
        "projected_revenue_high": {
          "type": "number",
          "format": "double"
        },
        "projected_revenue_low": {
          "type": "number",
          "format": "double"
        },
        "stage_id": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      },
      "title": "PatchOpportunityRequest"
    },
    "PatchProductCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        }
      },
      "title": "PatchProductCommissionProgramRequest"
    },
    "PatchSubscriptionCommissionProgramRequest": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "string"
        },
        "percentage": {
          "type": "string"
        },
        "subscription_id": {
          "type": "string"
        }
      },
      "title": "PatchSubscriptionCommissionProgramRequest"
    },
    "PatchUserRequestV2": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "company_name": {
          "type": "string"
        },
        "email_address": {
          "$ref": "#/definitions/EmailAddressRequest"
        },
        "family_name": {
          "type": "string"
        },
        "fax_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FaxNumber"
          }
        },
        "given_name": {
          "type": "string"
        },
        "phone_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        },
        "time_zone": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "PatchUserRequestV2"
    },
    "PaymentMethodConfig": {
      "type": "object",
      "properties": {
        "session_key": {
          "type": "string",
          "description": "A temporary session key required for rendering Keap's payment component."
        }
      },
      "title": "PaymentMethodConfig"
    },
    "PaymentMethodList": {
      "type": "object",
      "properties": {
        "next_page_token": {
          "type": "string"
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestPaymentMethod"
          }
        }
      },
      "title": "PaymentMethodList"
    },
    "PaymentPlan": {
      "type": "object",
      "required": [
        "days_between_payments",
        "number_of_payments",
        "plan_start_date"
      ],
      "properties": {
        "auto_charge": {
          "type": "boolean"
        },
        "credit_card_id": {
          "type": "string"
        },
        "days_between_payments": {
          "type": "integer",
          "format": "int64"
        },
        "initial_payment_amount": {
          "type": "number",
          "format": "double"
        },
        "initial_payment_date": {
          "type": "string"
        },
        "initial_payment_percent": {
          "type": "number",
          "format": "double"
        },
        "number_of_payments": {
          "type": "integer",
          "format": "int64"
        },
        "payment_gateway": {
          "$ref": "#/definitions/RestPaymentGateway"
        },
        "payment_method_id": {
          "type": "string"
        },
        "plan_start_date": {
          "type": "string"
        }
      },
      "title": "PaymentPlan"
    },
    "PaymentResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "invoice_id": {
          "type": "string"
        },
        "payment_amount": {
          "type": "number",
          "format": "double"
        },
        "payment_status_message": {
          "type": "string"
        },
        "transaction_id": {
          "type": "string"
        }
      },
      "title": "PaymentResult"
    },
    "PhoneNumber": {
      "type": "object",
      "properties": {
        "extension": {
          "type": "string"
        },
        "field": {
          "type": "string",
          "enum": [
            "PHONE_NUMBER_FIELD_UNSPECIFIED",
            "PHONE1",
            "PHONE2",
            "PHONE3",
            "PHONE4",
            "PHONE5"
          ]
        },
        "number": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "PhoneNumber"
    },
    "ProductCommission": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "number",
          "format": "double"
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "product_id": {
          "type": "string"
        },
        "product_name": {
          "type": "string"
        },
        "product_price": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "ProductCommission"
    },
    "ProductCommissionProgram": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "ProductCommissionProgram"
    },
    "ProductFixedOption": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "An internal code to reference the option value"
        },
        "price_adjustment": {
          "type": "number",
          "format": "double",
          "description": "Positive value indicates additional amount added to the original price. Negative value indicates subtraction from the original price."
        },
        "value": {
          "type": "string",
          "description": "The displayable label given to the option"
        }
      },
      "title": "ProductFixedOption"
    },
    "ProductOptions": {
      "type": "object",
      "properties": {
        "fixed_options": {
          "type": "array",
          "description": "List of option values for the fixed option",
          "items": {
            "$ref": "#/definitions/ProductFixedOption"
          }
        },
        "name": {
          "type": "string",
          "description": "The option name"
        },
        "required": {
          "type": "boolean",
          "description": "If the user is required to select/fill in an option for the product"
        },
        "type": {
          "type": "string",
          "description": "Can be FIXED or VARIABLE. If FIXED, then fixed_options will be returned. If VARIABLE, then variable_setting will be returned.",
          "enum": [
            "FIXED",
            "VARIABLE"
          ]
        },
        "variable_setting": {
          "description": "The option is a user-defined free-form field. The settings define the restrictions on what can be entered.",
          "$ref": "#/definitions/ProductVariableSetting"
        }
      },
      "title": "ProductOptions"
    },
    "ProductVariableSetting": {
      "type": "object",
      "properties": {
        "contain_spaces": {
          "type": "boolean",
          "description": "If spaces are allowed for the option"
        },
        "contains": {
          "type": "string",
          "description": "Requires the value (excluding start and end) to contain given type. Can be LETTER, NUMBER, or BOTH."
        },
        "end_with": {
          "type": "string",
          "description": "Requires the value to end with the given type. Can be LETTER, NUMBER, or BOTH."
        },
        "max_chars": {
          "type": "integer",
          "format": "int32",
          "description": "Max allowable chars. Its value must be greater than min_chars"
        },
        "min_chars": {
          "type": "integer",
          "format": "int32",
          "description": "Minimum allowable characters"
        },
        "start_with": {
          "type": "string",
          "description": "Requires the value to start with the given type. Can be LETTER, NUMBER, or BOTH."
        },
        "validation_msg": {
          "type": "string",
          "description": "Customized validation message to display when option criteria aren’t met"
        }
      },
      "title": "ProductVariableSetting"
    },
    "Provinces": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Provinces"
    },
    "Referral": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expiration_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "ip_address": {
          "type": "string"
        },
        "referral_partner_id": {
          "type": "string"
        },
        "referral_time": {
          "type": "string"
        },
        "referral_type": {
          "type": "string",
          "enum": [
            "COOKIE",
            "PERMANENT",
            "MANUAL"
          ]
        },
        "source": {
          "type": "string"
        }
      },
      "title": "Referral"
    },
    "RemoveContactsFromSequenceRequest": {
      "type": "object",
      "properties": {
        "contact_ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "RemoveContactsFromSequenceRequest"
    },
    "RemoveContactsFromSequenceResponse": {
      "type": "object",
      "properties": {
        "remove_from_sequence_results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "RemoveContactsFromSequenceResponse"
    },
    "ReportEntryRecord": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportEntryValue"
          }
        }
      },
      "title": "ReportEntryRecord"
    },
    "ReportEntryValue": {
      "type": "object",
      "properties": {
        "field_name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "title": "ReportEntryValue"
    },
    "ReportExecutionResult": {
      "type": "object",
      "properties": {
        "page_token": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportEntryRecord"
          }
        }
      },
      "title": "ReportExecutionResult"
    },
    "RestAffiliate": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "example": "M123",
          "description": "The Affiliate Code"
        },
        "contact_id": {
          "type": "string",
          "example": 1,
          "description": "The ContactID"
        },
        "id": {
          "type": "string",
          "example": 1,
          "description": "The AffiliateId"
        },
        "name": {
          "type": "string",
          "example": "Affiliate Name",
          "description": "The Affiliate Name"
        },
        "status": {
          "type": "string",
          "example": "ACTIVE",
          "description": "The Affiliate Status",
          "enum": [
            "ACTIVE",
            "INACTIVE"
          ]
        },
        "unique_site_id": {
          "type": "string",
          "example": 123456,
          "description": "The Affiliate PortalSite Id"
        }
      },
      "title": "RestAffiliate"
    },
    "RestCreateOrderRequest": {
      "type": "object",
      "required": [
        "contact_id",
        "order_items",
        "order_time",
        "order_title",
        "order_type"
      ],
      "properties": {
        "contact_id": {
          "type": "string"
        },
        "lead_affiliate_id": {
          "type": "string"
        },
        "order_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateRestOrderItemRequest"
          }
        },
        "order_time": {
          "type": "string"
        },
        "order_title": {
          "type": "string"
        },
        "order_type": {
          "type": "string",
          "enum": [
            "OFFLINE",
            "ONLINE"
          ]
        },
        "promo_codes": {
          "type": "array",
          "description": "Uses multiple strings as promo codes. The corresponding discount will be applied to the order.",
          "items": {
            "type": "string"
          }
        },
        "sales_affiliate_id": {
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/AddressInformation"
        }
      },
      "title": "RestCreateOrderRequest"
    },
    "RestEmailAddress": {
      "type": "object",
      "required": [
        "email",
        "opted_in",
        "status"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "opted_in": {
          "type": "boolean"
        },
        "status": {
          "type": "string",
          "enum": [
            "Unengaged Marketable",
            "Unconfirmed",
            "Confirmed (Legacy)",
            "Confirmed",
            "Unengaged NonMarketable",
            "Non-marketable",
            "Lockdown",
            "Soft Bounce",
            "Hard Bounce",
            "Opt-Out",
            "Opt-Out: Admin",
            "Opt-Out: System",
            "List Unsubscribe",
            "Provided Feedback",
            "Reported Spam",
            "Invalid Email",
            "Deactivated/Delinquent Mailbox"
          ]
        }
      },
      "title": "RestEmailAddress"
    },
    "RestOpportunityStage": {
      "type": "object",
      "properties": {
        "checklist_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChecklistItem"
          }
        },
        "created_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "probability": {
          "type": "integer",
          "format": "int32"
        },
        "target_number_days": {
          "type": "integer",
          "format": "int32"
        },
        "updated_time": {
          "type": "string"
        }
      },
      "title": "RestOpportunityStage"
    },
    "RestPaymentGateway": {
      "type": "object",
      "properties": {
        "merchant_account_id": {
          "type": "string"
        },
        "merchant_account_name": {
          "type": "string"
        },
        "use_default": {
          "type": "boolean"
        }
      },
      "title": "RestPaymentGateway"
    },
    "RestPaymentMethod": {
      "type": "object",
      "properties": {
        "cardInfo": {
          "$ref": "#/definitions/CardInfo"
        },
        "dateCreated": {
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "type": "string"
        },
        "paymentMethodType": {
          "type": "string"
        },
        "processorId": {
          "type": "string",
          "format": "uuid"
        },
        "processorType": {
          "type": "string"
        }
      },
      "title": "RestPaymentMethod"
    },
    "RestProduct": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "RestProduct"
    },
    "RestProductOption": {
      "type": "object",
      "properties": {
        "allow_spaces": {
          "type": "boolean"
        },
        "can_contain_character": {
          "type": "boolean"
        },
        "can_contain_number": {
          "type": "boolean"
        },
        "can_end_with_character": {
          "type": "boolean"
        },
        "can_end_with_number": {
          "type": "boolean"
        },
        "can_start_with_character": {
          "type": "boolean"
        },
        "can_start_with_number": {
          "type": "boolean"
        },
        "display_index": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "max_chars": {
          "type": "integer",
          "format": "int32"
        },
        "min_chars": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "text_message": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIXED",
            "VARIABLE"
          ]
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestProductOptionValue"
          }
        }
      },
      "title": "RestProductOption"
    },
    "RestProductOptionValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "is_default": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "price_adjustment": {
          "type": "number",
          "format": "double"
        },
        "sku": {
          "type": "string"
        }
      },
      "title": "RestProductOptionValue"
    },
    "RestSubscriptionPlan": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "cycle": {
          "type": "string"
        },
        "frequency": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "subscription_plan_index": {
          "type": "integer",
          "format": "int32"
        },
        "subscription_plan_name": {
          "type": "string"
        }
      },
      "title": "RestSubscriptionPlan"
    },
    "RestSubscriptionV2": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "allow_tax": {
          "type": "boolean"
        },
        "auto_charge": {
          "type": "boolean"
        },
        "billing_amount": {
          "type": "number",
          "format": "double"
        },
        "billing_cycle": {
          "type": "string",
          "enum": [
            "YEAR",
            "MONTH",
            "WEEK",
            "DAY"
          ]
        },
        "billing_frequency": {
          "type": "integer",
          "format": "int32"
        },
        "contact_id": {
          "type": "string"
        },
        "end_date": {
          "type": "string",
          "format": "date"
        },
        "id": {
          "type": "string"
        },
        "next_bill_date": {
          "type": "string",
          "format": "date"
        },
        "payment_gateway_id": {
          "type": "string"
        },
        "payment_method_id": {
          "type": "integer",
          "format": "int64"
        },
        "product_id": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "sale_affiliate_id": {
          "type": "string"
        },
        "start_date": {
          "type": "string",
          "format": "date"
        },
        "subscription_plan_id": {
          "type": "string"
        }
      },
      "title": "RestSubscriptionV2"
    },
    "RestV2Opportunity": {
      "type": "object",
      "required": [
        "contact",
        "opportunity_title",
        "stage"
      ],
      "properties": {
        "affiliate_id": {
          "type": "string"
        },
        "contact": {
          "$ref": "#/definitions/OpportunityContact"
        },
        "created_time": {
          "type": "string"
        },
        "custom_fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomField"
          }
        },
        "estimated_close_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "include_in_forecast": {
          "type": "boolean"
        },
        "last_updated_time": {
          "type": "string"
        },
        "next_action_notes": {
          "type": "string"
        },
        "next_action_time": {
          "type": "string"
        },
        "opportunity_notes": {
          "type": "string"
        },
        "opportunity_title": {
          "type": "string"
        },
        "projected_revenue_high": {
          "type": "number",
          "format": "double"
        },
        "projected_revenue_low": {
          "type": "number",
          "format": "double"
        },
        "stage": {
          "$ref": "#/definitions/OpportunityStage"
        },
        "user": {
          "$ref": "#/definitions/RestV2User"
        }
      },
      "title": "RestV2Opportunity"
    },
    "RestV2Order": {
      "type": "object",
      "properties": {
        "allow_payment": {
          "type": "boolean"
        },
        "allow_paypal": {
          "type": "boolean"
        },
        "contact": {
          "$ref": "#/definitions/BasicContact"
        },
        "creation_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "invoice_number": {
          "type": "string"
        },
        "lead_affiliate_id": {
          "type": "string"
        },
        "modification_time": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "order_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RestV2OrderItem"
          }
        },
        "order_time": {
          "type": "string"
        },
        "order_type": {
          "type": "string"
        },
        "payment_plan": {
          "$ref": "#/definitions/PaymentPlan"
        },
        "recurring": {
          "type": "boolean"
        },
        "refund_total": {
          "type": "number",
          "format": "double"
        },
        "sales_affiliate_id": {
          "type": "string"
        },
        "shipping_information": {
          "$ref": "#/definitions/ShippingInformation"
        },
        "source_type": {
          "type": "string",
          "enum": [
            "INVOICE",
            "API",
            "CHECKOUT_FORM",
            "MANUAL_PAYMENT",
            "UNKNOWN",
            "QBO_SYNC"
          ]
        },
        "status": {
          "type": "string"
        },
        "terms": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "total": {
          "type": "number",
          "format": "double"
        },
        "total_due": {
          "type": "number",
          "format": "double"
        },
        "total_paid": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "RestV2Order"
    },
    "RestV2OrderItem": {
      "type": "object",
      "properties": {
        "billing_cycle": {
          "type": "integer",
          "format": "int32"
        },
        "cost": {
          "type": "number",
          "format": "double"
        },
        "cycle": {
          "type": "string",
          "example": "YEARLY",
          "description": "The interval at which the customer is charged for the subscription.",
          "enum": [
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "YEARLY"
          ]
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "type": "number",
          "format": "double"
        },
        "frequency": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Interval at which a customer receives a product or service as part of a subscription plan."
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "notes": {
          "type": "string"
        },
        "number_of_payments": {
          "type": "integer",
          "format": "int32"
        },
        "order_item_taxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderItemTax"
          }
        },
        "price": {
          "type": "number",
          "format": "double"
        },
        "product": {
          "$ref": "#/definitions/RestProduct"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "special": {
          "$ref": "#/definitions/Discount"
        },
        "subscription": {
          "$ref": "#/definitions/RestV2Subscription"
        },
        "subscription_based": {
          "type": "boolean"
        },
        "subscription_id": {
          "type": "string"
        },
        "subscription_plan": {
          "$ref": "#/definitions/RestSubscriptionPlan"
        },
        "type": {
          "type": "string",
          "enum": [
            "UNKNOWN",
            "SHIPPING",
            "TAX",
            "SERVICE",
            "PRODUCT",
            "UPSELL",
            "FINANCECHARGE",
            "SPECIAL",
            "PROGRAM",
            "SUBSCRIPTION",
            "SPECIAL_FREE_TRAIL_DAYS",
            "SPECIAL_ORDER_TOTAL",
            "SPECIAL_PRODUCT",
            "SPECIAL_CATEGORY",
            "SPECIAL_SHIPPING",
            "TIP",
            "OTHER"
          ]
        }
      },
      "title": "RestV2OrderItem"
    },
    "RestV2PatchOrderRequest": {
      "type": "object",
      "properties": {
        "contact_id": {
          "type": "string"
        },
        "lead_affiliate_id": {
          "type": "string"
        },
        "order_time": {
          "type": "string"
        },
        "order_title": {
          "type": "string"
        },
        "order_type": {
          "type": "string",
          "enum": [
            "OFFLINE",
            "ONLINE"
          ]
        },
        "promo_codes": {
          "type": "array",
          "description": "Uses multiple strings as promo codes. The corresponding discount will be applied to the order.",
          "items": {
            "type": "string"
          }
        },
        "sales_affiliate_id": {
          "type": "string"
        },
        "shipping_address": {
          "$ref": "#/definitions/AddressInformation"
        }
      },
      "title": "RestV2PatchOrderRequest"
    },
    "RestV2Product": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "True means active, False means inactive"
        },
        "categories": {
          "type": "array",
          "description": "List of category ids to indicate which categories this product will belong to. Can be empty.",
          "items": {
            "type": "string"
          }
        },
        "city_taxable": {
          "type": "boolean",
          "description": "If city-based taxes should be applied to this product"
        },
        "country_taxable": {
          "type": "boolean",
          "description": "If country-based taxes should be applied to this product"
        },
        "description": {
          "type": "string",
          "description": "Product long description"
        },
        "id": {
          "type": "string",
          "description": "The product ID"
        },
        "name": {
          "type": "string",
          "description": "Product name"
        },
        "options": {
          "type": "array",
          "description": "List of product options. Can be empty.",
          "items": {
            "$ref": "#/definitions/ProductOptions"
          }
        },
        "price": {
          "description": "The product price",
          "$ref": "#/definitions/CurrencyValue"
        },
        "short_description": {
          "type": "string",
          "description": "Product short description"
        },
        "sku": {
          "type": "string",
          "description": "Product SKU"
        },
        "state_taxable": {
          "type": "boolean",
          "description": "If state-based taxes should be applied to this product"
        },
        "storefront_hidden": {
          "type": "boolean",
          "description": "If the product should not be shown in the storefront"
        },
        "subscription_only": {
          "type": "boolean",
          "description": "If the product is a subscription-only product"
        },
        "subscription_plans": {
          "type": "array",
          "description": "List of subscription plans associated with the product. Can be empty.",
          "items": {
            "$ref": "#/definitions/SubscriptionPlan"
          }
        },
        "taxable": {
          "type": "boolean",
          "description": "Whether or not the product should be taxed"
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "Product weight"
        }
      },
      "title": "RestV2Product"
    },
    "RestV2Subscription": {
      "type": "object",
      "properties": {
        "subscription_active": {
          "type": "boolean"
        },
        "subscription_cycles_completed": {
          "type": "integer",
          "format": "int32"
        },
        "subscription_end_date": {
          "type": "string"
        },
        "subscription_id": {
          "type": "string"
        },
        "subscription_next_bill_date": {
          "type": "string"
        },
        "subscription_start_date": {
          "type": "string"
        }
      },
      "title": "RestV2Subscription"
    },
    "RestV2User": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      },
      "title": "RestV2User"
    },
    "SaveAutomationCategoryRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "SaveAutomationCategoryRequest"
    },
    "Sequence": {
      "type": "object",
      "properties": {
        "active_contact_count": {
          "type": "integer",
          "format": "int32"
        },
        "active_contact_count_completed": {
          "type": "integer",
          "format": "int32"
        },
        "historical_contact_count": {
          "$ref": "#/definitions/HistoricalCounts"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "paths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SequencePath"
          }
        }
      },
      "title": "Sequence"
    },
    "SequencePath": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Item"
          }
        }
      },
      "title": "SequencePath"
    },
    "SetDefaultCommissionProgramResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "SetDefaultCommissionProgramResponse"
    },
    "ShippingDiscount": {
      "type": "object",
      "properties": {
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_id": {
          "type": "string"
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "ShippingDiscount"
    },
    "ShippingInformation": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "company": {
          "$ref": "#/definitions/BasicCompany"
        },
        "family_name": {
          "type": "string"
        },
        "given_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "invoice_to_company": {
          "type": "boolean"
        },
        "phone_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        }
      },
      "title": "ShippingInformation"
    },
    "ShippingMethod": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "international": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "settings": {
          "$ref": "#/definitions/ShippingMethodSettings"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "title": "ShippingMethod"
    },
    "ShippingMethodSettings": {
      "type": "object",
      "title": "ShippingMethodSettings"
    },
    "SocialAccount": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "SOCIAL_ACCOUNT_TYPE_UNSPECIFIED",
            "FACEBOOK",
            "LINKED_IN",
            "TWITTER",
            "INSTAGRAM",
            "SNAPCHAT",
            "YOUTUBE",
            "PINTEREST"
          ]
        }
      },
      "title": "SocialAccount"
    },
    "StackTraceElement": {
      "type": "object",
      "properties": {
        "classLoaderName": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "lineNumber": {
          "type": "integer",
          "format": "int32"
        },
        "methodName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "moduleVersion": {
          "type": "string"
        },
        "nativeMethod": {
          "type": "boolean"
        }
      },
      "title": "StackTraceElement"
    },
    "StageDetails": {
      "type": "object",
      "properties": {
        "checklist_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CheckListItemDetails"
          }
        },
        "probability": {
          "type": "integer",
          "format": "int32"
        },
        "stage_order": {
          "type": "integer",
          "format": "int32"
        },
        "target_num_days": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "StageDetails"
    },
    "SubscriptionCommission": {
      "type": "object",
      "properties": {
        "dollar_amount": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "plan_price": {
          "type": "number",
          "format": "double"
        },
        "subscription_id": {
          "type": "string"
        }
      },
      "title": "SubscriptionCommission"
    },
    "SubscriptionCommissionProgram": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "title": "SubscriptionCommissionProgram"
    },
    "SubscriptionPlan": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "description": "If the subscription plan should be active/available for purchase"
        },
        "billing_cycle": {
          "type": "string",
          "description": "How frequent to bill. Can be: DAILY, WEEKLY, MONTHLY, or YEARLY"
        },
        "billing_frequency": {
          "type": "integer",
          "format": "int32",
          "description": "How many times per billing cycle to bill"
        },
        "id": {
          "type": "string",
          "description": "The subscription plan id"
        },
        "number_of_cycles": {
          "type": "integer",
          "format": "int32",
          "description": "How many billing cycles to bill. Optional field i.e. can be no value or 0."
        },
        "order_index": {
          "type": "integer",
          "format": "int32",
          "description": "Determines the order in which the plan will be displayed"
        },
        "plan_price": {
          "description": "The price of the subscription plan",
          "$ref": "#/definitions/CurrencyValue"
        },
        "prorate": {
          "type": "boolean",
          "description": "If the subscription plan should allow prorating"
        }
      },
      "title": "SubscriptionPlan"
    },
    "Tag": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryReference"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "Tag"
    },
    "TaggedCompany": {
      "type": "object",
      "properties": {
        "applied_time": {
          "type": "string"
        },
        "company": {
          "$ref": "#/definitions/Company"
        }
      },
      "title": "TaggedCompany"
    },
    "Task": {
      "type": "object",
      "properties": {
        "assigned_to_user_id": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "completion_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "create_time": {
          "type": "string",
          "description": "On initial object the returned value for this property may not accurately represent the exact stored value."
        },
        "created_by_user_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "modification_time": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "CRITICAL",
            "ESSENTIAL",
            "NONESSENTIAL"
          ]
        },
        "remind_time_mins": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "EMAIL",
            "CALL",
            "APPOINTMENT",
            "FAX",
            "LETTER",
            "OTHER"
          ]
        }
      },
      "title": "Task"
    },
    "Throwable": {
      "type": "object",
      "properties": {
        "cause": {
          "$ref": "#/definitions/Throwable"
        },
        "localizedMessage": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "stackTrace": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          }
        },
        "suppressed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Throwable"
          }
        }
      },
      "title": "Throwable"
    },
    "UpdateAutomationCategoryRequest": {
      "type": "object",
      "properties": {
        "apply_category": {
          "type": "boolean"
        },
        "automation_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "category_ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "title": "UpdateAutomationCategoryRequest"
    },
    "UpdateCustomFieldMetaDataRequest": {
      "type": "object",
      "properties": {
        "group_id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomFieldOption"
          }
        }
      },
      "title": "UpdateCustomFieldMetaDataRequest"
    },
    "UpdateEmailAddress": {
      "type": "object",
      "required": [
        "opted_in",
        "reason"
      ],
      "properties": {
        "opted_in": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      },
      "title": "UpdateEmailAddress"
    },
    "UpdateNoteRequest": {
      "type": "object",
      "required": [
        "user_id"
      ],
      "properties": {
        "contact_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "A value for either `title` or `type` is required."
        },
        "type": {
          "type": "string",
          "description": "A value for either `title` or `type` is required. The value may be one of `Appointment`, `Call`, `Email`, `Fax`, `Letter` or `Other` in Keap Max/Pro, or an admin-configured value in Classic."
        },
        "user_id": {
          "type": "string"
        }
      },
      "title": "UpdateNoteRequest"
    },
    "UpdateNoteResponse": {
      "type": "object",
      "properties": {
        "assigned_to_user": {
          "$ref": "#/definitions/BasicUser"
        },
        "contact_id": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "created_by_user_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_updated_by_user_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "update_time": {
          "type": "string"
        }
      },
      "title": "UpdateNoteResponse"
    },
    "UpdateOpportunityStageChecklistItem": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "required": {
          "type": "boolean"
        }
      },
      "title": "UpdateOpportunityStageChecklistItem"
    },
    "UpdateOpportunityStageRequest": {
      "type": "object",
      "properties": {
        "checklist_items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UpdateOpportunityStageChecklistItem"
          }
        },
        "name": {
          "type": "string",
          "example": "Qualified"
        },
        "order": {
          "type": "integer",
          "format": "int32"
        },
        "probability": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "must be an integer between 0 and 100."
        },
        "target_number_days": {
          "type": "integer",
          "format": "int32",
          "description": "Value should be >=0."
        }
      },
      "title": "UpdateOpportunityStageRequest"
    },
    "UpdateOrderTotalDiscountRequest": {
      "type": "object",
      "properties": {
        "apply_to_commissions": {
          "type": "boolean"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_strategy": {
          "type": "string",
          "enum": [
            "GROSS",
            "NET"
          ]
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UpdateOrderTotalDiscountRequest"
    },
    "UpdateShippingDiscountRequest": {
      "type": "object",
      "properties": {
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DiscountCriteria"
          }
        },
        "description": {
          "type": "string"
        },
        "discount_type": {
          "type": "string",
          "enum": [
            "AMOUNT",
            "PERCENT"
          ]
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UpdateShippingDiscountRequest"
    },
    "UpdateTagCategoryResponse": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UpdateTagCategoryResponse"
    },
    "UpdateTagResponse": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryReference"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "UpdateTagResponse"
    },
    "UpdateTaskResponse": {
      "type": "object",
      "properties": {
        "assigned_to_user_id": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "completion_time": {
          "type": "string"
        },
        "contact_id": {
          "type": "string"
        },
        "create_time": {
          "type": "string",
          "description": "On initial object the returned value for this property may not accurately represent the exact stored value."
        },
        "created_by_user_id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "due_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "modification_time": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "enum": [
            "CRITICAL",
            "ESSENTIAL",
            "NONESSENTIAL"
          ]
        },
        "remind_time_mins": {
          "type": "integer",
          "format": "int32"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "EMAIL",
            "CALL",
            "APPOINTMENT",
            "FAX",
            "LETTER",
            "OTHER"
          ]
        }
      },
      "title": "UpdateTaskResponse"
    },
    "User": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "admin": {
          "type": "boolean"
        },
        "company_name": {
          "type": "string"
        },
        "create_time": {
          "type": "string"
        },
        "created_by": {
          "type": "integer",
          "format": "int64"
        },
        "email_addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmailAddress"
          }
        },
        "family_name": {
          "type": "string"
        },
        "fax_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FaxNumber"
          }
        },
        "given_name": {
          "type": "string"
        },
        "global_user_id": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "keap_id": {
          "type": "string"
        },
        "partner": {
          "type": "boolean"
        },
        "phone_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PhoneNumber"
          }
        },
        "social_accounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SocialAccount"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "Active",
            "Invited",
            "Inactive",
            "NotAUser"
          ]
        },
        "time_zone": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "update_time": {
          "type": "string"
        },
        "updated_by": {
          "type": "integer",
          "format": "int64"
        },
        "website": {
          "type": "string"
        }
      },
      "title": "User"
    }
  }
}
