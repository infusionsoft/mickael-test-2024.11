import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext, HttpInfo } from '../http/http';
import { AffiliateAddToProgramRequest } from '../models/AffiliateAddToProgramRequest';
import { AffiliateCommissionEarned } from '../models/AffiliateCommissionEarned';
import { AffiliateCommissionProgramResponse } from '../models/AffiliateCommissionProgramResponse';
import { AffiliateLink } from '../models/AffiliateLink';
import { AffiliateProgramV2 } from '../models/AffiliateProgramV2';
import { AffiliateRemoveFromProgramRequest } from '../models/AffiliateRemoveFromProgramRequest';
import { CreateAffiliateRequest } from '../models/CreateAffiliateRequest';
import { CreateCommissionProgramRequest } from '../models/CreateCommissionProgramRequest';
import { CreateCustomFieldRequest } from '../models/CreateCustomFieldRequest';
import { CreateDefaultCommissionProgramRequest } from '../models/CreateDefaultCommissionProgramRequest';
import { CreateOrPatchAffiliateLinkRequest } from '../models/CreateOrPatchAffiliateLinkRequest';
import { CreateProductCommissionProgramRequest } from '../models/CreateProductCommissionProgramRequest';
import { CreateSubscriptionCommissionProgramRequest } from '../models/CreateSubscriptionCommissionProgramRequest';
import { CustomFieldMetaData } from '../models/CustomFieldMetaData';
import { DeleteSubscriptionPlanCommissionRequest } from '../models/DeleteSubscriptionPlanCommissionRequest';
import { ListAffiliateCommissionProgramsResponse } from '../models/ListAffiliateCommissionProgramsResponse';
import { ListAffiliateCommissionResponse } from '../models/ListAffiliateCommissionResponse';
import { ListAffiliateLinksResponse } from '../models/ListAffiliateLinksResponse';
import { ListAffiliateSummariesResponse } from '../models/ListAffiliateSummariesResponse';
import { ObjectModel } from '../models/ObjectModel';
import { PatchAffiliateRequest } from '../models/PatchAffiliateRequest';
import { PatchCommissionProgramRequest } from '../models/PatchCommissionProgramRequest';
import { PatchDefaultCommissionProgramRequest } from '../models/PatchDefaultCommissionProgramRequest';
import { PatchProductCommissionProgramRequest } from '../models/PatchProductCommissionProgramRequest';
import { PatchSubscriptionCommissionProgramRequest } from '../models/PatchSubscriptionCommissionProgramRequest';
import { ProductCommissionProgram } from '../models/ProductCommissionProgram';
import { RestAffiliate } from '../models/RestAffiliate';
import { SetDefaultCommissionProgramResponse } from '../models/SetDefaultCommissionProgramResponse';
import { SubscriptionCommissionProgram } from '../models/SubscriptionCommissionProgram';
import { UpdateCustomFieldMetaDataRequest } from '../models/UpdateCustomFieldMetaDataRequest';
export declare class AffiliateApiRequestFactory extends BaseAPIRequestFactory {
    addAffiliateToProgramUsingPOST(id: string, affiliateAddToProgramRequest: AffiliateAddToProgramRequest, _options?: Configuration): Promise<RequestContext>;
    addAffiliateUsingPOST(insertAffiliate?: CreateAffiliateRequest, _options?: Configuration): Promise<RequestContext>;
    addCommissionProgramUsingPOST(insertCommissionProgram?: CreateCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    assignProductCommissionProgramUsingPOST(commissionProgramId: string, productCommissionProgram?: CreateProductCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    assignSubscriptionCommissionProgramUsingPOST(commissionProgramId: string, subscriptionCommissionProgram?: CreateSubscriptionCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    createAffiliateCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Promise<RequestContext>;
    createDefaultCommissionProgramUsingPOST(commissionProgramId: string, createDefaultCommissionProgramRequest?: CreateDefaultCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    createRedirectLinkUsingPOST(request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Promise<RequestContext>;
    deleteAffiliateCommissionProgramUsingDELETE(commissionProgramId: string, _options?: Configuration): Promise<RequestContext>;
    deleteAffiliateUsingDELETE(id: string, _options?: Configuration): Promise<RequestContext>;
    deleteRedirectLinkUsingDELETE(redirectId: string, _options?: Configuration): Promise<RequestContext>;
    getAffiliateCommissionTotalUsingGET(affiliateId: string, _options?: Configuration): Promise<RequestContext>;
    getAffiliateCommissionsUsingGET(affiliateId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Promise<RequestContext>;
    getAffiliateCustomFieldsUsingGET(_options?: Configuration): Promise<RequestContext>;
    getAffiliateUsingGET1(id: string, _options?: Configuration): Promise<RequestContext>;
    getCommissionProgramUsingGET(commissionProgramId: string, _options?: Configuration): Promise<RequestContext>;
    getRedirectLinkUsingGET(redirectId: string, _options?: Configuration): Promise<RequestContext>;
    listAffiliateCommissionProgramsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Promise<RequestContext>;
    listAffiliateLinksUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Promise<RequestContext>;
    listSummariesUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Promise<RequestContext>;
    patchCommissionProgramUsingPATCH(commissionProgramId: string, patchCommissionProgramRequest: PatchCommissionProgramRequest, updateMask?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    patchDefaultCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchDefaultCommissionProgramRequest?: PatchDefaultCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    patchProductCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchProductCommissionProgramRequest?: PatchProductCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    patchSubscriptionCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchSubscriptionCommissionProgramRequest?: PatchSubscriptionCommissionProgramRequest, _options?: Configuration): Promise<RequestContext>;
    removeAffiliateFromProgramUsingPOST(id: string, removeFromProgramRequest: AffiliateRemoveFromProgramRequest, _options?: Configuration): Promise<RequestContext>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOST(commissionId: string, deleteSubscriptionPlanCommissionRequest: DeleteSubscriptionPlanCommissionRequest, _options?: Configuration): Promise<RequestContext>;
    updateAffiliateCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Promise<RequestContext>;
    updateAffiliateUsingPATCH(id: string, patchAffiliate?: PatchAffiliateRequest, _options?: Configuration): Promise<RequestContext>;
    updateRedirectLinkUsingPATCH(redirectId: string, request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Promise<RequestContext>;
}
export declare class AffiliateApiResponseProcessor {
    addAffiliateToProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    addAffiliateUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RestAffiliate>>;
    addCommissionProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateCommissionProgramResponse>>;
    assignProductCommissionProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ProductCommissionProgram>>;
    assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SubscriptionCommissionProgram>>;
    createAffiliateCustomFieldUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CustomFieldMetaData>>;
    createDefaultCommissionProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SetDefaultCommissionProgramResponse>>;
    createRedirectLinkUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateLink>>;
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    deleteAffiliateUsingDELETEWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    deleteRedirectLinkUsingDELETEWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    getAffiliateCommissionTotalUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateCommissionEarned>>;
    getAffiliateCommissionsUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListAffiliateCommissionResponse>>;
    getAffiliateCustomFieldsUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ObjectModel>>;
    getAffiliateUsingGET1WithHttpInfo(response: ResponseContext): Promise<HttpInfo<RestAffiliate>>;
    getCommissionProgramUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateProgramV2>>;
    getRedirectLinkUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateLink>>;
    listAffiliateCommissionProgramsUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListAffiliateCommissionProgramsResponse>>;
    listAffiliateLinksUsingGETWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListAffiliateLinksResponse>>;
    listSummariesUsingGET1WithHttpInfo(response: ResponseContext): Promise<HttpInfo<ListAffiliateSummariesResponse>>;
    patchCommissionProgramUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateCommissionProgramResponse>>;
    patchDefaultCommissionProgramUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SetDefaultCommissionProgramResponse>>;
    patchProductCommissionProgramUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<ProductCommissionProgram>>;
    patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<SubscriptionCommissionProgram>>;
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(response: ResponseContext): Promise<HttpInfo<void>>;
    updateAffiliateCustomFieldUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<CustomFieldMetaData>>;
    updateAffiliateUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<RestAffiliate>>;
    updateRedirectLinkUsingPATCHWithHttpInfo(response: ResponseContext): Promise<HttpInfo<AffiliateLink>>;
}
