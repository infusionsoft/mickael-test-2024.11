import { HttpInfo } from '../http/http';
import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { AddContactsToSequenceRequest } from '../models/AddContactsToSequenceRequest';
import { AddContactsToSequenceResponse } from '../models/AddContactsToSequenceResponse';
import { AddToAutomationSequenceRequest } from '../models/AddToAutomationSequenceRequest';
import { AddToAutomationSequenceResponse } from '../models/AddToAutomationSequenceResponse';
import { AffiliateAddToProgramRequest } from '../models/AffiliateAddToProgramRequest';
import { AffiliateCommissionEarned } from '../models/AffiliateCommissionEarned';
import { AffiliateCommissionProgramResponse } from '../models/AffiliateCommissionProgramResponse';
import { AffiliateLink } from '../models/AffiliateLink';
import { AffiliateProgramV2 } from '../models/AffiliateProgramV2';
import { AffiliateRemoveFromProgramRequest } from '../models/AffiliateRemoveFromProgramRequest';
import { ApplyRemoveTagRequest } from '../models/ApplyRemoveTagRequest';
import { ApplyTagsResponse } from '../models/ApplyTagsResponse';
import { Automation } from '../models/Automation';
import { AutomationCategory } from '../models/AutomationCategory';
import { Campaign } from '../models/Campaign';
import { CancelSubscriptionsRequest } from '../models/CancelSubscriptionsRequest';
import { CategoryDiscount } from '../models/CategoryDiscount';
import { Company } from '../models/Company';
import { Contact } from '../models/Contact';
import { ContactLink } from '../models/ContactLink';
import { ContactLinkType } from '../models/ContactLinkType';
import { CreateAffiliateRequest } from '../models/CreateAffiliateRequest';
import { CreateAutomationCategoryRequest } from '../models/CreateAutomationCategoryRequest';
import { CreateCommissionProgramRequest } from '../models/CreateCommissionProgramRequest';
import { CreateCompanyRequest } from '../models/CreateCompanyRequest';
import { CreateContactLinkTypeRequest } from '../models/CreateContactLinkTypeRequest';
import { CreateCustomFieldRequest } from '../models/CreateCustomFieldRequest';
import { CreateCustomFieldResponse } from '../models/CreateCustomFieldResponse';
import { CreateDefaultCommissionProgramRequest } from '../models/CreateDefaultCommissionProgramRequest';
import { CreateEmailSentRequest } from '../models/CreateEmailSentRequest';
import { CreateEmailsSentRequest } from '../models/CreateEmailsSentRequest';
import { CreateFunnelIntegrationRequest } from '../models/CreateFunnelIntegrationRequest';
import { CreateFunnelIntegrationTriggerEvents } from '../models/CreateFunnelIntegrationTriggerEvents';
import { CreateLeadSourceRequest } from '../models/CreateLeadSourceRequest';
import { CreateNoteRequest } from '../models/CreateNoteRequest';
import { CreateOpportunityRequest } from '../models/CreateOpportunityRequest';
import { CreateOpportunityStageRequest } from '../models/CreateOpportunityStageRequest';
import { CreateOrPatchAffiliateLinkRequest } from '../models/CreateOrPatchAffiliateLinkRequest';
import { CreatePatchContactRequest } from '../models/CreatePatchContactRequest';
import { CreatePatchTaskRequest } from '../models/CreatePatchTaskRequest';
import { CreatePaymentMethodConfigRequest } from '../models/CreatePaymentMethodConfigRequest';
import { CreatePaymentRequest } from '../models/CreatePaymentRequest';
import { CreateProductCommissionProgramRequest } from '../models/CreateProductCommissionProgramRequest';
import { CreateReferralRequest } from '../models/CreateReferralRequest';
import { CreateRestOrderItemRequest } from '../models/CreateRestOrderItemRequest';
import { CreateSubscriptionCommissionProgramRequest } from '../models/CreateSubscriptionCommissionProgramRequest';
import { CreateSubscriptionV2 } from '../models/CreateSubscriptionV2';
import { CreateTaskRequest } from '../models/CreateTaskRequest';
import { CreateUpdateTagCategoryRequest } from '../models/CreateUpdateTagCategoryRequest';
import { CreateUpdateTagRequest } from '../models/CreateUpdateTagRequest';
import { CreateUserRequestV2 } from '../models/CreateUserRequestV2';
import { CustomFieldMetaData } from '../models/CustomFieldMetaData';
import { DeleteEmailsRequest } from '../models/DeleteEmailsRequest';
import { DeleteEmailsResponse } from '../models/DeleteEmailsResponse';
import { DeleteFunnelIntegrationRequest } from '../models/DeleteFunnelIntegrationRequest';
import { DeleteSubscriptionPlanCommissionRequest } from '../models/DeleteSubscriptionPlanCommissionRequest';
import { EmailSendRequest } from '../models/EmailSendRequest';
import { EmailSentWithContent } from '../models/EmailSentWithContent';
import { EmailsSentList } from '../models/EmailsSentList';
import { FunnelIntegrationTriggerResultDTO } from '../models/FunnelIntegrationTriggerResultDTO';
import { GetApplicationEnabledStatusResponse } from '../models/GetApplicationEnabledStatusResponse';
import { GetBusinessProfileResponse } from '../models/GetBusinessProfileResponse';
import { GetContactOptionTypesResponse } from '../models/GetContactOptionTypesResponse';
import { GetNoteResponse } from '../models/GetNoteResponse';
import { GetSettingsResponse } from '../models/GetSettingsResponse';
import { GetTagCategoryResponse } from '../models/GetTagCategoryResponse';
import { GetUserInfoResponse } from '../models/GetUserInfoResponse';
import { LeadSource } from '../models/LeadSource';
import { LinkContactsRequest } from '../models/LinkContactsRequest';
import { ListAffiliateCommissionProgramsResponse } from '../models/ListAffiliateCommissionProgramsResponse';
import { ListAffiliateCommissionResponse } from '../models/ListAffiliateCommissionResponse';
import { ListAffiliateLinksResponse } from '../models/ListAffiliateLinksResponse';
import { ListAffiliateSummariesResponse } from '../models/ListAffiliateSummariesResponse';
import { ListAutomationCategoryResponse } from '../models/ListAutomationCategoryResponse';
import { ListAutomationIdsResponse } from '../models/ListAutomationIdsResponse';
import { ListAutomationResponse } from '../models/ListAutomationResponse';
import { ListBasicContactResponse } from '../models/ListBasicContactResponse';
import { ListCampaignsResponse } from '../models/ListCampaignsResponse';
import { ListCompaniesResponse } from '../models/ListCompaniesResponse';
import { ListContactLinkTypesResponse } from '../models/ListContactLinkTypesResponse';
import { ListContactLinksResponse } from '../models/ListContactLinksResponse';
import { ListContactsResponse } from '../models/ListContactsResponse';
import { ListCountriesResponse } from '../models/ListCountriesResponse';
import { ListLandingPagesResponse } from '../models/ListLandingPagesResponse';
import { ListLeadSourcesResponse } from '../models/ListLeadSourcesResponse';
import { ListNotesResponse } from '../models/ListNotesResponse';
import { ListOpportunitiesResponse } from '../models/ListOpportunitiesResponse';
import { ListOpportunityStagesResponse } from '../models/ListOpportunityStagesResponse';
import { ListOrders } from '../models/ListOrders';
import { ListProductsResponse } from '../models/ListProductsResponse';
import { ListProvincesResponse } from '../models/ListProvincesResponse';
import { ListRestMerchantResponse } from '../models/ListRestMerchantResponse';
import { ListRestShippingMethodsResponse } from '../models/ListRestShippingMethodsResponse';
import { ListSubscriptionPlansResponse } from '../models/ListSubscriptionPlansResponse';
import { ListTagCategoriesResponse } from '../models/ListTagCategoriesResponse';
import { ListTaggedCompaniesResponse } from '../models/ListTaggedCompaniesResponse';
import { ListTaggedContactsResponse } from '../models/ListTaggedContactsResponse';
import { ListTagsResponse } from '../models/ListTagsResponse';
import { ListTasksResponse } from '../models/ListTasksResponse';
import { ListUserResponse } from '../models/ListUserResponse';
import { Note } from '../models/Note';
import { ObjectModel } from '../models/ObjectModel';
import { PatchAffiliateRequest } from '../models/PatchAffiliateRequest';
import { PatchBusinessProfileRequest } from '../models/PatchBusinessProfileRequest';
import { PatchCommissionProgramRequest } from '../models/PatchCommissionProgramRequest';
import { PatchCompanyRequest } from '../models/PatchCompanyRequest';
import { PatchDefaultCommissionProgramRequest } from '../models/PatchDefaultCommissionProgramRequest';
import { PatchOpportunityRequest } from '../models/PatchOpportunityRequest';
import { PatchProductCommissionProgramRequest } from '../models/PatchProductCommissionProgramRequest';
import { PatchSubscriptionCommissionProgramRequest } from '../models/PatchSubscriptionCommissionProgramRequest';
import { PatchUserRequestV2 } from '../models/PatchUserRequestV2';
import { PaymentMethodConfig } from '../models/PaymentMethodConfig';
import { PaymentMethodList } from '../models/PaymentMethodList';
import { PaymentResult } from '../models/PaymentResult';
import { ProductCommissionProgram } from '../models/ProductCommissionProgram';
import { Referral } from '../models/Referral';
import { RemoveContactsFromSequenceRequest } from '../models/RemoveContactsFromSequenceRequest';
import { RemoveContactsFromSequenceResponse } from '../models/RemoveContactsFromSequenceResponse';
import { ReportExecutionResult } from '../models/ReportExecutionResult';
import { RestAffiliate } from '../models/RestAffiliate';
import { RestCreateOrderRequest } from '../models/RestCreateOrderRequest';
import { RestEmailAddress } from '../models/RestEmailAddress';
import { RestOpportunityStage } from '../models/RestOpportunityStage';
import { RestSubscriptionV2 } from '../models/RestSubscriptionV2';
import { RestV2Opportunity } from '../models/RestV2Opportunity';
import { RestV2Order } from '../models/RestV2Order';
import { RestV2OrderItem } from '../models/RestV2OrderItem';
import { RestV2PatchOrderRequest } from '../models/RestV2PatchOrderRequest';
import { SaveAutomationCategoryRequest } from '../models/SaveAutomationCategoryRequest';
import { SetDefaultCommissionProgramResponse } from '../models/SetDefaultCommissionProgramResponse';
import { SubscriptionCommissionProgram } from '../models/SubscriptionCommissionProgram';
import { Tag } from '../models/Tag';
import { Task } from '../models/Task';
import { UpdateAutomationCategoryRequest } from '../models/UpdateAutomationCategoryRequest';
import { UpdateCustomFieldMetaDataRequest } from '../models/UpdateCustomFieldMetaDataRequest';
import { UpdateEmailAddress } from '../models/UpdateEmailAddress';
import { UpdateNoteRequest } from '../models/UpdateNoteRequest';
import { UpdateNoteResponse } from '../models/UpdateNoteResponse';
import { UpdateTagCategoryResponse } from '../models/UpdateTagCategoryResponse';
import { UpdateTagResponse } from '../models/UpdateTagResponse';
import { UpdateTaskResponse } from '../models/UpdateTaskResponse';
import { User } from '../models/User';
import { AffiliateApiRequestFactory, AffiliateApiResponseProcessor } from "../apis/AffiliateApi";
export declare class ObservableAffiliateApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AffiliateApiRequestFactory, responseProcessor?: AffiliateApiResponseProcessor);
    addAffiliateToProgramUsingPOSTWithHttpInfo(id: string, affiliateAddToProgramRequest: AffiliateAddToProgramRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    addAffiliateToProgramUsingPOST(id: string, affiliateAddToProgramRequest: AffiliateAddToProgramRequest, _options?: Configuration): Observable<void>;
    addAffiliateUsingPOSTWithHttpInfo(insertAffiliate?: CreateAffiliateRequest, _options?: Configuration): Observable<HttpInfo<RestAffiliate>>;
    addAffiliateUsingPOST(insertAffiliate?: CreateAffiliateRequest, _options?: Configuration): Observable<RestAffiliate>;
    addCommissionProgramUsingPOSTWithHttpInfo(insertCommissionProgram?: CreateCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<AffiliateCommissionProgramResponse>>;
    addCommissionProgramUsingPOST(insertCommissionProgram?: CreateCommissionProgramRequest, _options?: Configuration): Observable<AffiliateCommissionProgramResponse>;
    assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, productCommissionProgram?: CreateProductCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<ProductCommissionProgram>>;
    assignProductCommissionProgramUsingPOST(commissionProgramId: string, productCommissionProgram?: CreateProductCommissionProgramRequest, _options?: Configuration): Observable<ProductCommissionProgram>;
    assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, subscriptionCommissionProgram?: CreateSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SubscriptionCommissionProgram>>;
    assignSubscriptionCommissionProgramUsingPOST(commissionProgramId: string, subscriptionCommissionProgram?: CreateSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<SubscriptionCommissionProgram>;
    createAffiliateCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createAffiliateCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, createDefaultCommissionProgramRequest?: CreateDefaultCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SetDefaultCommissionProgramResponse>>;
    createDefaultCommissionProgramUsingPOST(commissionProgramId: string, createDefaultCommissionProgramRequest?: CreateDefaultCommissionProgramRequest, _options?: Configuration): Observable<SetDefaultCommissionProgramResponse>;
    createRedirectLinkUsingPOSTWithHttpInfo(request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    createRedirectLinkUsingPOST(request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<AffiliateLink>;
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteAffiliateCommissionProgramUsingDELETE(commissionProgramId: string, _options?: Configuration): Observable<void>;
    deleteAffiliateUsingDELETEWithHttpInfo(id: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteAffiliateUsingDELETE(id: string, _options?: Configuration): Observable<void>;
    deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteRedirectLinkUsingDELETE(redirectId: string, _options?: Configuration): Observable<void>;
    getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId: string, _options?: Configuration): Observable<HttpInfo<AffiliateCommissionEarned>>;
    getAffiliateCommissionTotalUsingGET(affiliateId: string, _options?: Configuration): Observable<AffiliateCommissionEarned>;
    getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateCommissionResponse>>;
    getAffiliateCommissionsUsingGET(affiliateId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateCommissionResponse>;
    getAffiliateCustomFieldsUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    getAffiliateCustomFieldsUsingGET(_options?: Configuration): Observable<ObjectModel>;
    getAffiliateUsingGET1WithHttpInfo(id: string, _options?: Configuration): Observable<HttpInfo<RestAffiliate>>;
    getAffiliateUsingGET1(id: string, _options?: Configuration): Observable<RestAffiliate>;
    getCommissionProgramUsingGETWithHttpInfo(commissionProgramId: string, _options?: Configuration): Observable<HttpInfo<AffiliateProgramV2>>;
    getCommissionProgramUsingGET(commissionProgramId: string, _options?: Configuration): Observable<AffiliateProgramV2>;
    getRedirectLinkUsingGETWithHttpInfo(redirectId: string, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    getRedirectLinkUsingGET(redirectId: string, _options?: Configuration): Observable<AffiliateLink>;
    listAffiliateCommissionProgramsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateCommissionProgramsResponse>>;
    listAffiliateCommissionProgramsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateCommissionProgramsResponse>;
    listAffiliateLinksUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateLinksResponse>>;
    listAffiliateLinksUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateLinksResponse>;
    listSummariesUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateSummariesResponse>>;
    listSummariesUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateSummariesResponse>;
    patchCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, patchCommissionProgramRequest: PatchCommissionProgramRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<AffiliateCommissionProgramResponse>>;
    patchCommissionProgramUsingPATCH(commissionProgramId: string, patchCommissionProgramRequest: PatchCommissionProgramRequest, updateMask?: Array<string>, _options?: Configuration): Observable<AffiliateCommissionProgramResponse>;
    patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchDefaultCommissionProgramRequest?: PatchDefaultCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SetDefaultCommissionProgramResponse>>;
    patchDefaultCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchDefaultCommissionProgramRequest?: PatchDefaultCommissionProgramRequest, _options?: Configuration): Observable<SetDefaultCommissionProgramResponse>;
    patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchProductCommissionProgramRequest?: PatchProductCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<ProductCommissionProgram>>;
    patchProductCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchProductCommissionProgramRequest?: PatchProductCommissionProgramRequest, _options?: Configuration): Observable<ProductCommissionProgram>;
    patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchSubscriptionCommissionProgramRequest?: PatchSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SubscriptionCommissionProgram>>;
    patchSubscriptionCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchSubscriptionCommissionProgramRequest?: PatchSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<SubscriptionCommissionProgram>;
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(id: string, removeFromProgramRequest: AffiliateRemoveFromProgramRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    removeAffiliateFromProgramUsingPOST(id: string, removeFromProgramRequest: AffiliateRemoveFromProgramRequest, _options?: Configuration): Observable<void>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId: string, deleteSubscriptionPlanCommissionRequest: DeleteSubscriptionPlanCommissionRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOST(commissionId: string, deleteSubscriptionPlanCommissionRequest: DeleteSubscriptionPlanCommissionRequest, _options?: Configuration): Observable<void>;
    updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateAffiliateCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateAffiliateUsingPATCHWithHttpInfo(id: string, patchAffiliate?: PatchAffiliateRequest, _options?: Configuration): Observable<HttpInfo<RestAffiliate>>;
    updateAffiliateUsingPATCH(id: string, patchAffiliate?: PatchAffiliateRequest, _options?: Configuration): Observable<RestAffiliate>;
    updateRedirectLinkUsingPATCHWithHttpInfo(redirectId: string, request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    updateRedirectLinkUsingPATCH(redirectId: string, request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<AffiliateLink>;
}
import { AutomationApiRequestFactory, AutomationApiResponseProcessor } from "../apis/AutomationApi";
export declare class ObservableAutomationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AutomationApiRequestFactory, responseProcessor?: AutomationApiResponseProcessor);
    addContactsToAutomationSequenceUsingPOSTWithHttpInfo(automationId: string, sequenceId: string, addToAutomationSequenceRequest: AddToAutomationSequenceRequest, _options?: Configuration): Observable<HttpInfo<AddToAutomationSequenceResponse>>;
    addContactsToAutomationSequenceUsingPOST(automationId: string, sequenceId: string, addToAutomationSequenceRequest: AddToAutomationSequenceRequest, _options?: Configuration): Observable<AddToAutomationSequenceResponse>;
    deleteAutomationUsingDELETEWithHttpInfo(automationIds: Array<number>, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteAutomationUsingDELETE(automationIds: Array<number>, _options?: Configuration): Observable<void>;
    getAutomationUsingGETWithHttpInfo(automationId: string, _options?: Configuration): Observable<HttpInfo<Automation>>;
    getAutomationUsingGET(automationId: string, _options?: Configuration): Observable<Automation>;
    listAllAutomationIdsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<HttpInfo<ListAutomationIdsResponse>>;
    listAllAutomationIdsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<ListAutomationIdsResponse>;
    listAutomationsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<HttpInfo<ListAutomationResponse>>;
    listAutomationsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<ListAutomationResponse>;
    updateAutomationCategoryUsingPUTWithHttpInfo(updateAutomationCategoryRequest: UpdateAutomationCategoryRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    updateAutomationCategoryUsingPUT(updateAutomationCategoryRequest: UpdateAutomationCategoryRequest, _options?: Configuration): Observable<void>;
}
import { AutomationCategoryApiRequestFactory, AutomationCategoryApiResponseProcessor } from "../apis/AutomationCategoryApi";
export declare class ObservableAutomationCategoryApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: AutomationCategoryApiRequestFactory, responseProcessor?: AutomationCategoryApiResponseProcessor);
    createCategoryUsingPOSTWithHttpInfo(createAutomationCategoryRequest: CreateAutomationCategoryRequest, _options?: Configuration): Observable<HttpInfo<AutomationCategory>>;
    createCategoryUsingPOST(createAutomationCategoryRequest: CreateAutomationCategoryRequest, _options?: Configuration): Observable<AutomationCategory>;
    deleteCategoriesUsingDELETEWithHttpInfo(ids: Array<number>, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteCategoriesUsingDELETE(ids: Array<number>, _options?: Configuration): Observable<void>;
    listCategoriesUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ListAutomationCategoryResponse>>;
    listCategoriesUsingGET(_options?: Configuration): Observable<ListAutomationCategoryResponse>;
    saveCategoryUsingPUTWithHttpInfo(saveAutomationCategoryRequest: SaveAutomationCategoryRequest, _options?: Configuration): Observable<HttpInfo<AutomationCategory>>;
    saveCategoryUsingPUT(saveAutomationCategoryRequest: SaveAutomationCategoryRequest, _options?: Configuration): Observable<AutomationCategory>;
}
import { BusinessProfileApiRequestFactory, BusinessProfileApiResponseProcessor } from "../apis/BusinessProfileApi";
export declare class ObservableBusinessProfileApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: BusinessProfileApiRequestFactory, responseProcessor?: BusinessProfileApiResponseProcessor);
    getBusinessProfileUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetBusinessProfileResponse>>;
    getBusinessProfileUsingGET(_options?: Configuration): Observable<GetBusinessProfileResponse>;
    patchBusinessProfileUsingPATCHWithHttpInfo(updateMask?: Array<string>, businessProfile?: PatchBusinessProfileRequest, _options?: Configuration): Observable<HttpInfo<GetBusinessProfileResponse>>;
    patchBusinessProfileUsingPATCH(updateMask?: Array<string>, businessProfile?: PatchBusinessProfileRequest, _options?: Configuration): Observable<GetBusinessProfileResponse>;
}
import { CampaignApiRequestFactory, CampaignApiResponseProcessor } from "../apis/CampaignApi";
export declare class ObservableCampaignApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CampaignApiRequestFactory, responseProcessor?: CampaignApiResponseProcessor);
    addContactsToCampaignSequenceUsingPOST1WithHttpInfo(campaignId: string, sequenceId: string, addContactsToSequenceRequest: AddContactsToSequenceRequest, _options?: Configuration): Observable<HttpInfo<AddContactsToSequenceResponse>>;
    addContactsToCampaignSequenceUsingPOST1(campaignId: string, sequenceId: string, addContactsToSequenceRequest: AddContactsToSequenceRequest, _options?: Configuration): Observable<AddContactsToSequenceResponse>;
    getCampaignUsingGET1WithHttpInfo(campaignId: string, _options?: Configuration): Observable<HttpInfo<Campaign>>;
    getCampaignUsingGET1(campaignId: string, _options?: Configuration): Observable<Campaign>;
    listCampaignsUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<HttpInfo<ListCampaignsResponse>>;
    listCampaignsUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, stats?: boolean, _options?: Configuration): Observable<ListCampaignsResponse>;
    removeContactsFromCampaignSequenceUsingPOSTWithHttpInfo(campaignId: string, sequenceId: string, removeContactsFromSequenceRequest: RemoveContactsFromSequenceRequest, _options?: Configuration): Observable<HttpInfo<RemoveContactsFromSequenceResponse>>;
    removeContactsFromCampaignSequenceUsingPOST(campaignId: string, sequenceId: string, removeContactsFromSequenceRequest: RemoveContactsFromSequenceRequest, _options?: Configuration): Observable<RemoveContactsFromSequenceResponse>;
}
import { CategoryDiscountApiRequestFactory, CategoryDiscountApiResponseProcessor } from "../apis/CategoryDiscountApi";
export declare class ObservableCategoryDiscountApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CategoryDiscountApiRequestFactory, responseProcessor?: CategoryDiscountApiResponseProcessor);
    deleteDiscountUsingDELETEWithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteDiscountUsingDELETE(discountId: string, _options?: Configuration): Observable<void>;
    getDiscountUsingGETWithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<CategoryDiscount>>;
    getDiscountUsingGET(discountId: string, _options?: Configuration): Observable<CategoryDiscount>;
}
import { CompanyApiRequestFactory, CompanyApiResponseProcessor } from "../apis/CompanyApi";
export declare class ObservableCompanyApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: CompanyApiRequestFactory, responseProcessor?: CompanyApiResponseProcessor);
    createCompanyUsingPOST1WithHttpInfo(company?: CreateCompanyRequest, _options?: Configuration): Observable<HttpInfo<Company>>;
    createCompanyUsingPOST1(company?: CreateCompanyRequest, _options?: Configuration): Observable<Company>;
    deleteCompanyUsingDELETEWithHttpInfo(companyId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteCompanyUsingDELETE(companyId: string, _options?: Configuration): Observable<void>;
    getCompanyUsingGET1WithHttpInfo(companyId: string, fields?: Array<string>, _options?: Configuration): Observable<HttpInfo<Company>>;
    getCompanyUsingGET1(companyId: string, fields?: Array<string>, _options?: Configuration): Observable<Company>;
    listCompaniesUsingGET1WithHttpInfo(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListCompaniesResponse>>;
    listCompaniesUsingGET1(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListCompaniesResponse>;
    patchCompanyUsingPATCHWithHttpInfo(companyId: string, updateMask?: Array<string>, company?: PatchCompanyRequest, _options?: Configuration): Observable<HttpInfo<Company>>;
    patchCompanyUsingPATCH(companyId: string, updateMask?: Array<string>, company?: PatchCompanyRequest, _options?: Configuration): Observable<Company>;
}
import { ContactApiRequestFactory, ContactApiResponseProcessor } from "../apis/ContactApi";
export declare class ObservableContactApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ContactApiRequestFactory, responseProcessor?: ContactApiResponseProcessor);
    createContactLinkTypeUsingPOSTWithHttpInfo(request: CreateContactLinkTypeRequest, _options?: Configuration): Observable<HttpInfo<ContactLinkType>>;
    createContactLinkTypeUsingPOST(request: CreateContactLinkTypeRequest, _options?: Configuration): Observable<ContactLinkType>;
    createContactUsingPOST1WithHttpInfo(contact?: CreatePatchContactRequest, _options?: Configuration): Observable<HttpInfo<Contact>>;
    createContactUsingPOST1(contact?: CreatePatchContactRequest, _options?: Configuration): Observable<Contact>;
    deleteContactUsingDELETE1WithHttpInfo(contactId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteContactUsingDELETE1(contactId: string, _options?: Configuration): Observable<void>;
    getContactUsingGET1WithHttpInfo(contactId: string, fields?: Array<string>, _options?: Configuration): Observable<HttpInfo<Contact>>;
    getContactUsingGET1(contactId: string, fields?: Array<string>, _options?: Configuration): Observable<Contact>;
    getContactsBySearchTermUsingGETWithHttpInfo(searchParam: string, _options?: Configuration): Observable<HttpInfo<ListBasicContactResponse>>;
    getContactsBySearchTermUsingGET(searchParam: string, _options?: Configuration): Observable<ListBasicContactResponse>;
    linkContactsUsingPOSTWithHttpInfo(linkContactsRequest: LinkContactsRequest, _options?: Configuration): Observable<HttpInfo<ContactLink>>;
    linkContactsUsingPOST(linkContactsRequest: LinkContactsRequest, _options?: Configuration): Observable<ContactLink>;
    listContactLinkTypesUsingGETWithHttpInfo(filter?: 'name', orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListContactLinkTypesResponse>>;
    listContactLinkTypesUsingGET(filter?: 'name', orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListContactLinkTypesResponse>;
    listContactLinksUsingGETWithHttpInfo(contactId: string, _options?: Configuration): Observable<HttpInfo<ListContactLinksResponse>>;
    listContactLinksUsingGET(contactId: string, _options?: Configuration): Observable<ListContactLinksResponse>;
    listContactsUsingGET1WithHttpInfo(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListContactsResponse>>;
    listContactsUsingGET1(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListContactsResponse>;
    listPaymentMethodsUsingGETWithHttpInfo(contactId: number, _options?: Configuration): Observable<HttpInfo<PaymentMethodList>>;
    listPaymentMethodsUsingGET(contactId: number, _options?: Configuration): Observable<PaymentMethodList>;
    patchContactUsingPATCHWithHttpInfo(contactId: string, updateMask?: Array<string>, contact?: CreatePatchContactRequest, _options?: Configuration): Observable<HttpInfo<Contact>>;
    patchContactUsingPATCH(contactId: string, updateMask?: Array<string>, contact?: CreatePatchContactRequest, _options?: Configuration): Observable<Contact>;
    retrieveContactModelUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveContactModelUsingGET1(_options?: Configuration): Observable<ObjectModel>;
    unlinkContactsUsingPOSTWithHttpInfo(linkContactsRequest: LinkContactsRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    unlinkContactsUsingPOST(linkContactsRequest: LinkContactsRequest, _options?: Configuration): Observable<void>;
}
import { EmailApiRequestFactory, EmailApiResponseProcessor } from "../apis/EmailApi";
export declare class ObservableEmailApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EmailApiRequestFactory, responseProcessor?: EmailApiResponseProcessor);
    createEmailUsingPOST1WithHttpInfo(emailWithContent: CreateEmailSentRequest, _options?: Configuration): Observable<HttpInfo<EmailSentWithContent>>;
    createEmailUsingPOST1(emailWithContent: CreateEmailSentRequest, _options?: Configuration): Observable<EmailSentWithContent>;
    createEmailsUsingPOST1WithHttpInfo(createEmailsSentRequest?: CreateEmailsSentRequest, _options?: Configuration): Observable<HttpInfo<EmailsSentList>>;
    createEmailsUsingPOST1(createEmailsSentRequest?: CreateEmailsSentRequest, _options?: Configuration): Observable<EmailsSentList>;
    deleteEmailUsingDELETE1WithHttpInfo(id: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteEmailUsingDELETE1(id: string, _options?: Configuration): Observable<void>;
    deleteEmailsUsingPOST1WithHttpInfo(deleteEmailsRequest: DeleteEmailsRequest, _options?: Configuration): Observable<HttpInfo<DeleteEmailsResponse>>;
    deleteEmailsUsingPOST1(deleteEmailsRequest: DeleteEmailsRequest, _options?: Configuration): Observable<DeleteEmailsResponse>;
    getEmailUsingGET1WithHttpInfo(id: string, _options?: Configuration): Observable<HttpInfo<EmailSentWithContent>>;
    getEmailUsingGET1(id: string, _options?: Configuration): Observable<EmailSentWithContent>;
    sendEmailUsingPOST1WithHttpInfo(emailSendRequest?: EmailSendRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    sendEmailUsingPOST1(emailSendRequest?: EmailSendRequest, _options?: Configuration): Observable<void>;
}
import { EmailAddressApiRequestFactory, EmailAddressApiResponseProcessor } from "../apis/EmailAddressApi";
export declare class ObservableEmailAddressApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: EmailAddressApiRequestFactory, responseProcessor?: EmailAddressApiResponseProcessor);
    getEmailAddressStatusUsingGETWithHttpInfo(email: string, _options?: Configuration): Observable<HttpInfo<RestEmailAddress>>;
    getEmailAddressStatusUsingGET(email: string, _options?: Configuration): Observable<RestEmailAddress>;
    updateEmailAddressOptStatusUsingPUTWithHttpInfo(email: string, updateEmailAddress: UpdateEmailAddress, _options?: Configuration): Observable<HttpInfo<RestEmailAddress>>;
    updateEmailAddressOptStatusUsingPUT(email: string, updateEmailAddress: UpdateEmailAddress, _options?: Configuration): Observable<RestEmailAddress>;
}
import { FreeTrialDiscountApiRequestFactory, FreeTrialDiscountApiResponseProcessor } from "../apis/FreeTrialDiscountApi";
export declare class ObservableFreeTrialDiscountApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: FreeTrialDiscountApiRequestFactory, responseProcessor?: FreeTrialDiscountApiResponseProcessor);
    deleteDiscountUsingDELETE1WithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteDiscountUsingDELETE1(discountId: string, _options?: Configuration): Observable<void>;
}
import { FunnelIntegrationApiRequestFactory, FunnelIntegrationApiResponseProcessor } from "../apis/FunnelIntegrationApi";
export declare class ObservableFunnelIntegrationApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: FunnelIntegrationApiRequestFactory, responseProcessor?: FunnelIntegrationApiResponseProcessor);
    createFunnelIntegrationUsingPOSTWithHttpInfo(createFunnelIntegrationRequest: CreateFunnelIntegrationRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    createFunnelIntegrationUsingPOST(createFunnelIntegrationRequest: CreateFunnelIntegrationRequest, _options?: Configuration): Observable<void>;
    createIntegrationTriggerEventUsingPOSTWithHttpInfo(createFunnelIntegrationTriggerEvents: CreateFunnelIntegrationTriggerEvents, _options?: Configuration): Observable<HttpInfo<Array<FunnelIntegrationTriggerResultDTO>>>;
    createIntegrationTriggerEventUsingPOST(createFunnelIntegrationTriggerEvents: CreateFunnelIntegrationTriggerEvents, _options?: Configuration): Observable<Array<FunnelIntegrationTriggerResultDTO>>;
    deleteFunnelIntegrationUsingPOSTWithHttpInfo(deleteFunnelIntegrationRequest: DeleteFunnelIntegrationRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteFunnelIntegrationUsingPOST(deleteFunnelIntegrationRequest: DeleteFunnelIntegrationRequest, _options?: Configuration): Observable<void>;
}
import { LandingPagesApiRequestFactory, LandingPagesApiResponseProcessor } from "../apis/LandingPagesApi";
export declare class ObservableLandingPagesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LandingPagesApiRequestFactory, responseProcessor?: LandingPagesApiResponseProcessor);
    listLandingPagesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListLandingPagesResponse>>;
    listLandingPagesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListLandingPagesResponse>;
}
import { LeadSourcesApiRequestFactory, LeadSourcesApiResponseProcessor } from "../apis/LeadSourcesApi";
export declare class ObservableLeadSourcesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LeadSourcesApiRequestFactory, responseProcessor?: LeadSourcesApiResponseProcessor);
    createLeadSourceUsingPOSTWithHttpInfo(leadsource?: CreateLeadSourceRequest, _options?: Configuration): Observable<HttpInfo<LeadSource>>;
    createLeadSourceUsingPOST(leadsource?: CreateLeadSourceRequest, _options?: Configuration): Observable<LeadSource>;
    listLeadSourcesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListLeadSourcesResponse>>;
    listLeadSourcesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListLeadSourcesResponse>;
}
import { LocaleApiRequestFactory, LocaleApiResponseProcessor } from "../apis/LocaleApi";
export declare class ObservableLocaleApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: LocaleApiRequestFactory, responseProcessor?: LocaleApiResponseProcessor);
    listCountriesUsingGET2WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ListCountriesResponse>>;
    listCountriesUsingGET2(_options?: Configuration): Observable<ListCountriesResponse>;
    listProvincesForCountryUsingGETWithHttpInfo(countryCode: string, _options?: Configuration): Observable<HttpInfo<ListProvincesResponse>>;
    listProvincesForCountryUsingGET(countryCode: string, _options?: Configuration): Observable<ListProvincesResponse>;
}
import { MerchantApiRequestFactory, MerchantApiResponseProcessor } from "../apis/MerchantApi";
export declare class ObservableMerchantApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: MerchantApiRequestFactory, responseProcessor?: MerchantApiResponseProcessor);
    listMerchantsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListRestMerchantResponse>>;
    listMerchantsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListRestMerchantResponse>;
}
import { NoteApiRequestFactory, NoteApiResponseProcessor } from "../apis/NoteApi";
export declare class ObservableNoteApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: NoteApiRequestFactory, responseProcessor?: NoteApiResponseProcessor);
    createNoteCustomFieldUsingPOST1WithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createNoteCustomFieldUsingPOST1(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createNoteUsingPOST1WithHttpInfo(contactId: string, request: CreateNoteRequest, _options?: Configuration): Observable<HttpInfo<Note>>;
    createNoteUsingPOST1(contactId: string, request: CreateNoteRequest, _options?: Configuration): Observable<Note>;
    deleteNoteUsingDELETE1WithHttpInfo(contactId: string, noteId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteNoteUsingDELETE1(contactId: string, noteId: string, _options?: Configuration): Observable<void>;
    getNoteUsingGET1WithHttpInfo(contactId: string, noteId: string, _options?: Configuration): Observable<HttpInfo<GetNoteResponse>>;
    getNoteUsingGET1(contactId: string, noteId: string, _options?: Configuration): Observable<GetNoteResponse>;
    listNotesUsingGET1WithHttpInfo(contactId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListNotesResponse>>;
    listNotesUsingGET1(contactId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListNotesResponse>;
    retrieveNoteModelUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveNoteModelUsingGET1(_options?: Configuration): Observable<ObjectModel>;
    updateNoteUsingPATCHWithHttpInfo(contactId: string, noteId: string, updateNoteRequest: UpdateNoteRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<UpdateNoteResponse>>;
    updateNoteUsingPATCH(contactId: string, noteId: string, updateNoteRequest: UpdateNoteRequest, updateMask?: Array<string>, _options?: Configuration): Observable<UpdateNoteResponse>;
    updateNotesCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateNotesCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
}
import { OpportunityApiRequestFactory, OpportunityApiResponseProcessor } from "../apis/OpportunityApi";
export declare class ObservableOpportunityApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OpportunityApiRequestFactory, responseProcessor?: OpportunityApiResponseProcessor);
    createOpportunityCustomFieldsUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createOpportunityCustomFieldsUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createOpportunityStageUsingPOSTWithHttpInfo(opportunityStage?: CreateOpportunityStageRequest, _options?: Configuration): Observable<HttpInfo<RestOpportunityStage>>;
    createOpportunityStageUsingPOST(opportunityStage?: CreateOpportunityStageRequest, _options?: Configuration): Observable<RestOpportunityStage>;
    createOpportunityUsingPOST1WithHttpInfo(opportunity?: CreateOpportunityRequest, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    createOpportunityUsingPOST1(opportunity?: CreateOpportunityRequest, _options?: Configuration): Observable<RestV2Opportunity>;
    deleteOpportunityStageUsingDELETEWithHttpInfo(stageId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOpportunityStageUsingDELETE(stageId: string, _options?: Configuration): Observable<void>;
    deleteOpportunityUsingDELETEWithHttpInfo(opportunityId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOpportunityUsingDELETE(opportunityId: string, _options?: Configuration): Observable<void>;
    getOpportunityStageUsingGETWithHttpInfo(stageId: string, _options?: Configuration): Observable<HttpInfo<RestOpportunityStage>>;
    getOpportunityStageUsingGET(stageId: string, _options?: Configuration): Observable<RestOpportunityStage>;
    getOpportunityUsingGET1WithHttpInfo(opportunityId: string, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    getOpportunityUsingGET1(opportunityId: string, _options?: Configuration): Observable<RestV2Opportunity>;
    listOpportunitiesUsingGET1WithHttpInfo(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOpportunitiesResponse>>;
    listOpportunitiesUsingGET1(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOpportunitiesResponse>;
    listOpportunityStagesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOpportunityStagesResponse>>;
    listOpportunityStagesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOpportunityStagesResponse>;
    updateOpportunityCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateOpportunityCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateOpportunityUsingPATCHWithHttpInfo(opportunityId: string, request: PatchOpportunityRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    updateOpportunityUsingPATCH(opportunityId: string, request: PatchOpportunityRequest, updateMask?: Array<string>, _options?: Configuration): Observable<RestV2Opportunity>;
}
import { OrdersApiRequestFactory, OrdersApiResponseProcessor } from "../apis/OrdersApi";
export declare class ObservableOrdersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: OrdersApiRequestFactory, responseProcessor?: OrdersApiResponseProcessor);
    createOrderCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createOrderCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createOrderItemsOnOrderUsingPOST1WithHttpInfo(orderId: string, createRestOrderItemRequest: CreateRestOrderItemRequest, _options?: Configuration): Observable<HttpInfo<RestV2OrderItem>>;
    createOrderItemsOnOrderUsingPOST1(orderId: string, createRestOrderItemRequest: CreateRestOrderItemRequest, _options?: Configuration): Observable<RestV2OrderItem>;
    createOrderUsingPOST1WithHttpInfo(createOrderRequest: RestCreateOrderRequest, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    createOrderUsingPOST1(createOrderRequest: RestCreateOrderRequest, _options?: Configuration): Observable<RestV2Order>;
    createPaymentOnOrderUsingPOST1WithHttpInfo(orderId: string, createPaymentRequest: CreatePaymentRequest, _options?: Configuration): Observable<HttpInfo<PaymentResult>>;
    createPaymentOnOrderUsingPOST1(orderId: string, createPaymentRequest: CreatePaymentRequest, _options?: Configuration): Observable<PaymentResult>;
    deleteOrderUsingDELETE1WithHttpInfo(orderId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOrderUsingDELETE1(orderId: string, _options?: Configuration): Observable<void>;
    getOrderUsingGET1WithHttpInfo(orderId: string, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    getOrderUsingGET1(orderId: string, _options?: Configuration): Observable<RestV2Order>;
    listOrdersUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOrders>>;
    listOrdersUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOrders>;
    patchOrderUsingPATCHWithHttpInfo(orderId: string, updateMask?: Array<string>, order?: RestV2PatchOrderRequest, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    patchOrderUsingPATCH(orderId: string, updateMask?: Array<string>, order?: RestV2PatchOrderRequest, _options?: Configuration): Observable<RestV2Order>;
    retrieveOrderCustomFieldModelUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveOrderCustomFieldModelUsingGET(_options?: Configuration): Observable<ObjectModel>;
    updateOrderCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateOrderCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
}
import { PaymentMethodConfigApiRequestFactory, PaymentMethodConfigApiResponseProcessor } from "../apis/PaymentMethodConfigApi";
export declare class ObservablePaymentMethodConfigApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PaymentMethodConfigApiRequestFactory, responseProcessor?: PaymentMethodConfigApiResponseProcessor);
    createPaymentMethodConfigUsingPOSTWithHttpInfo(request: CreatePaymentMethodConfigRequest, _options?: Configuration): Observable<HttpInfo<PaymentMethodConfig>>;
    createPaymentMethodConfigUsingPOST(request: CreatePaymentMethodConfigRequest, _options?: Configuration): Observable<PaymentMethodConfig>;
}
import { PreReleaseApiRequestFactory, PreReleaseApiResponseProcessor } from "../apis/PreReleaseApi";
export declare class ObservablePreReleaseApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: PreReleaseApiRequestFactory, responseProcessor?: PreReleaseApiResponseProcessor);
    addAffiliateToProgramUsingPOSTWithHttpInfo(id: string, affiliateAddToProgramRequest: AffiliateAddToProgramRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    addAffiliateToProgramUsingPOST(id: string, affiliateAddToProgramRequest: AffiliateAddToProgramRequest, _options?: Configuration): Observable<void>;
    addCommissionProgramUsingPOSTWithHttpInfo(insertCommissionProgram?: CreateCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<AffiliateCommissionProgramResponse>>;
    addCommissionProgramUsingPOST(insertCommissionProgram?: CreateCommissionProgramRequest, _options?: Configuration): Observable<AffiliateCommissionProgramResponse>;
    assignProductCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, productCommissionProgram?: CreateProductCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<ProductCommissionProgram>>;
    assignProductCommissionProgramUsingPOST(commissionProgramId: string, productCommissionProgram?: CreateProductCommissionProgramRequest, _options?: Configuration): Observable<ProductCommissionProgram>;
    assignSubscriptionCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, subscriptionCommissionProgram?: CreateSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SubscriptionCommissionProgram>>;
    assignSubscriptionCommissionProgramUsingPOST(commissionProgramId: string, subscriptionCommissionProgram?: CreateSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<SubscriptionCommissionProgram>;
    cancelSubscriptionUsingPOSTWithHttpInfo(subscriptionId: string, cancelSubscriptionsRequest: CancelSubscriptionsRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    cancelSubscriptionUsingPOST(subscriptionId: string, cancelSubscriptionsRequest: CancelSubscriptionsRequest, _options?: Configuration): Observable<void>;
    createAffiliateCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createAffiliateCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createDefaultCommissionProgramUsingPOSTWithHttpInfo(commissionProgramId: string, createDefaultCommissionProgramRequest?: CreateDefaultCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SetDefaultCommissionProgramResponse>>;
    createDefaultCommissionProgramUsingPOST(commissionProgramId: string, createDefaultCommissionProgramRequest?: CreateDefaultCommissionProgramRequest, _options?: Configuration): Observable<SetDefaultCommissionProgramResponse>;
    createFunnelIntegrationUsingPOSTWithHttpInfo(createFunnelIntegrationRequest: CreateFunnelIntegrationRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    createFunnelIntegrationUsingPOST(createFunnelIntegrationRequest: CreateFunnelIntegrationRequest, _options?: Configuration): Observable<void>;
    createIntegrationTriggerEventUsingPOSTWithHttpInfo(createFunnelIntegrationTriggerEvents: CreateFunnelIntegrationTriggerEvents, _options?: Configuration): Observable<HttpInfo<Array<FunnelIntegrationTriggerResultDTO>>>;
    createIntegrationTriggerEventUsingPOST(createFunnelIntegrationTriggerEvents: CreateFunnelIntegrationTriggerEvents, _options?: Configuration): Observable<Array<FunnelIntegrationTriggerResultDTO>>;
    createLeadSourceUsingPOSTWithHttpInfo(leadsource?: CreateLeadSourceRequest, _options?: Configuration): Observable<HttpInfo<LeadSource>>;
    createLeadSourceUsingPOST(leadsource?: CreateLeadSourceRequest, _options?: Configuration): Observable<LeadSource>;
    createNoteCustomFieldUsingPOST1WithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createNoteCustomFieldUsingPOST1(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createOpportunityCustomFieldsUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createOpportunityCustomFieldsUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createOpportunityStageUsingPOSTWithHttpInfo(opportunityStage?: CreateOpportunityStageRequest, _options?: Configuration): Observable<HttpInfo<RestOpportunityStage>>;
    createOpportunityStageUsingPOST(opportunityStage?: CreateOpportunityStageRequest, _options?: Configuration): Observable<RestOpportunityStage>;
    createOpportunityUsingPOST1WithHttpInfo(opportunity?: CreateOpportunityRequest, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    createOpportunityUsingPOST1(opportunity?: CreateOpportunityRequest, _options?: Configuration): Observable<RestV2Opportunity>;
    createOrderCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createOrderCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createOrderItemsOnOrderUsingPOST1WithHttpInfo(orderId: string, createRestOrderItemRequest: CreateRestOrderItemRequest, _options?: Configuration): Observable<HttpInfo<RestV2OrderItem>>;
    createOrderItemsOnOrderUsingPOST1(orderId: string, createRestOrderItemRequest: CreateRestOrderItemRequest, _options?: Configuration): Observable<RestV2OrderItem>;
    createOrderUsingPOST1WithHttpInfo(createOrderRequest: RestCreateOrderRequest, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    createOrderUsingPOST1(createOrderRequest: RestCreateOrderRequest, _options?: Configuration): Observable<RestV2Order>;
    createRedirectLinkUsingPOSTWithHttpInfo(request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    createRedirectLinkUsingPOST(request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<AffiliateLink>;
    createReferralUsingPOSTWithHttpInfo(request: CreateReferralRequest, _options?: Configuration): Observable<HttpInfo<Referral>>;
    createReferralUsingPOST(request: CreateReferralRequest, _options?: Configuration): Observable<Referral>;
    createSubscriptionCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createSubscriptionCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createTaskCustomFieldUsingPOST1WithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CreateCustomFieldResponse>>;
    createTaskCustomFieldUsingPOST1(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CreateCustomFieldResponse>;
    createTaskUsingPOST1WithHttpInfo(task?: CreateTaskRequest, _options?: Configuration): Observable<HttpInfo<Task>>;
    createTaskUsingPOST1(task?: CreateTaskRequest, _options?: Configuration): Observable<Task>;
    createUserUsingPOST1WithHttpInfo(user?: CreateUserRequestV2, _options?: Configuration): Observable<HttpInfo<User>>;
    createUserUsingPOST1(user?: CreateUserRequestV2, _options?: Configuration): Observable<User>;
    deleteAffiliateCommissionProgramUsingDELETEWithHttpInfo(commissionProgramId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteAffiliateCommissionProgramUsingDELETE(commissionProgramId: string, _options?: Configuration): Observable<void>;
    deleteAffiliateUsingDELETEWithHttpInfo(id: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteAffiliateUsingDELETE(id: string, _options?: Configuration): Observable<void>;
    deleteDiscountUsingDELETEWithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteDiscountUsingDELETE(discountId: string, _options?: Configuration): Observable<void>;
    deleteDiscountUsingDELETE1WithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteDiscountUsingDELETE1(discountId: string, _options?: Configuration): Observable<void>;
    deleteFunnelIntegrationUsingPOSTWithHttpInfo(deleteFunnelIntegrationRequest: DeleteFunnelIntegrationRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteFunnelIntegrationUsingPOST(deleteFunnelIntegrationRequest: DeleteFunnelIntegrationRequest, _options?: Configuration): Observable<void>;
    deleteOpportunityStageUsingDELETEWithHttpInfo(stageId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOpportunityStageUsingDELETE(stageId: string, _options?: Configuration): Observable<void>;
    deleteOpportunityUsingDELETEWithHttpInfo(opportunityId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOpportunityUsingDELETE(opportunityId: string, _options?: Configuration): Observable<void>;
    deleteOrderUsingDELETE1WithHttpInfo(orderId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteOrderUsingDELETE1(orderId: string, _options?: Configuration): Observable<void>;
    deleteRedirectLinkUsingDELETEWithHttpInfo(redirectId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteRedirectLinkUsingDELETE(redirectId: string, _options?: Configuration): Observable<void>;
    deleteTaskCustomFieldUsingDELETEWithHttpInfo(customFieldId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTaskCustomFieldUsingDELETE(customFieldId: string, _options?: Configuration): Observable<void>;
    deleteTaskUsingDELETE1WithHttpInfo(taskId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTaskUsingDELETE1(taskId: string, _options?: Configuration): Observable<void>;
    getAffiliateCommissionTotalUsingGETWithHttpInfo(affiliateId: string, _options?: Configuration): Observable<HttpInfo<AffiliateCommissionEarned>>;
    getAffiliateCommissionTotalUsingGET(affiliateId: string, _options?: Configuration): Observable<AffiliateCommissionEarned>;
    getAffiliateCommissionsUsingGETWithHttpInfo(affiliateId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateCommissionResponse>>;
    getAffiliateCommissionsUsingGET(affiliateId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateCommissionResponse>;
    getAffiliateCustomFieldsUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    getAffiliateCustomFieldsUsingGET(_options?: Configuration): Observable<ObjectModel>;
    getCommissionProgramUsingGETWithHttpInfo(commissionProgramId: string, _options?: Configuration): Observable<HttpInfo<AffiliateProgramV2>>;
    getCommissionProgramUsingGET(commissionProgramId: string, _options?: Configuration): Observable<AffiliateProgramV2>;
    getContactsBySearchTermUsingGETWithHttpInfo(searchParam: string, _options?: Configuration): Observable<HttpInfo<ListBasicContactResponse>>;
    getContactsBySearchTermUsingGET(searchParam: string, _options?: Configuration): Observable<ListBasicContactResponse>;
    getDiscountUsingGETWithHttpInfo(discountId: string, _options?: Configuration): Observable<HttpInfo<CategoryDiscount>>;
    getDiscountUsingGET(discountId: string, _options?: Configuration): Observable<CategoryDiscount>;
    getOpportunityStageUsingGETWithHttpInfo(stageId: string, _options?: Configuration): Observable<HttpInfo<RestOpportunityStage>>;
    getOpportunityStageUsingGET(stageId: string, _options?: Configuration): Observable<RestOpportunityStage>;
    getOpportunityUsingGET1WithHttpInfo(opportunityId: string, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    getOpportunityUsingGET1(opportunityId: string, _options?: Configuration): Observable<RestV2Opportunity>;
    getOrderUsingGET1WithHttpInfo(orderId: string, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    getOrderUsingGET1(orderId: string, _options?: Configuration): Observable<RestV2Order>;
    getRedirectLinkUsingGETWithHttpInfo(redirectId: string, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    getRedirectLinkUsingGET(redirectId: string, _options?: Configuration): Observable<AffiliateLink>;
    getTaskUsingGET1WithHttpInfo(taskId: string, _options?: Configuration): Observable<HttpInfo<Task>>;
    getTaskUsingGET1(taskId: string, _options?: Configuration): Observable<Task>;
    getUserByIdUsingGETWithHttpInfo(userId: string, _options?: Configuration): Observable<HttpInfo<User>>;
    getUserByIdUsingGET(userId: string, _options?: Configuration): Observable<User>;
    getUserInfoUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetUserInfoResponse>>;
    getUserInfoUsingGET1(_options?: Configuration): Observable<GetUserInfoResponse>;
    getUserSignatureUsingGET1WithHttpInfo(userId: string, _options?: Configuration): Observable<HttpInfo<string>>;
    getUserSignatureUsingGET1(userId: string, _options?: Configuration): Observable<string>;
    listAffiliateCommissionProgramsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateCommissionProgramsResponse>>;
    listAffiliateCommissionProgramsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateCommissionProgramsResponse>;
    listAffiliateLinksUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateLinksResponse>>;
    listAffiliateLinksUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateLinksResponse>;
    listCountriesUsingGET2WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ListCountriesResponse>>;
    listCountriesUsingGET2(_options?: Configuration): Observable<ListCountriesResponse>;
    listLandingPagesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListLandingPagesResponse>>;
    listLandingPagesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListLandingPagesResponse>;
    listLeadSourcesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListLeadSourcesResponse>>;
    listLeadSourcesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListLeadSourcesResponse>;
    listMerchantsUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListRestMerchantResponse>>;
    listMerchantsUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListRestMerchantResponse>;
    listOpportunitiesUsingGET1WithHttpInfo(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOpportunitiesResponse>>;
    listOpportunitiesUsingGET1(fields?: Array<string>, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOpportunitiesResponse>;
    listOpportunityStagesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOpportunityStagesResponse>>;
    listOpportunityStagesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOpportunityStagesResponse>;
    listOrdersUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListOrders>>;
    listOrdersUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListOrders>;
    listProductsUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListProductsResponse>>;
    listProductsUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListProductsResponse>;
    listProvincesForCountryUsingGETWithHttpInfo(countryCode: string, _options?: Configuration): Observable<HttpInfo<ListProvincesResponse>>;
    listProvincesForCountryUsingGET(countryCode: string, _options?: Configuration): Observable<ListProvincesResponse>;
    listShippingMethodsUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ListRestShippingMethodsResponse>>;
    listShippingMethodsUsingGET(_options?: Configuration): Observable<ListRestShippingMethodsResponse>;
    listSubscriptionPlansUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListSubscriptionPlansResponse>>;
    listSubscriptionPlansUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListSubscriptionPlansResponse>;
    listSummariesUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListAffiliateSummariesResponse>>;
    listSummariesUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListAffiliateSummariesResponse>;
    listTasksUsingGET1WithHttpInfo(endDueTime?: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, startDueTime?: string, _options?: Configuration): Observable<HttpInfo<ListTasksResponse>>;
    listTasksUsingGET1(endDueTime?: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, startDueTime?: string, _options?: Configuration): Observable<ListTasksResponse>;
    listUsersUsingGET1WithHttpInfo(filter?: string, orderBy?: string, _options?: Configuration): Observable<HttpInfo<ListUserResponse>>;
    listUsersUsingGET1(filter?: string, orderBy?: string, _options?: Configuration): Observable<ListUserResponse>;
    patchDefaultCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchDefaultCommissionProgramRequest?: PatchDefaultCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SetDefaultCommissionProgramResponse>>;
    patchDefaultCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchDefaultCommissionProgramRequest?: PatchDefaultCommissionProgramRequest, _options?: Configuration): Observable<SetDefaultCommissionProgramResponse>;
    patchOrderUsingPATCHWithHttpInfo(orderId: string, updateMask?: Array<string>, order?: RestV2PatchOrderRequest, _options?: Configuration): Observable<HttpInfo<RestV2Order>>;
    patchOrderUsingPATCH(orderId: string, updateMask?: Array<string>, order?: RestV2PatchOrderRequest, _options?: Configuration): Observable<RestV2Order>;
    patchProductCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchProductCommissionProgramRequest?: PatchProductCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<ProductCommissionProgram>>;
    patchProductCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchProductCommissionProgramRequest?: PatchProductCommissionProgramRequest, _options?: Configuration): Observable<ProductCommissionProgram>;
    patchSubscriptionCommissionProgramUsingPATCHWithHttpInfo(commissionProgramId: string, updateMask?: Array<string>, patchSubscriptionCommissionProgramRequest?: PatchSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<HttpInfo<SubscriptionCommissionProgram>>;
    patchSubscriptionCommissionProgramUsingPATCH(commissionProgramId: string, updateMask?: Array<string>, patchSubscriptionCommissionProgramRequest?: PatchSubscriptionCommissionProgramRequest, _options?: Configuration): Observable<SubscriptionCommissionProgram>;
    patchTaskUsingPATCHWithHttpInfo(taskId: string, updateMask?: Array<string>, task?: CreatePatchTaskRequest, _options?: Configuration): Observable<HttpInfo<UpdateTaskResponse>>;
    patchTaskUsingPATCH(taskId: string, updateMask?: Array<string>, task?: CreatePatchTaskRequest, _options?: Configuration): Observable<UpdateTaskResponse>;
    patchUserUsingPATCHWithHttpInfo(userId: string, updateMask?: Array<string>, user?: PatchUserRequestV2, _options?: Configuration): Observable<HttpInfo<User>>;
    patchUserUsingPATCH(userId: string, updateMask?: Array<string>, user?: PatchUserRequestV2, _options?: Configuration): Observable<User>;
    removeAffiliateFromProgramUsingPOSTWithHttpInfo(id: string, removeFromProgramRequest: AffiliateRemoveFromProgramRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    removeAffiliateFromProgramUsingPOST(id: string, removeFromProgramRequest: AffiliateRemoveFromProgramRequest, _options?: Configuration): Observable<void>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOSTWithHttpInfo(commissionId: string, deleteSubscriptionPlanCommissionRequest: DeleteSubscriptionPlanCommissionRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    removeSubscriptionPlanCommissionFromCommissionsUsingPOST(commissionId: string, deleteSubscriptionPlanCommissionRequest: DeleteSubscriptionPlanCommissionRequest, _options?: Configuration): Observable<void>;
    retrieveNoteModelUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveNoteModelUsingGET1(_options?: Configuration): Observable<ObjectModel>;
    retrieveOrderCustomFieldModelUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveOrderCustomFieldModelUsingGET(_options?: Configuration): Observable<ObjectModel>;
    retrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveSubscriptionCustomFieldModelUsingGET(_options?: Configuration): Observable<ObjectModel>;
    retrieveTaskModelUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveTaskModelUsingGET1(_options?: Configuration): Observable<ObjectModel>;
    updateAffiliateCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateAffiliateCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateNotesCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateNotesCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateOpportunityCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateOpportunityCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateOpportunityUsingPATCHWithHttpInfo(opportunityId: string, request: PatchOpportunityRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<RestV2Opportunity>>;
    updateOpportunityUsingPATCH(opportunityId: string, request: PatchOpportunityRequest, updateMask?: Array<string>, _options?: Configuration): Observable<RestV2Opportunity>;
    updateOrderCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateOrderCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateRedirectLinkUsingPATCHWithHttpInfo(redirectId: string, request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<HttpInfo<AffiliateLink>>;
    updateRedirectLinkUsingPATCH(redirectId: string, request: CreateOrPatchAffiliateLinkRequest, _options?: Configuration): Observable<AffiliateLink>;
    updateSubscriptionCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateSubscriptionCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
    updateTaskCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateTaskCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
}
import { ProductApiRequestFactory, ProductApiResponseProcessor } from "../apis/ProductApi";
export declare class ObservableProductApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ProductApiRequestFactory, responseProcessor?: ProductApiResponseProcessor);
    listProductsUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListProductsResponse>>;
    listProductsUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListProductsResponse>;
}
import { ReferralApiRequestFactory, ReferralApiResponseProcessor } from "../apis/ReferralApi";
export declare class ObservableReferralApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ReferralApiRequestFactory, responseProcessor?: ReferralApiResponseProcessor);
    createReferralUsingPOSTWithHttpInfo(request: CreateReferralRequest, _options?: Configuration): Observable<HttpInfo<Referral>>;
    createReferralUsingPOST(request: CreateReferralRequest, _options?: Configuration): Observable<Referral>;
}
import { ReportingApiRequestFactory, ReportingApiResponseProcessor } from "../apis/ReportingApi";
export declare class ObservableReportingApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ReportingApiRequestFactory, responseProcessor?: ReportingApiResponseProcessor);
    runReportUsingPOSTWithHttpInfo(reportId: string, fields?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ReportExecutionResult>>;
    runReportUsingPOST(reportId: string, fields?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ReportExecutionResult>;
}
import { SalesApiRequestFactory, SalesApiResponseProcessor } from "../apis/SalesApi";
export declare class ObservableSalesApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SalesApiRequestFactory, responseProcessor?: SalesApiResponseProcessor);
    setMerchantGatewayAsDefaultUsingPOSTWithHttpInfo(id: number, _options?: Configuration): Observable<HttpInfo<void>>;
    setMerchantGatewayAsDefaultUsingPOST(id: number, _options?: Configuration): Observable<void>;
}
import { SettingsApiRequestFactory, SettingsApiResponseProcessor } from "../apis/SettingsApi";
export declare class ObservableSettingsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SettingsApiRequestFactory, responseProcessor?: SettingsApiResponseProcessor);
    getApplicationConfigurationsUsingGETWithHttpInfo(fields?: Array<'affiliate' | 'appointment' | 'contact' | 'ecommerce' | 'email' | 'forms' | 'fulfillment' | 'invoice' | 'note' | 'opportunity' | 'task' | 'template'>, _options?: Configuration): Observable<HttpInfo<GetSettingsResponse>>;
    getApplicationConfigurationsUsingGET(fields?: Array<'affiliate' | 'appointment' | 'contact' | 'ecommerce' | 'email' | 'forms' | 'fulfillment' | 'invoice' | 'note' | 'opportunity' | 'task' | 'template'>, _options?: Configuration): Observable<GetSettingsResponse>;
    getContactOptionTypesUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetContactOptionTypesResponse>>;
    getContactOptionTypesUsingGET1(_options?: Configuration): Observable<GetContactOptionTypesResponse>;
    isApplicationEnabledUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetApplicationEnabledStatusResponse>>;
    isApplicationEnabledUsingGET(_options?: Configuration): Observable<GetApplicationEnabledStatusResponse>;
}
import { ShippingApiRequestFactory, ShippingApiResponseProcessor } from "../apis/ShippingApi";
export declare class ObservableShippingApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: ShippingApiRequestFactory, responseProcessor?: ShippingApiResponseProcessor);
    listShippingMethodsUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ListRestShippingMethodsResponse>>;
    listShippingMethodsUsingGET(_options?: Configuration): Observable<ListRestShippingMethodsResponse>;
}
import { SubscriptionPlansApiRequestFactory, SubscriptionPlansApiResponseProcessor } from "../apis/SubscriptionPlansApi";
export declare class ObservableSubscriptionPlansApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SubscriptionPlansApiRequestFactory, responseProcessor?: SubscriptionPlansApiResponseProcessor);
    listSubscriptionPlansUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListSubscriptionPlansResponse>>;
    listSubscriptionPlansUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListSubscriptionPlansResponse>;
}
import { SubscriptionsApiRequestFactory, SubscriptionsApiResponseProcessor } from "../apis/SubscriptionsApi";
export declare class ObservableSubscriptionsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: SubscriptionsApiRequestFactory, responseProcessor?: SubscriptionsApiResponseProcessor);
    cancelSubscriptionUsingPOSTWithHttpInfo(subscriptionId: string, cancelSubscriptionsRequest: CancelSubscriptionsRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    cancelSubscriptionUsingPOST(subscriptionId: string, cancelSubscriptionsRequest: CancelSubscriptionsRequest, _options?: Configuration): Observable<void>;
    createSubscriptionCustomFieldUsingPOSTWithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    createSubscriptionCustomFieldUsingPOST(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CustomFieldMetaData>;
    createSubscriptionV2UsingPOSTWithHttpInfo(createSubscriptionV2: CreateSubscriptionV2, _options?: Configuration): Observable<HttpInfo<RestSubscriptionV2>>;
    createSubscriptionV2UsingPOST(createSubscriptionV2: CreateSubscriptionV2, _options?: Configuration): Observable<RestSubscriptionV2>;
    retrieveSubscriptionCustomFieldModelUsingGETWithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveSubscriptionCustomFieldModelUsingGET(_options?: Configuration): Observable<ObjectModel>;
    updateSubscriptionCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateSubscriptionCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
}
import { TagsApiRequestFactory, TagsApiResponseProcessor } from "../apis/TagsApi";
export declare class ObservableTagsApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TagsApiRequestFactory, responseProcessor?: TagsApiResponseProcessor);
    applyTagsUsingPOSTWithHttpInfo(tagId: string, applyRemoveTagRequest: ApplyRemoveTagRequest, _options?: Configuration): Observable<HttpInfo<ApplyTagsResponse>>;
    applyTagsUsingPOST(tagId: string, applyRemoveTagRequest: ApplyRemoveTagRequest, _options?: Configuration): Observable<ApplyTagsResponse>;
    createTagCategoryUsingPOST1WithHttpInfo(request: CreateUpdateTagCategoryRequest, _options?: Configuration): Observable<HttpInfo<Tag>>;
    createTagCategoryUsingPOST1(request: CreateUpdateTagCategoryRequest, _options?: Configuration): Observable<Tag>;
    createTagUsingPOST1WithHttpInfo(tag: CreateUpdateTagRequest, _options?: Configuration): Observable<HttpInfo<Tag>>;
    createTagUsingPOST1(tag: CreateUpdateTagRequest, _options?: Configuration): Observable<Tag>;
    deleteTagCategoryUsingDELETEWithHttpInfo(tagCategoryId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTagCategoryUsingDELETE(tagCategoryId: string, _options?: Configuration): Observable<void>;
    deleteTagUsingDELETEWithHttpInfo(tagId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTagUsingDELETE(tagId: string, _options?: Configuration): Observable<void>;
    getCategoryUsingGETWithHttpInfo(tagCategoryId: string, _options?: Configuration): Observable<HttpInfo<GetTagCategoryResponse>>;
    getCategoryUsingGET(tagCategoryId: string, _options?: Configuration): Observable<GetTagCategoryResponse>;
    getTagUsingGET1WithHttpInfo(tagId: string, _options?: Configuration): Observable<HttpInfo<Tag>>;
    getTagUsingGET1(tagId: string, _options?: Configuration): Observable<Tag>;
    listCompaniesForTagIdUsingGET1WithHttpInfo(tagId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListTaggedCompaniesResponse>>;
    listCompaniesForTagIdUsingGET1(tagId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListTaggedCompaniesResponse>;
    listContactsWithTagIdUsingGETWithHttpInfo(tagId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListTaggedContactsResponse>>;
    listContactsWithTagIdUsingGET(tagId: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListTaggedContactsResponse>;
    listTagCategoriesUsingGETWithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListTagCategoriesResponse>>;
    listTagCategoriesUsingGET(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListTagCategoriesResponse>;
    listTagsUsingGET1WithHttpInfo(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<HttpInfo<ListTagsResponse>>;
    listTagsUsingGET1(filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, _options?: Configuration): Observable<ListTagsResponse>;
    patchTagCategoryUsingPATCHWithHttpInfo(tagCategoryId: string, updateMask?: Array<string>, tagCategory?: CreateUpdateTagCategoryRequest, _options?: Configuration): Observable<HttpInfo<UpdateTagCategoryResponse>>;
    patchTagCategoryUsingPATCH(tagCategoryId: string, updateMask?: Array<string>, tagCategory?: CreateUpdateTagCategoryRequest, _options?: Configuration): Observable<UpdateTagCategoryResponse>;
    patchTagUsingPATCHWithHttpInfo(tagId: string, updateMask?: Array<string>, tag?: CreateUpdateTagRequest, _options?: Configuration): Observable<HttpInfo<UpdateTagResponse>>;
    patchTagUsingPATCH(tagId: string, updateMask?: Array<string>, tag?: CreateUpdateTagRequest, _options?: Configuration): Observable<UpdateTagResponse>;
    removeTagsUsingPOSTWithHttpInfo(tagId: string, applyRemoveTagRequest: ApplyRemoveTagRequest, _options?: Configuration): Observable<HttpInfo<void>>;
    removeTagsUsingPOST(tagId: string, applyRemoveTagRequest: ApplyRemoveTagRequest, _options?: Configuration): Observable<void>;
}
import { TaskApiRequestFactory, TaskApiResponseProcessor } from "../apis/TaskApi";
export declare class ObservableTaskApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: TaskApiRequestFactory, responseProcessor?: TaskApiResponseProcessor);
    createTaskCustomFieldUsingPOST1WithHttpInfo(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<HttpInfo<CreateCustomFieldResponse>>;
    createTaskCustomFieldUsingPOST1(customField: CreateCustomFieldRequest, _options?: Configuration): Observable<CreateCustomFieldResponse>;
    createTaskUsingPOST1WithHttpInfo(task?: CreateTaskRequest, _options?: Configuration): Observable<HttpInfo<Task>>;
    createTaskUsingPOST1(task?: CreateTaskRequest, _options?: Configuration): Observable<Task>;
    deleteTaskCustomFieldUsingDELETEWithHttpInfo(customFieldId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTaskCustomFieldUsingDELETE(customFieldId: string, _options?: Configuration): Observable<void>;
    deleteTaskUsingDELETE1WithHttpInfo(taskId: string, _options?: Configuration): Observable<HttpInfo<void>>;
    deleteTaskUsingDELETE1(taskId: string, _options?: Configuration): Observable<void>;
    getTaskUsingGET1WithHttpInfo(taskId: string, _options?: Configuration): Observable<HttpInfo<Task>>;
    getTaskUsingGET1(taskId: string, _options?: Configuration): Observable<Task>;
    listTasksUsingGET1WithHttpInfo(endDueTime?: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, startDueTime?: string, _options?: Configuration): Observable<HttpInfo<ListTasksResponse>>;
    listTasksUsingGET1(endDueTime?: string, filter?: string, orderBy?: string, pageSize?: number, pageToken?: string, startDueTime?: string, _options?: Configuration): Observable<ListTasksResponse>;
    patchTaskUsingPATCHWithHttpInfo(taskId: string, updateMask?: Array<string>, task?: CreatePatchTaskRequest, _options?: Configuration): Observable<HttpInfo<UpdateTaskResponse>>;
    patchTaskUsingPATCH(taskId: string, updateMask?: Array<string>, task?: CreatePatchTaskRequest, _options?: Configuration): Observable<UpdateTaskResponse>;
    retrieveTaskModelUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<ObjectModel>>;
    retrieveTaskModelUsingGET1(_options?: Configuration): Observable<ObjectModel>;
    updateTaskCustomFieldUsingPATCHWithHttpInfo(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<HttpInfo<CustomFieldMetaData>>;
    updateTaskCustomFieldUsingPATCH(customFieldId: string, request: UpdateCustomFieldMetaDataRequest, updateMask?: Array<string>, _options?: Configuration): Observable<CustomFieldMetaData>;
}
import { UsersApiRequestFactory, UsersApiResponseProcessor } from "../apis/UsersApi";
export declare class ObservableUsersApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: UsersApiRequestFactory, responseProcessor?: UsersApiResponseProcessor);
    createUserUsingPOST1WithHttpInfo(user?: CreateUserRequestV2, _options?: Configuration): Observable<HttpInfo<User>>;
    createUserUsingPOST1(user?: CreateUserRequestV2, _options?: Configuration): Observable<User>;
    getUserByIdUsingGETWithHttpInfo(userId: string, _options?: Configuration): Observable<HttpInfo<User>>;
    getUserByIdUsingGET(userId: string, _options?: Configuration): Observable<User>;
    getUserInfoUsingGET1WithHttpInfo(_options?: Configuration): Observable<HttpInfo<GetUserInfoResponse>>;
    getUserInfoUsingGET1(_options?: Configuration): Observable<GetUserInfoResponse>;
    getUserSignatureUsingGET1WithHttpInfo(userId: string, _options?: Configuration): Observable<HttpInfo<string>>;
    getUserSignatureUsingGET1(userId: string, _options?: Configuration): Observable<string>;
    listUsersUsingGET1WithHttpInfo(filter?: string, orderBy?: string, _options?: Configuration): Observable<HttpInfo<ListUserResponse>>;
    listUsersUsingGET1(filter?: string, orderBy?: string, _options?: Configuration): Observable<ListUserResponse>;
    patchUserUsingPATCHWithHttpInfo(userId: string, updateMask?: Array<string>, user?: PatchUserRequestV2, _options?: Configuration): Observable<HttpInfo<User>>;
    patchUserUsingPATCH(userId: string, updateMask?: Array<string>, user?: PatchUserRequestV2, _options?: Configuration): Observable<User>;
}
