openapi: 3.0.1
info:
  title: SLAAPI
  description: Service Level Aggregation API (SLAAPI) to handle public API spec compliance
  contact:
    name: Gryffindor
    email: gryffindor@keap.com
  version: v1
servers:
- url: https://api.infusionsoft.com
paths:
  /v2/deals/-/notes/{note_id}:
    get:
      tags:
      - Deals
      summary: Retrieves a specific deal note by its ID.
      description: Retrieves a specific deal note by its ID.
      operationId: getNote
      parameters:
      - name: note_id
        in: path
        description: the ID of the note to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: the requested DealNote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DealNote"
    delete:
      tags:
      - Deals
      summary: Deletes a specific deal note by its ID.
      description: Deletes a specific deal note by its ID.
      operationId: delete
      parameters:
      - name: note_id
        in: path
        description: the ID of the note to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: a HttpResponse indicating the result of the delete operation
    patch:
      tags:
      - Deals
      summary: Updates a specific deal note by its ID.
      description: Updates a specific deal note by its ID.
      operationId: update
      parameters:
      - name: note_id
        in: path
        description: the ID of the note to update
        required: true
        schema:
          type: string
      requestBody:
        description: the request body containing updated note details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateDealNoteRequest"
        required: true
      responses:
        "200":
          description: the updated DealNote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DealNote"
  /v2/deals/{id}/notes:
    get:
      tags:
      - Deals
      summary: Lists all notes associated with a specific deal.
      description: Lists all notes associated with a specific deal.
      operationId: listNotes
      parameters:
      - name: id
        in: path
        description: the deal ID to list notes for
        required: true
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: a list of deal notes wrapped in a DealNoteListResponse
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DealNoteListResponse"
    post:
      tags:
      - Deals
      summary: Creates a new note for a specific deal.
      description: Creates a new note for a specific deal.
      operationId: createNote
      parameters:
      - name: id
        in: path
        description: the deal ID to associate the new note with
        required: true
        schema:
          type: string
      requestBody:
        description: the request body containing note details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDealNoteRequest"
        required: true
      responses:
        "200":
          description: the created DealNote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DealNote"
  /v2/pipelines:
    get:
      tags:
      - Pipelines
      summary: Lists entities based on the provided ListCommand.
      description: Lists entities based on the provided ListCommand.
      operationId: list
      parameters:
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: a response containing the list of entities
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineListResponse"
      security:
      - bearerAuth: []
    post:
      tags:
      - Pipelines
      summary: Creates a new entity.
      description: Creates a new entity.
      operationId: create
      requestBody:
        description: the create request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePipelineRequest"
        required: true
      responses:
        "200":
          description: The created entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
      security:
      - bearerAuth: []
  /v2/pipelines/summaries:
    get:
      tags:
      - Pipelines
      summary: Retrieves a list of pipeline summaries.
      description: Retrieves a list of pipeline summaries.
      operationId: listSummaries
      parameters:
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: the response containing the list of pipeline summaries and
            the next page token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineSummariesListResponse"
      security:
      - bearerAuth: []
  /v2/pipelines/{id}:
    get:
      tags:
      - Pipelines
      summary: Retrieves an entity by its identifier.
      description: Retrieves an entity by its identifier.
      operationId: get
      parameters:
      - name: id
        in: path
        description: the entity identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The retrieved entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Pipelines
      summary: Deletes a pipeline.
      description: Deletes a pipeline.
      operationId: delete_1
      parameters:
      - name: id
        in: path
        description: the pipeline identifier
        required: true
        schema:
          type: string
      - name: allow_cleanup
        in: query
        description: "flag indicating whether cleanup is allowed, can be null"
        schema:
          type: boolean
          nullable: true
      - name: new_stage_id
        in: query
        description: "the new stage identifier, can be null"
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: A response indicating no content
      security:
      - bearerAuth: []
    patch:
      tags:
      - Pipelines
      summary: Updates an existing entity.
      description: Updates an existing entity.
      operationId: update_1
      parameters:
      - name: id
        in: path
        description: the entity identifier
        required: true
        schema:
          type: string
      - name: update_mask
        in: query
        description: the fields to update
        required: true
        schema:
          type: array
          items:
            type: string
      requestBody:
        description: the update request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePipelineRequest"
        required: true
      responses:
        "200":
          description: The update_1d entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pipeline"
      security:
      - bearerAuth: []
  /v2/pipelines/{id}/outcomes:
    get:
      tags:
      - Pipelines
      summary: Gets the outcome labels for a pipeline.
      description: Gets the outcome labels for a pipeline.
      operationId: getOutcomeLabels
      parameters:
      - name: id
        in: path
        description: the pipeline identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: the updated list of the pipeline's outcome labels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineOutcomeLabelListResponse"
      security:
      - bearerAuth: []
    patch:
      tags:
      - Pipelines
      summary: Sets the outcome labels for a pipeline.
      description: Sets the outcome labels for a pipeline.
      operationId: setOutcomeLabels
      parameters:
      - name: id
        in: path
        description: the pipeline identifier
        required: true
        schema:
          type: string
      requestBody:
        description: the request containing the new outcome labels
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOutcomeLabelsRequest"
        required: true
      responses:
        "200":
          description: the updated list of the pipeline's outcome labels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineOutcomeLabelListResponse"
      security:
      - bearerAuth: []
  /v2/pipelines/{id}/stages:
    get:
      tags:
      - Pipelines
      summary: Retrieves a list of stages for a specific pipeline.
      description: Retrieves a list of stages for a specific pipeline.
      operationId: listStages
      parameters:
      - name: id
        in: path
        description: the pipeline identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: the response containing the list of pipeline stages and the
            next page token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PipelineStageListResponse"
      security:
      - bearerAuth: []
  /v2/stages:
    get:
      tags:
      - Stages
      summary: Lists entities based on the provided ListCommand.
      description: Lists entities based on the provided ListCommand.
      operationId: list_1
      parameters:
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: a response containing the list_1 of entities
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StageListResponse"
      security:
      - bearerAuth: []
    post:
      tags:
      - Stages
      summary: Creates a new entity.
      description: Creates a new entity.
      operationId: create_1
      requestBody:
        description: the create request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateStageRequest"
        required: true
      responses:
        "200":
          description: The create_1d entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
      security:
      - bearerAuth: []
  /v2/stages/{id}:
    get:
      tags:
      - Stages
      summary: Retrieves an entity by its identifier.
      description: Retrieves an entity by its identifier.
      operationId: get_1
      parameters:
      - name: id
        in: path
        description: the entity identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The retrieved entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
      security:
      - bearerAuth: []
    delete:
      tags:
      - Stages
      summary: Deletes a stage by its identifier for a given tenant.
      description: Deletes a stage by its identifier for a given tenant.
      operationId: delete_2
      parameters:
      - name: id
        in: path
        description: the stage identifier
        required: true
        schema:
          type: string
      - name: new_stage_id
        in: query
        description: "the new stage identifier, can be null"
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: A response indicating no content
      security:
      - bearerAuth: []
    patch:
      tags:
      - Stages
      summary: Updates an existing entity.
      description: Updates an existing entity.
      operationId: update_2
      parameters:
      - name: id
        in: path
        description: the entity identifier
        required: true
        schema:
          type: string
      - name: update_mask
        in: query
        description: the fields to update
        required: true
        schema:
          type: array
          items:
            type: string
      requestBody:
        description: the update request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateStageRequest"
        required: true
      responses:
        "200":
          description: The update_2d entity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stage"
      security:
      - bearerAuth: []
  /v2/stages/{id}/deals:
    get:
      tags:
      - Stages
      summary: Retrieves a list of deals for a specific stage.
      description: Retrieves a list of deals for a specific stage.
      operationId: listStages_1
      parameters:
      - name: id
        in: path
        description: the stage identifier
        required: true
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
          description: Search filter to apply to results
          nullable: true
      - name: page_token
        in: query
        schema:
          type: string
          description: Page token
          nullable: true
      - name: order_by
        in: query
        schema:
          type: string
          description: Attribute and direction to order items by. E.g. `given_name
            desc`
          nullable: true
      - name: page_size
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          description: Total number of items to return per page
          format: int32
          nullable: true
          example: 100
          default: 1000
      responses:
        "200":
          description: the response containing the list of deals and the next page
            token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StageDealListResponse"
      security:
      - bearerAuth: []
components:
  schemas:
    BaseListResponse_DealNote_:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
      description: The list responses.
    BaseListResponse_Deal_:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
      description: The list responses.
    BaseListResponse_PipelineSummary_:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
      description: The list responses.
    BaseListResponse_Pipeline_:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
      description: The list responses.
    BaseListResponse_Stage_:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
      description: The list responses.
    BaseModel:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the model.
      description: Base class for all models. Provides a unique identifier.
    CreateDealNoteRequest:
      required:
      - body
      - created_by
      type: object
      properties:
        body:
          maxLength: 5000
          minLength: 1
          type: string
          description: The body of the note. Must not be blank and must be between
            1 and 5000 characters.
        created_by:
          maxLength: 255
          minLength: 1
          type: string
          description: The creator of the note. Must not be blank and must be between
            1 and 255 characters.
      description: Request model for creating a deal note.
    CreatePipelineRequest:
      required:
      - name
      - stages
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the pipeline.
        stages:
          maxItems: 100
          minItems: 1
          type: array
          description: The stages of the pipeline.
          items:
            type: string
      description: Request for creating a pipeline.
    CreateStageRequest:
      required:
      - name
      - pipeline_id
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the stage.
        pipeline_id:
          minLength: 1
          type: string
          description: The ID of the pipeline to which the stage belongs.
      description: Request for creating a stage.
    Deal:
      type: object
      description: Represents a deal.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - required:
        - contacts
        - name
        - owners
        - stage
        - stage_assignment_time
        - status
        - task_ids
        - value
        properties:
          name:
            minLength: 1
            type: string
            description: The name of the deal. This field is required and must have
              at least one character.
          value:
            description: The monetary value of the deal. This field is required and
              must be valid.
            allOf:
            - $ref: "#/components/schemas/Money"
            - description: ""
          contacts:
            type: array
            description: The list of contacts associated with the deal. This field
              is required.
            items:
              $ref: "#/components/schemas/DealContact"
          stage:
            description: The stage of the deal. This field is required and must be
              valid.
            allOf:
            - $ref: "#/components/schemas/Stage"
            - description: ""
          stage_assignment_time:
            type: string
            description: The time when the deal was assigned to the current stage.
              This field is required.
            format: date-time
          owners:
            type: array
            description: The list of owners of the deal. This field is required.
            items:
              $ref: "#/components/schemas/Owner"
          owner_id:
            type: string
            description: The ID of the owner of the deal. This field is optional.
            nullable: true
          task_ids:
            type: array
            description: The list of task IDs associated with the deal. This field
              is required.
            items:
              type: string
          order_id:
            type: string
            description: The order of the deal. This field is optional.
            nullable: true
          status:
            type: string
            description: The status of the deal. This field is required.
          estimated_close_time:
            type: string
            description: The estimated close time of the deal. This field is optional.
            format: date-time
            nullable: true
          closed_time:
            type: string
            description: The actual close time of the deal. This field is optional.
            format: date-time
            nullable: true
          custom_fields:
            allOf:
            - type: object
              additionalProperties: true
              description: The custom fields associated with the deal. This field
                is optional.
            - description: The custom fields associated with the deal. This field
                is optional.
              nullable: true
    DealContact:
      type: object
      description: Represents a contact entity in the system. Extends the BaseModel
        class.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - required:
        - primary_contact
        properties:
          primary_contact:
            type: boolean
            description: Indicates if this contact is the primary contact. This field
              is required.
    DealNote:
      type: object
      description: A model representing a note associated with a deal.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - properties:
          deal_id:
            type: string
            description: The ID of the deal associated with the note.
          body:
            type: string
            description: The body content of the note.
          created_by:
            type: string
            description: The ID of the user who created the note.
          created_time:
            type: string
            description: The timestamp when the note was created. Formatted as a string
              according to the pattern "yyyy-MM-dd'T'HH:mm:ss.SSSXXX".
            format: date-time
          modified_time:
            type: string
            description: The timestamp when the note was last modified. Formatted
              as a string according to the pattern "yyyy-MM-dd'T'HH:mm:ss.SSSXXX".
            format: date-time
    DealNoteListResponse:
      type: object
      description: Response model for a list of deal notes.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_DealNote_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          notes:
            type: array
            description: The list of Note entities.
            items:
              $ref: "#/components/schemas/DealNote"
    DealStatus:
      type: string
      description: Enum representing the status of a deal.
      enum:
      - UNKNOWN_COULD_NOT_DESERIALIZE
      - ACTIVE
      - WON
      - LOST
    Money:
      required:
      - amount
      - currency
      type: object
      properties:
        amount:
          type: number
          description: The amount of money. This field is required.
          format: double
        currency:
          type: string
          description: The currency of the money. This field is required.
      description: Represents a monetary value with an amount and currency.
    Owner:
      type: object
      description: Represents an owner entity in the system. Extends the BaseModel
        class.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
    Pipeline:
      type: object
      description: A pipeline
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - properties:
          name:
            type: string
            description: The name of the pipeline.
          stages:
            type: array
            description: The list of stages in the pipeline.
            items:
              $ref: "#/components/schemas/Stage"
    PipelineListResponse:
      type: object
      description: Response for a list of pipelines.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_Pipeline_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          pipelines:
            type: array
            description: The list of pipelines.
            items:
              $ref: "#/components/schemas/Pipeline"
    PipelineOutcomeLabel:
      required:
      - value
      type: object
      properties:
        value:
          description: The status of the deal. This field is required.
          allOf:
          - $ref: "#/components/schemas/DealStatus"
        label:
          minLength: 1
          type: string
          description: The label for the outcome. This field is optional but must
            have at least one character if provided.
          nullable: true
      description: Represents a label for a pipeline outcome.
    PipelineOutcomeLabelListResponse:
      type: object
      properties:
        next_page_token:
          type: string
          description: Token for the next page of results.
        outcome_labels:
          type: array
          description: The list of outcome labels.
          items:
            $ref: "#/components/schemas/PipelineOutcomeLabel"
      description: Represents a response containing a list of pipeline outcome labels.
    PipelineStageListResponse:
      type: object
      description: Response for a list of stages.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_Stage_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          stages:
            type: array
            description: The list of stages.
            items:
              $ref: "#/components/schemas/Stage"
    PipelineSummariesListResponse:
      type: object
      description: Response for a list of pipeline summaries.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_PipelineSummary_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          pipeline_summaries:
            type: array
            description: The list of pipeline summaries.
            items:
              $ref: "#/components/schemas/PipelineSummary"
    PipelineSummary:
      type: object
      description: Represents a summary of a pipeline.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - required:
        - pipeline_name
        properties:
          pipeline_id:
            pattern: ^\d+$
            type: string
            description: The ID of the pipeline. Can be null and must be a string
              of digits if present.
            nullable: true
          pipeline_name:
            maxLength: 255
            minLength: 1
            type: string
            description: The name of the pipeline. Must be a non-null string with
              a length between 1 and 255 characters.
          stat_total_deal_count:
            type: integer
            description: The total count of deals in the pipeline. Can be null.
            format: int32
            nullable: true
          stat_new_deal_count:
            type: integer
            description: The count of new deals in the pipeline. Can be null.
            format: int32
            nullable: true
    Stage:
      type: object
      description: Represents a stage in a pipeline.
      allOf:
      - $ref: "#/components/schemas/BaseModel"
      - properties:
          name:
            type: string
            description: The name of the stage.
          pipeline_id:
            type: string
            description: The ID of the pipeline.
    StageDealListResponse:
      type: object
      description: Response for a list of deals in a stage.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_Deal_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          deals:
            type: array
            description: The list of deals in a stage.
            items:
              $ref: "#/components/schemas/Deal"
    StageListResponse:
      type: object
      description: Response for a list of stages.
      allOf:
      - $ref: "#/components/schemas/BaseListResponse_Stage_"
      - properties:
          next_page_token:
            type: string
            description: Token for the next page of results.
          stages:
            type: array
            description: The list of stages.
            items:
              $ref: "#/components/schemas/Stage"
    UpdateDealNoteRequest:
      required:
      - body
      type: object
      properties:
        body:
          maxLength: 5000
          minLength: 1
          type: string
          description: The body of the note. Must not be blank and must be between
            1 and 5000 characters.
      description: Request model for updating a deal note.
    UpdateOutcomeLabelsRequest:
      required:
      - outcome_labels
      type: object
      properties:
        outcome_labels:
          type: array
          description: List of outcome labels to be updated.
          items:
            $ref: "#/components/schemas/PipelineOutcomeLabel"
      description: Represents a request to update outcome labels for a pipeline.
    UpdatePipelineRequest:
      required:
      - name
      type: object
      properties:
        name:
          maxLength: 255
          minLength: 1
          type: string
          description: The name of the pipeline.
      description: Request for updating a pipeline.
    UpdateStageRequest:
      required:
      - name
      - next_stage_id
      - pipeline_id
      - previous_stage_id
      type: object
      properties:
        name:
          minLength: 1
          type: string
          description: The name of the stage.
          nullable: true
        previous_stage_id:
          minLength: 1
          type: string
          description: The ID of the previous stage.
          nullable: true
        next_stage_id:
          minLength: 1
          type: string
          description: The ID of the next stage.
          nullable: true
        pipeline_id:
          minLength: 1
          type: string
          description: The ID of the pipeline.
          nullable: true
      description: Request for updating a stage.
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.infusionsoft.com/app/oauth/authorize
          tokenUrl: https://api.infusionsoft.com/token
          scopes:
            api: General API access