/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Contacts to an Automation Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddToAutomationSequenceResponse</returns>
        AddToAutomationSequenceResponse AddContactsToAutomationSequenceUsingPOST(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0);

        /// <summary>
        /// Add Contacts to an Automation Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddToAutomationSequenceResponse</returns>
        ApiResponse<AddToAutomationSequenceResponse> AddContactsToAutomationSequenceUsingPOSTWithHttpInfo(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0);
        /// <summary>
        /// Delete an Automation
        /// </summary>
        /// <remarks>
        /// Deletes a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteAutomationUsingDELETE(List<long> automationIds, int operationIndex = 0);

        /// <summary>
        /// Delete an Automation
        /// </summary>
        /// <remarks>
        /// Deletes a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAutomationUsingDELETEWithHttpInfo(List<long> automationIds, int operationIndex = 0);
        /// <summary>
        /// Retrieve an Automation
        /// </summary>
        /// <remarks>
        /// Retrieves a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        Automation GetAutomationUsingGET(string automationId, int operationIndex = 0);

        /// <summary>
        /// Retrieve an Automation
        /// </summary>
        /// <remarks>
        /// Retrieves a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        ApiResponse<Automation> GetAutomationUsingGETWithHttpInfo(string automationId, int operationIndex = 0);
        /// <summary>
        /// List Automations Ids
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations IDs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAutomationIdsResponse</returns>
        ListAutomationIdsResponse ListAllAutomationIdsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Automations Ids
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations IDs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAutomationIdsResponse</returns>
        ApiResponse<ListAutomationIdsResponse> ListAllAutomationIdsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);
        /// <summary>
        /// List Automations
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAutomationResponse</returns>
        ListAutomationResponse ListAutomationsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List Automations
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAutomationResponse</returns>
        ApiResponse<ListAutomationResponse> ListAutomationsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Update an Automation&#39;s Category
        /// </summary>
        /// <remarks>
        /// Updates the category of one or more automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateAutomationCategoryUsingPUT(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0);

        /// <summary>
        /// Update an Automation&#39;s Category
        /// </summary>
        /// <remarks>
        /// Updates the category of one or more automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateAutomationCategoryUsingPUTWithHttpInfo(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Contacts to an Automation Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddToAutomationSequenceResponse</returns>
        System.Threading.Tasks.Task<AddToAutomationSequenceResponse> AddContactsToAutomationSequenceUsingPOSTAsync(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Add Contacts to an Automation Sequence
        /// </summary>
        /// <remarks>
        /// Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddToAutomationSequenceResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddToAutomationSequenceResponse>> AddContactsToAutomationSequenceUsingPOSTWithHttpInfoAsync(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an Automation
        /// </summary>
        /// <remarks>
        /// Deletes a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAutomationUsingDELETEAsync(List<long> automationIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an Automation
        /// </summary>
        /// <remarks>
        /// Deletes a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAutomationUsingDELETEWithHttpInfoAsync(List<long> automationIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an Automation
        /// </summary>
        /// <remarks>
        /// Retrieves a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        System.Threading.Tasks.Task<Automation> GetAutomationUsingGETAsync(string automationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an Automation
        /// </summary>
        /// <remarks>
        /// Retrieves a single automation
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Automation>> GetAutomationUsingGETWithHttpInfoAsync(string automationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Automations Ids
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations IDs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAutomationIdsResponse</returns>
        System.Threading.Tasks.Task<ListAutomationIdsResponse> ListAllAutomationIdsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Automations Ids
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations IDs
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAutomationIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAutomationIdsResponse>> ListAllAutomationIdsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Automations
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAutomationResponse</returns>
        System.Threading.Tasks.Task<ListAutomationResponse> ListAutomationsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Automations
        /// </summary>
        /// <remarks>
        /// Retrieves a list of automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAutomationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListAutomationResponse>> ListAutomationsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Automation&#39;s Category
        /// </summary>
        /// <remarks>
        /// Updates the category of one or more automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateAutomationCategoryUsingPUTAsync(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Automation&#39;s Category
        /// </summary>
        /// <remarks>
        /// Updates the category of one or more automations
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateAutomationCategoryUsingPUTWithHttpInfoAsync(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAutomationApi : IAutomationApiSync, IAutomationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AutomationApi : IAutomationApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AutomationApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AutomationApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Contacts to an Automation Sequence Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddToAutomationSequenceResponse</returns>
        public AddToAutomationSequenceResponse AddContactsToAutomationSequenceUsingPOST(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<AddToAutomationSequenceResponse> localVarResponse = AddContactsToAutomationSequenceUsingPOSTWithHttpInfo(automationId, sequenceId, addToAutomationSequenceRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to an Automation Sequence Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddToAutomationSequenceResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<AddToAutomationSequenceResponse> AddContactsToAutomationSequenceUsingPOSTWithHttpInfo(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0)
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationId' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }

            // verify the required parameter 'addToAutomationSequenceRequest' is set
            if (addToAutomationSequenceRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'addToAutomationSequenceRequest' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("automation_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(automationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = addToAutomationSequenceRequest;

            localVarRequestOptions.Operation = "AutomationApi.AddContactsToAutomationSequenceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AddToAutomationSequenceResponse>("/v2/automations/{automation_id}/sequences/{sequence_id}:addContacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContactsToAutomationSequenceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contacts to an Automation Sequence Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddToAutomationSequenceResponse</returns>
        public async System.Threading.Tasks.Task<AddToAutomationSequenceResponse> AddContactsToAutomationSequenceUsingPOSTAsync(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<AddToAutomationSequenceResponse> localVarResponse = await AddContactsToAutomationSequenceUsingPOSTWithHttpInfoAsync(automationId, sequenceId, addToAutomationSequenceRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to an Automation Sequence Adds a list of contacts to an automation sequence Response contains a map of the provided list of Contact Ids and their individual result.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="sequenceId">sequence_id</param>
        /// <param name="addToAutomationSequenceRequest">addToAutomationSequenceRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddToAutomationSequenceResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<AddToAutomationSequenceResponse>> AddContactsToAutomationSequenceUsingPOSTWithHttpInfoAsync(string automationId, string sequenceId, AddToAutomationSequenceRequest addToAutomationSequenceRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationId' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }

            // verify the required parameter 'sequenceId' is set
            if (sequenceId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'sequenceId' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }

            // verify the required parameter 'addToAutomationSequenceRequest' is set
            if (addToAutomationSequenceRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'addToAutomationSequenceRequest' when calling AutomationApi->AddContactsToAutomationSequenceUsingPOST");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("automation_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(automationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sequence_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(sequenceId)); // path parameter
            localVarRequestOptions.Data = addToAutomationSequenceRequest;

            localVarRequestOptions.Operation = "AutomationApi.AddContactsToAutomationSequenceUsingPOST";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddToAutomationSequenceResponse>("/v2/automations/{automation_id}/sequences/{sequence_id}:addContacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContactsToAutomationSequenceUsingPOST", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Automation Deletes a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteAutomationUsingDELETE(List<long> automationIds, int operationIndex = 0)
        {
            DeleteAutomationUsingDELETEWithHttpInfo(automationIds);
        }

        /// <summary>
        /// Delete an Automation Deletes a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> DeleteAutomationUsingDELETEWithHttpInfo(List<long> automationIds, int operationIndex = 0)
        {
            // verify the required parameter 'automationIds' is set
            if (automationIds == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationIds' when calling AutomationApi->DeleteAutomationUsingDELETE");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "automation_ids", automationIds));

            localVarRequestOptions.Operation = "AutomationApi.DeleteAutomationUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/automations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an Automation Deletes a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAutomationUsingDELETEAsync(List<long> automationIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteAutomationUsingDELETEWithHttpInfoAsync(automationIds, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an Automation Deletes a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationIds">automation_ids</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> DeleteAutomationUsingDELETEWithHttpInfoAsync(List<long> automationIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'automationIds' is set
            if (automationIds == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationIds' when calling AutomationApi->DeleteAutomationUsingDELETE");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "automation_ids", automationIds));

            localVarRequestOptions.Operation = "AutomationApi.DeleteAutomationUsingDELETE";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/automations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAutomationUsingDELETE", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Automation Retrieves a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Automation</returns>
        public Automation GetAutomationUsingGET(string automationId, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Automation> localVarResponse = GetAutomationUsingGETWithHttpInfo(automationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Automation Retrieves a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Automation</returns>
        public Keap.Core.V2.Client.ApiResponse<Automation> GetAutomationUsingGETWithHttpInfo(string automationId, int operationIndex = 0)
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationId' when calling AutomationApi->GetAutomationUsingGET");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("automation_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(automationId)); // path parameter

            localVarRequestOptions.Operation = "AutomationApi.GetAutomationUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Automation>("/v2/automations/{automation_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an Automation Retrieves a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Automation</returns>
        public async System.Threading.Tasks.Task<Automation> GetAutomationUsingGETAsync(string automationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<Automation> localVarResponse = await GetAutomationUsingGETWithHttpInfoAsync(automationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an Automation Retrieves a single automation
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationId">automation_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Automation)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Automation>> GetAutomationUsingGETWithHttpInfoAsync(string automationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'automationId' is set
            if (automationId == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'automationId' when calling AutomationApi->GetAutomationUsingGET");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("automation_id", Keap.Core.V2.Client.ClientUtils.ParameterToString(automationId)); // path parameter

            localVarRequestOptions.Operation = "AutomationApi.GetAutomationUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Automation>("/v2/automations/{automation_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAutomationUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Automations Ids Retrieves a list of automations IDs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAutomationIdsResponse</returns>
        public ListAutomationIdsResponse ListAllAutomationIdsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAutomationIdsResponse> localVarResponse = ListAllAutomationIdsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken, stats);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Automations Ids Retrieves a list of automations IDs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAutomationIdsResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAutomationIdsResponse> ListAllAutomationIdsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "AutomationApi.ListAllAutomationIdsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAutomationIdsResponse>("/v2/automations/ids", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllAutomationIdsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Automations Ids Retrieves a list of automations IDs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAutomationIdsResponse</returns>
        public async System.Threading.Tasks.Task<ListAutomationIdsResponse> ListAllAutomationIdsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<ListAutomationIdsResponse> localVarResponse = await ListAllAutomationIdsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, stats, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Automations Ids Retrieves a list of automations IDs
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAutomationIdsResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAutomationIdsResponse>> ListAllAutomationIdsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "AutomationApi.ListAllAutomationIdsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAutomationIdsResponse>("/v2/automations/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAllAutomationIdsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Automations Retrieves a list of automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListAutomationResponse</returns>
        public ListAutomationResponse ListAutomationsUsingGET(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<ListAutomationResponse> localVarResponse = ListAutomationsUsingGETWithHttpInfo(filter, orderBy, pageSize, pageToken, stats);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Automations Retrieves a list of automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListAutomationResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<ListAutomationResponse> ListAutomationsUsingGETWithHttpInfo(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "AutomationApi.ListAutomationsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ListAutomationResponse>("/v2/automations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAutomationsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Automations Retrieves a list of automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListAutomationResponse</returns>
        public async System.Threading.Tasks.Task<ListAutomationResponse> ListAutomationsUsingGETAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<ListAutomationResponse> localVarResponse = await ListAutomationsUsingGETWithHttpInfoAsync(filter, orderBy, pageSize, pageToken, stats, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Automations Retrieves a list of automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter to apply, allowed fields are: - (String) &#x60;name&#x60;  You will need to apply the &#x60;&#x3D;&#x3D;&#x60; operator to check the equality of the filter with your searched text, in the encoded form &#x60;%3D%3D&#x60;. The search will look for the text anywhere in the automation name.  - &#x60;filter&#x3D;name%3D%3DSpring Automation&#x60; - &#x60;filter&#x3D;name%3D%3DTag New Contacts&#x60;  (optional)</param>
        /// <param name="orderBy">Attribute and direction to order items. One of the following fields: - &#x60;name&#x60; - &#x60;category&#x60; - &#x60;activeContacts&#x60; - &#x60;publishedDate&#x60;  One of the following directions: - &#x60;asc&#x60; - &#x60;desc&#x60; (optional)</param>
        /// <param name="pageSize">Total number of items to return per page (optional)</param>
        /// <param name="pageToken">Page token (optional)</param>
        /// <param name="stats"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListAutomationResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<ListAutomationResponse>> ListAutomationsUsingGETWithHttpInfoAsync(string? filter = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), string? pageToken = default(string?), bool? stats = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (stats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "stats", stats));
            }

            localVarRequestOptions.Operation = "AutomationApi.ListAutomationsUsingGET";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListAutomationResponse>("/v2/automations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAutomationsUsingGET", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Automation&#39;s Category Updates the category of one or more automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateAutomationCategoryUsingPUT(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0)
        {
            UpdateAutomationCategoryUsingPUTWithHttpInfo(updateAutomationCategoryRequest);
        }

        /// <summary>
        /// Update an Automation&#39;s Category Updates the category of one or more automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> UpdateAutomationCategoryUsingPUTWithHttpInfo(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateAutomationCategoryRequest' is set
            if (updateAutomationCategoryRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateAutomationCategoryRequest' when calling AutomationApi->UpdateAutomationCategoryUsingPUT");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAutomationCategoryRequest;

            localVarRequestOptions.Operation = "AutomationApi.UpdateAutomationCategoryUsingPUT";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/automations/category", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutomationCategoryUsingPUT", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Automation&#39;s Category Updates the category of one or more automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateAutomationCategoryUsingPUTAsync(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateAutomationCategoryUsingPUTWithHttpInfoAsync(updateAutomationCategoryRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update an Automation&#39;s Category Updates the category of one or more automations
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAutomationCategoryRequest">updateAutomationCategoryRequest</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> UpdateAutomationCategoryUsingPUTWithHttpInfoAsync(UpdateAutomationCategoryRequest updateAutomationCategoryRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAutomationCategoryRequest' is set
            if (updateAutomationCategoryRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateAutomationCategoryRequest' when calling AutomationApi->UpdateAutomationCategoryUsingPUT");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAutomationCategoryRequest;

            localVarRequestOptions.Operation = "AutomationApi.UpdateAutomationCategoryUsingPUT";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/automations/category", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAutomationCategoryUsingPUT", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
