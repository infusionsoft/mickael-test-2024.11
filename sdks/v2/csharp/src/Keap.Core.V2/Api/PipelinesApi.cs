/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.775756
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Keap.Core.V2.Client;
using Keap.Core.V2.Client.Auth;
using Keap.Core.V2.Model;

namespace Keap.Core.V2.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        Pipeline Create(CreatePipelineRequest createPipelineRequest, int operationIndex = 0);

        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> CreateWithHttpInfo(CreatePipelineRequest createPipelineRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a pipeline.
        /// </summary>
        /// <remarks>
        /// Deletes a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Delete1(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0);

        /// <summary>
        /// Deletes a pipeline.
        /// </summary>
        /// <remarks>
        /// Deletes a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> Delete1WithHttpInfo(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        Pipeline Get(string id, int operationIndex = 0);

        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> GetWithHttpInfo(string id, int operationIndex = 0);
        /// <summary>
        /// Gets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Gets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineOutcomeLabelListResponse</returns>
        PipelineOutcomeLabelListResponse GetOutcomeLabels(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Gets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Gets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineOutcomeLabelListResponse</returns>
        ApiResponse<PipelineOutcomeLabelListResponse> GetOutcomeLabelsWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineListResponse</returns>
        PipelineListResponse List(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineListResponse</returns>
        ApiResponse<PipelineListResponse> ListWithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of stages for a specific pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineStageListResponse</returns>
        PipelineStageListResponse ListStages(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of stages for a specific pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineStageListResponse</returns>
        ApiResponse<PipelineStageListResponse> ListStagesWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Retrieves a list of pipeline summaries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of pipeline summaries.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineSummariesListResponse</returns>
        PipelineSummariesListResponse ListSummaries(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// Retrieves a list of pipeline summaries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of pipeline summaries.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineSummariesListResponse</returns>
        ApiResponse<PipelineSummariesListResponse> ListSummariesWithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Sets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Sets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineOutcomeLabelListResponse</returns>
        PipelineOutcomeLabelListResponse SetOutcomeLabels(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0);

        /// <summary>
        /// Sets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Sets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineOutcomeLabelListResponse</returns>
        ApiResponse<PipelineOutcomeLabelListResponse> SetOutcomeLabelsWithHttpInfo(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0);
        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        Pipeline Update1(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0);

        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        ApiResponse<Pipeline> Update1WithHttpInfo(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> CreateAsync(CreatePipelineRequest createPipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates a new entity.
        /// </summary>
        /// <remarks>
        /// Creates a new entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> CreateWithHttpInfoAsync(CreatePipelineRequest createPipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a pipeline.
        /// </summary>
        /// <remarks>
        /// Deletes a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task Delete1Async(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a pipeline.
        /// </summary>
        /// <remarks>
        /// Deletes a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> Delete1WithHttpInfoAsync(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> GetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves an entity by its identifier.
        /// </summary>
        /// <remarks>
        /// Retrieves an entity by its identifier.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> GetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Gets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Gets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineOutcomeLabelListResponse</returns>
        System.Threading.Tasks.Task<PipelineOutcomeLabelListResponse> GetOutcomeLabelsAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Gets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Gets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineOutcomeLabelListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineOutcomeLabelListResponse>> GetOutcomeLabelsWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineListResponse</returns>
        System.Threading.Tasks.Task<PipelineListResponse> ListAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Lists entities based on the provided ListCommand.
        /// </summary>
        /// <remarks>
        /// Lists entities based on the provided ListCommand.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineListResponse>> ListWithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of stages for a specific pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStageListResponse</returns>
        System.Threading.Tasks.Task<PipelineStageListResponse> ListStagesAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of stages for a specific pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStageListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineStageListResponse>> ListStagesWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a list of pipeline summaries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of pipeline summaries.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineSummariesListResponse</returns>
        System.Threading.Tasks.Task<PipelineSummariesListResponse> ListSummariesAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a list of pipeline summaries.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of pipeline summaries.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineSummariesListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineSummariesListResponse>> ListSummariesWithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Sets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Sets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineOutcomeLabelListResponse</returns>
        System.Threading.Tasks.Task<PipelineOutcomeLabelListResponse> SetOutcomeLabelsAsync(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Sets the outcome labels for a pipeline.
        /// </summary>
        /// <remarks>
        /// Sets the outcome labels for a pipeline.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineOutcomeLabelListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PipelineOutcomeLabelListResponse>> SetOutcomeLabelsWithHttpInfoAsync(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        System.Threading.Tasks.Task<Pipeline> Update1Async(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates an existing entity.
        /// </summary>
        /// <remarks>
        /// Updates an existing entity.
        /// </remarks>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pipeline>> Update1WithHttpInfoAsync(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPipelinesApi : IPipelinesApiSync, IPipelinesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PipelinesApi : IPipelinesApi
    {
        private Keap.Core.V2.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelinesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PipelinesApi(string basePath)
        {
            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                new Keap.Core.V2.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PipelinesApi(Keap.Core.V2.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Keap.Core.V2.Client.Configuration.MergeConfigurations(
                Keap.Core.V2.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Keap.Core.V2.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PipelinesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PipelinesApi(Keap.Core.V2.Client.ISynchronousClient client, Keap.Core.V2.Client.IAsynchronousClient asyncClient, Keap.Core.V2.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Keap.Core.V2.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Keap.Core.V2.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Keap.Core.V2.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Keap.Core.V2.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Keap.Core.V2.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        public Pipeline Create(CreatePipelineRequest createPipelineRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = CreateWithHttpInfo(createPipelineRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public Keap.Core.V2.Client.ApiResponse<Pipeline> CreateWithHttpInfo(CreatePipelineRequest createPipelineRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createPipelineRequest' is set
            if (createPipelineRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createPipelineRequest' when calling PipelinesApi->Create");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPipelineRequest;

            localVarRequestOptions.Operation = "PipelinesApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Pipeline>("/v2/pipelines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> CreateAsync(CreatePipelineRequest createPipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = await CreateWithHttpInfoAsync(createPipelineRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new entity. Creates a new entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPipelineRequest">the create request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Pipeline>> CreateWithHttpInfoAsync(CreatePipelineRequest createPipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPipelineRequest' is set
            if (createPipelineRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'createPipelineRequest' when calling PipelinesApi->Create");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPipelineRequest;

            localVarRequestOptions.Operation = "PipelinesApi.Create";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Pipeline>("/v2/pipelines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Create", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a pipeline. Deletes a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Delete1(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0)
        {
            Delete1WithHttpInfo(id, allowCleanup, newStageId);
        }

        /// <summary>
        /// Deletes a pipeline. Deletes a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Keap.Core.V2.Client.ApiResponse<Object> Delete1WithHttpInfo(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Delete1");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (allowCleanup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "allow_cleanup", allowCleanup));
            }
            if (newStageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "new_stage_id", newStageId));
            }

            localVarRequestOptions.Operation = "PipelinesApi.Delete1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a pipeline. Deletes a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task Delete1Async(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await Delete1WithHttpInfoAsync(id, allowCleanup, newStageId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a pipeline. Deletes a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="allowCleanup">flag indicating whether cleanup is allowed, can be null (optional)</param>
        /// <param name="newStageId">the new stage identifier, can be null (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Object>> Delete1WithHttpInfoAsync(string id, bool? allowCleanup = default(bool?), string? newStageId = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Delete1");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (allowCleanup != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "allow_cleanup", allowCleanup));
            }
            if (newStageId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "new_stage_id", newStageId));
            }

            localVarRequestOptions.Operation = "PipelinesApi.Delete1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Delete1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        public Pipeline Get(string id, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = GetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public Keap.Core.V2.Client.ApiResponse<Pipeline> GetWithHttpInfo(string id, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Get");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PipelinesApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Pipeline>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> GetAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = await GetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves an entity by its identifier. Retrieves an entity by its identifier.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Pipeline>> GetWithHttpInfoAsync(string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Get");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "PipelinesApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Pipeline>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the outcome labels for a pipeline. Gets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineOutcomeLabelListResponse</returns>
        public PipelineOutcomeLabelListResponse GetOutcomeLabels(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> localVarResponse = GetOutcomeLabelsWithHttpInfo(id, filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the outcome labels for a pipeline. Gets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineOutcomeLabelListResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> GetOutcomeLabelsWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->GetOutcomeLabels");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.GetOutcomeLabels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PipelineOutcomeLabelListResponse>("/v2/pipelines/{id}/outcomes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomeLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Gets the outcome labels for a pipeline. Gets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineOutcomeLabelListResponse</returns>
        public async System.Threading.Tasks.Task<PipelineOutcomeLabelListResponse> GetOutcomeLabelsAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> localVarResponse = await GetOutcomeLabelsWithHttpInfoAsync(id, filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the outcome labels for a pipeline. Gets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineOutcomeLabelListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse>> GetOutcomeLabelsWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->GetOutcomeLabels");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.GetOutcomeLabels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PipelineOutcomeLabelListResponse>("/v2/pipelines/{id}/outcomes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomeLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineListResponse</returns>
        public PipelineListResponse List(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<PipelineListResponse> localVarResponse = ListWithHttpInfo(filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineListResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<PipelineListResponse> ListWithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PipelineListResponse>("/v2/pipelines", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineListResponse</returns>
        public async System.Threading.Tasks.Task<PipelineListResponse> ListAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<PipelineListResponse> localVarResponse = await ListWithHttpInfoAsync(filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Lists entities based on the provided ListCommand. Lists entities based on the provided ListCommand.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<PipelineListResponse>> ListWithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.List";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PipelineListResponse>("/v2/pipelines", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("List", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline. Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineStageListResponse</returns>
        public PipelineStageListResponse ListStages(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<PipelineStageListResponse> localVarResponse = ListStagesWithHttpInfo(id, filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline. Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineStageListResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<PipelineStageListResponse> ListStagesWithHttpInfo(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->ListStages");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.ListStages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PipelineStageListResponse>("/v2/pipelines/{id}/stages", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline. Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineStageListResponse</returns>
        public async System.Threading.Tasks.Task<PipelineStageListResponse> ListStagesAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<PipelineStageListResponse> localVarResponse = await ListStagesWithHttpInfoAsync(id, filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of stages for a specific pipeline. Retrieves a list of stages for a specific pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineStageListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<PipelineStageListResponse>> ListStagesWithHttpInfoAsync(string id, string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->ListStages");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.ListStages";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PipelineStageListResponse>("/v2/pipelines/{id}/stages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListStages", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of pipeline summaries. Retrieves a list of pipeline summaries.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineSummariesListResponse</returns>
        public PipelineSummariesListResponse ListSummaries(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<PipelineSummariesListResponse> localVarResponse = ListSummariesWithHttpInfo(filter, pageToken, orderBy, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of pipeline summaries. Retrieves a list of pipeline summaries.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineSummariesListResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<PipelineSummariesListResponse> ListSummariesWithHttpInfo(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0)
        {
            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.ListSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PipelineSummariesListResponse>("/v2/pipelines/summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a list of pipeline summaries. Retrieves a list of pipeline summaries.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineSummariesListResponse</returns>
        public async System.Threading.Tasks.Task<PipelineSummariesListResponse> ListSummariesAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<PipelineSummariesListResponse> localVarResponse = await ListSummariesWithHttpInfoAsync(filter, pageToken, orderBy, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a list of pipeline summaries. Retrieves a list of pipeline summaries.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="pageToken"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="pageSize"> (optional, default to 1000)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineSummariesListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<PipelineSummariesListResponse>> ListSummariesWithHttpInfoAsync(string? filter = default(string?), string? pageToken = default(string?), string? orderBy = default(string?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pageToken != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_token", pageToken));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "PipelinesApi.ListSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PipelineSummariesListResponse>("/v2/pipelines/summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the outcome labels for a pipeline. Sets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PipelineOutcomeLabelListResponse</returns>
        public PipelineOutcomeLabelListResponse SetOutcomeLabels(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> localVarResponse = SetOutcomeLabelsWithHttpInfo(id, updateOutcomeLabelsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the outcome labels for a pipeline. Sets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PipelineOutcomeLabelListResponse</returns>
        public Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> SetOutcomeLabelsWithHttpInfo(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->SetOutcomeLabels");
            }

            // verify the required parameter 'updateOutcomeLabelsRequest' is set
            if (updateOutcomeLabelsRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateOutcomeLabelsRequest' when calling PipelinesApi->SetOutcomeLabels");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateOutcomeLabelsRequest;

            localVarRequestOptions.Operation = "PipelinesApi.SetOutcomeLabels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PipelineOutcomeLabelListResponse>("/v2/pipelines/{id}/outcomes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOutcomeLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the outcome labels for a pipeline. Sets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PipelineOutcomeLabelListResponse</returns>
        public async System.Threading.Tasks.Task<PipelineOutcomeLabelListResponse> SetOutcomeLabelsAsync(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse> localVarResponse = await SetOutcomeLabelsWithHttpInfoAsync(id, updateOutcomeLabelsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the outcome labels for a pipeline. Sets the outcome labels for a pipeline.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the pipeline identifier</param>
        /// <param name="updateOutcomeLabelsRequest">the request containing the new outcome labels</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PipelineOutcomeLabelListResponse)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<PipelineOutcomeLabelListResponse>> SetOutcomeLabelsWithHttpInfoAsync(string id, UpdateOutcomeLabelsRequest updateOutcomeLabelsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->SetOutcomeLabels");
            }

            // verify the required parameter 'updateOutcomeLabelsRequest' is set
            if (updateOutcomeLabelsRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateOutcomeLabelsRequest' when calling PipelinesApi->SetOutcomeLabels");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateOutcomeLabelsRequest;

            localVarRequestOptions.Operation = "PipelinesApi.SetOutcomeLabels";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PipelineOutcomeLabelListResponse>("/v2/pipelines/{id}/outcomes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetOutcomeLabels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Pipeline</returns>
        public Pipeline Update1(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0)
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = Update1WithHttpInfo(id, updateMask, updatePipelineRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Pipeline</returns>
        public Keap.Core.V2.Client.ApiResponse<Pipeline> Update1WithHttpInfo(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Update1");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateMask' when calling PipelinesApi->Update1");
            }

            // verify the required parameter 'updatePipelineRequest' is set
            if (updatePipelineRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updatePipelineRequest' when calling PipelinesApi->Update1");
            }

            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            localVarRequestOptions.Data = updatePipelineRequest;

            localVarRequestOptions.Operation = "PipelinesApi.Update1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Pipeline>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Pipeline</returns>
        public async System.Threading.Tasks.Task<Pipeline> Update1Async(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Keap.Core.V2.Client.ApiResponse<Pipeline> localVarResponse = await Update1WithHttpInfoAsync(id, updateMask, updatePipelineRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates an existing entity. Updates an existing entity.
        /// </summary>
        /// <exception cref="Keap.Core.V2.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">the entity identifier</param>
        /// <param name="updateMask">the fields to update</param>
        /// <param name="updatePipelineRequest">the update request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Pipeline)</returns>
        public async System.Threading.Tasks.Task<Keap.Core.V2.Client.ApiResponse<Pipeline>> Update1WithHttpInfoAsync(string id, List<string> updateMask, UpdatePipelineRequest updatePipelineRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'id' when calling PipelinesApi->Update1");
            }

            // verify the required parameter 'updateMask' is set
            if (updateMask == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updateMask' when calling PipelinesApi->Update1");
            }

            // verify the required parameter 'updatePipelineRequest' is set
            if (updatePipelineRequest == null)
            {
                throw new Keap.Core.V2.Client.ApiException(400, "Missing required parameter 'updatePipelineRequest' when calling PipelinesApi->Update1");
            }


            Keap.Core.V2.Client.RequestOptions localVarRequestOptions = new Keap.Core.V2.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Keap.Core.V2.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Keap.Core.V2.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Keap.Core.V2.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Keap.Core.V2.Client.ClientUtils.ParameterToMultiMap("multi", "update_mask", updateMask));
            localVarRequestOptions.Data = updatePipelineRequest;

            localVarRequestOptions.Operation = "PipelinesApi.Update1";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Pipeline>("/v2/pipelines/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Update1", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
