/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// EmailTemplate
    /// </summary>
    [DataContract(Name = "EmailTemplate")]
    public partial class EmailTemplate : IValidatableObject
    {
        /// <summary>
        /// The content type of the email
        /// </summary>
        /// <value>The content type of the email</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ContentTypeEnum
        {
            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 1,

            /// <summary>
            /// Enum HTML for value: HTML
            /// </summary>
            [EnumMember(Value = "HTML")]
            HTML = 2,

            /// <summary>
            /// Enum MULTIPART for value: MULTIPART
            /// </summary>
            [EnumMember(Value = "MULTIPART")]
            MULTIPART = 3
        }

        /// <summary>
        /// The content type of the email
        /// </summary>
        /// <value>The content type of the email</value>
        [DataMember(Name = "content_type", EmitDefaultValue = false)]
        public ContentTypeEnum? ContentType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTemplate" /> class.
        /// </summary>
        /// <param name="bccAddress">The bcc address of the email.</param>
        /// <param name="categories">The categories associated with the email.</param>
        /// <param name="ccAddress">The cc address of the email.</param>
        /// <param name="contentType">The content type of the email.</param>
        /// <param name="fromAddress">The from address of the email.</param>
        /// <param name="htmlBody">The HTML body of the email.</param>
        /// <param name="mergeContext">The merge context of the email.</param>
        /// <param name="pieceTitle">The title of the piece.</param>
        /// <param name="subject">The subject of the email.</param>
        /// <param name="textBody">The text body of the email.</param>
        /// <param name="toAddress">The to address of the email.</param>
        public EmailTemplate(string bccAddress = default(string), List<string> categories = default(List<string>), string ccAddress = default(string), ContentTypeEnum? contentType = default(ContentTypeEnum?), string fromAddress = default(string), string htmlBody = default(string), string mergeContext = default(string), string pieceTitle = default(string), string subject = default(string), string textBody = default(string), string toAddress = default(string))
        {
            this.BccAddress = bccAddress;
            this.Categories = categories;
            this.CcAddress = ccAddress;
            this.ContentType = contentType;
            this.FromAddress = fromAddress;
            this.HtmlBody = htmlBody;
            this.MergeContext = mergeContext;
            this.PieceTitle = pieceTitle;
            this.Subject = subject;
            this.TextBody = textBody;
            this.ToAddress = toAddress;
        }

        /// <summary>
        /// The bcc address of the email
        /// </summary>
        /// <value>The bcc address of the email</value>
        [DataMember(Name = "bcc_address", EmitDefaultValue = false)]
        public string BccAddress { get; set; }

        /// <summary>
        /// The categories associated with the email
        /// </summary>
        /// <value>The categories associated with the email</value>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// The cc address of the email
        /// </summary>
        /// <value>The cc address of the email</value>
        [DataMember(Name = "cc_address", EmitDefaultValue = false)]
        public string CcAddress { get; set; }

        /// <summary>
        /// The from address of the email
        /// </summary>
        /// <value>The from address of the email</value>
        [DataMember(Name = "from_address", EmitDefaultValue = false)]
        public string FromAddress { get; set; }

        /// <summary>
        /// The HTML body of the email
        /// </summary>
        /// <value>The HTML body of the email</value>
        [DataMember(Name = "html_body", EmitDefaultValue = false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// The merge context of the email
        /// </summary>
        /// <value>The merge context of the email</value>
        [DataMember(Name = "merge_context", EmitDefaultValue = false)]
        public string MergeContext { get; set; }

        /// <summary>
        /// The title of the piece
        /// </summary>
        /// <value>The title of the piece</value>
        [DataMember(Name = "piece_title", EmitDefaultValue = false)]
        public string PieceTitle { get; set; }

        /// <summary>
        /// The subject of the email
        /// </summary>
        /// <value>The subject of the email</value>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// The text body of the email
        /// </summary>
        /// <value>The text body of the email</value>
        [DataMember(Name = "text_body", EmitDefaultValue = false)]
        public string TextBody { get; set; }

        /// <summary>
        /// The to address of the email
        /// </summary>
        /// <value>The to address of the email</value>
        [DataMember(Name = "to_address", EmitDefaultValue = false)]
        public string ToAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailTemplate {\n");
            sb.Append("  BccAddress: ").Append(BccAddress).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  CcAddress: ").Append(CcAddress).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  MergeContext: ").Append(MergeContext).Append("\n");
            sb.Append("  PieceTitle: ").Append(PieceTitle).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  ToAddress: ").Append(ToAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
