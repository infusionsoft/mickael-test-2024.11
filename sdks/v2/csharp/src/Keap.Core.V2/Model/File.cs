/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// File
    /// </summary>
    [DataContract(Name = "File")]
    public partial class File : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="File" /> class.
        /// </summary>
        /// <param name="absolute">absolute.</param>
        /// <param name="absoluteFile">absoluteFile.</param>
        /// <param name="absolutePath">absolutePath.</param>
        /// <param name="canonicalFile">canonicalFile.</param>
        /// <param name="canonicalPath">canonicalPath.</param>
        /// <param name="directory">directory.</param>
        /// <param name="executable">executable.</param>
        /// <param name="varFile">varFile.</param>
        /// <param name="freeSpace">freeSpace.</param>
        /// <param name="hidden">hidden.</param>
        /// <param name="lastModified">lastModified.</param>
        /// <param name="name">name.</param>
        /// <param name="parent">parent.</param>
        /// <param name="parentFile">parentFile.</param>
        /// <param name="path">path.</param>
        /// <param name="readable">readable.</param>
        /// <param name="totalSpace">totalSpace.</param>
        /// <param name="usableSpace">usableSpace.</param>
        /// <param name="writable">writable.</param>
        public File(bool absolute = default(bool), File absoluteFile = default(File), string absolutePath = default(string), File canonicalFile = default(File), string canonicalPath = default(string), bool directory = default(bool), bool executable = default(bool), bool varFile = default(bool), long freeSpace = default(long), bool hidden = default(bool), long lastModified = default(long), string name = default(string), string parent = default(string), File parentFile = default(File), string path = default(string), bool readable = default(bool), long totalSpace = default(long), long usableSpace = default(long), bool writable = default(bool))
        {
            this.Absolute = absolute;
            this.AbsoluteFile = absoluteFile;
            this.AbsolutePath = absolutePath;
            this.CanonicalFile = canonicalFile;
            this.CanonicalPath = canonicalPath;
            this.Directory = directory;
            this.Executable = executable;
            this.VarFile = varFile;
            this.FreeSpace = freeSpace;
            this.Hidden = hidden;
            this.LastModified = lastModified;
            this.Name = name;
            this.Parent = parent;
            this.ParentFile = parentFile;
            this.Path = path;
            this.Readable = readable;
            this.TotalSpace = totalSpace;
            this.UsableSpace = usableSpace;
            this.Writable = writable;
        }

        /// <summary>
        /// Gets or Sets Absolute
        /// </summary>
        [DataMember(Name = "absolute", EmitDefaultValue = true)]
        public bool Absolute { get; set; }

        /// <summary>
        /// Gets or Sets AbsoluteFile
        /// </summary>
        [DataMember(Name = "absoluteFile", EmitDefaultValue = false)]
        public File AbsoluteFile { get; set; }

        /// <summary>
        /// Gets or Sets AbsolutePath
        /// </summary>
        [DataMember(Name = "absolutePath", EmitDefaultValue = false)]
        public string AbsolutePath { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalFile
        /// </summary>
        [DataMember(Name = "canonicalFile", EmitDefaultValue = false)]
        public File CanonicalFile { get; set; }

        /// <summary>
        /// Gets or Sets CanonicalPath
        /// </summary>
        [DataMember(Name = "canonicalPath", EmitDefaultValue = false)]
        public string CanonicalPath { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name = "directory", EmitDefaultValue = true)]
        public bool Directory { get; set; }

        /// <summary>
        /// Gets or Sets Executable
        /// </summary>
        [DataMember(Name = "executable", EmitDefaultValue = true)]
        public bool Executable { get; set; }

        /// <summary>
        /// Gets or Sets VarFile
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = true)]
        public bool VarFile { get; set; }

        /// <summary>
        /// Gets or Sets FreeSpace
        /// </summary>
        [DataMember(Name = "freeSpace", EmitDefaultValue = false)]
        public long FreeSpace { get; set; }

        /// <summary>
        /// Gets or Sets Hidden
        /// </summary>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [DataMember(Name = "lastModified", EmitDefaultValue = false)]
        public long LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public string Parent { get; set; }

        /// <summary>
        /// Gets or Sets ParentFile
        /// </summary>
        [DataMember(Name = "parentFile", EmitDefaultValue = false)]
        public File ParentFile { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Readable
        /// </summary>
        [DataMember(Name = "readable", EmitDefaultValue = true)]
        public bool Readable { get; set; }

        /// <summary>
        /// Gets or Sets TotalSpace
        /// </summary>
        [DataMember(Name = "totalSpace", EmitDefaultValue = false)]
        public long TotalSpace { get; set; }

        /// <summary>
        /// Gets or Sets UsableSpace
        /// </summary>
        [DataMember(Name = "usableSpace", EmitDefaultValue = false)]
        public long UsableSpace { get; set; }

        /// <summary>
        /// Gets or Sets Writable
        /// </summary>
        [DataMember(Name = "writable", EmitDefaultValue = true)]
        public bool Writable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class File {\n");
            sb.Append("  Absolute: ").Append(Absolute).Append("\n");
            sb.Append("  AbsoluteFile: ").Append(AbsoluteFile).Append("\n");
            sb.Append("  AbsolutePath: ").Append(AbsolutePath).Append("\n");
            sb.Append("  CanonicalFile: ").Append(CanonicalFile).Append("\n");
            sb.Append("  CanonicalPath: ").Append(CanonicalPath).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  Executable: ").Append(Executable).Append("\n");
            sb.Append("  VarFile: ").Append(VarFile).Append("\n");
            sb.Append("  FreeSpace: ").Append(FreeSpace).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  ParentFile: ").Append(ParentFile).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Readable: ").Append(Readable).Append("\n");
            sb.Append("  TotalSpace: ").Append(TotalSpace).Append("\n");
            sb.Append("  UsableSpace: ").Append(UsableSpace).Append("\n");
            sb.Append("  Writable: ").Append(Writable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
