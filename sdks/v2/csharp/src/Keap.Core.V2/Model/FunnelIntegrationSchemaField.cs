/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// FunnelIntegrationSchemaField
    /// </summary>
    [DataContract(Name = "FunnelIntegrationSchemaField")]
    public partial class FunnelIntegrationSchemaField : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FunnelIntegrationSchemaField" /> class.
        /// </summary>
        /// <param name="label">The label that will be used to show the name of the field in the UI..</param>
        /// <param name="name">The name of the schema field. Will be the defauly label, if no label is provided..</param>
        /// <param name="type">The data type of the field..</param>
        public FunnelIntegrationSchemaField(string label = default(string), string name = default(string), string type = default(string))
        {
            this.Label = label;
            this.Name = name;
            this.Type = type;
        }

        /// <summary>
        /// The label that will be used to show the name of the field in the UI.
        /// </summary>
        /// <value>The label that will be used to show the name of the field in the UI.</value>
        /*
        <example>My Integration Field</example>
        */
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public string Label { get; set; }

        /// <summary>
        /// The name of the schema field. Will be the defauly label, if no label is provided.
        /// </summary>
        /// <value>The name of the schema field. Will be the defauly label, if no label is provided.</value>
        /*
        <example>my_integration_field</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        /// <value>The data type of the field.</value>
        /*
        <example>String</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FunnelIntegrationSchemaField {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
