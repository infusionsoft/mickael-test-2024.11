/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.772488
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// RestPaymentMethod
    /// </summary>
    [DataContract(Name = "RestPaymentMethod")]
    public partial class RestPaymentMethod : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RestPaymentMethod" /> class.
        /// </summary>
        /// <param name="cardInfo">cardInfo.</param>
        /// <param name="dateCreated">dateCreated.</param>
        /// <param name="id">id.</param>
        /// <param name="paymentMethodType">paymentMethodType.</param>
        /// <param name="processorId">processorId.</param>
        /// <param name="processorType">processorType.</param>
        public RestPaymentMethod(CardInfo cardInfo = default(CardInfo), DateTime dateCreated = default(DateTime), string id = default(string), string paymentMethodType = default(string), Guid processorId = default(Guid), string processorType = default(string))
        {
            this.CardInfo = cardInfo;
            this.DateCreated = dateCreated;
            this.Id = id;
            this.PaymentMethodType = paymentMethodType;
            this.ProcessorId = processorId;
            this.ProcessorType = processorType;
        }

        /// <summary>
        /// Gets or Sets CardInfo
        /// </summary>
        [DataMember(Name = "cardInfo", EmitDefaultValue = false)]
        public CardInfo CardInfo { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name = "dateCreated", EmitDefaultValue = false)]
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodType
        /// </summary>
        [DataMember(Name = "paymentMethodType", EmitDefaultValue = false)]
        public string PaymentMethodType { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name = "processorId", EmitDefaultValue = false)]
        public Guid ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorType
        /// </summary>
        [DataMember(Name = "processorType", EmitDefaultValue = false)]
        public string ProcessorType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RestPaymentMethod {\n");
            sb.Append("  CardInfo: ").Append(CardInfo).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  ProcessorType: ").Append(ProcessorType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
