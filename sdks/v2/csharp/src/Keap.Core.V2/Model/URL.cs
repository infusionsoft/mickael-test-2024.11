/*
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Keap.Core.V2.Client.OpenAPIDateConverter;

namespace Keap.Core.V2.Model
{
    /// <summary>
    /// URL
    /// </summary>
    [DataContract(Name = "URL")]
    public partial class URL : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="URL" /> class.
        /// </summary>
        /// <param name="authority">authority.</param>
        /// <param name="content">content.</param>
        /// <param name="defaultPort">defaultPort.</param>
        /// <param name="file">file.</param>
        /// <param name="host">host.</param>
        /// <param name="path">path.</param>
        /// <param name="port">port.</param>
        /// <param name="protocol">protocol.</param>
        /// <param name="query">query.</param>
        /// <param name="varRef">varRef.</param>
        /// <param name="userInfo">userInfo.</param>
        public URL(string authority = default(string), Object content = default(Object), int defaultPort = default(int), string file = default(string), string host = default(string), string path = default(string), int port = default(int), string protocol = default(string), string query = default(string), string varRef = default(string), string userInfo = default(string))
        {
            this.Authority = authority;
            this.Content = content;
            this.DefaultPort = defaultPort;
            this.File = file;
            this.Host = host;
            this.Path = path;
            this.Port = port;
            this.Protocol = protocol;
            this.Query = query;
            this.Ref = varRef;
            this.UserInfo = userInfo;
        }

        /// <summary>
        /// Gets or Sets Authority
        /// </summary>
        [DataMember(Name = "authority", EmitDefaultValue = false)]
        public string Authority { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public Object Content { get; set; }

        /// <summary>
        /// Gets or Sets DefaultPort
        /// </summary>
        [DataMember(Name = "defaultPort", EmitDefaultValue = false)]
        public int DefaultPort { get; set; }

        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name = "file", EmitDefaultValue = false)]
        public string File { get; set; }

        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name = "host", EmitDefaultValue = false)]
        public string Host { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name = "port", EmitDefaultValue = false)]
        public int Port { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name = "protocol", EmitDefaultValue = false)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Gets or Sets Ref
        /// </summary>
        [DataMember(Name = "ref", EmitDefaultValue = false)]
        public string Ref { get; set; }

        /// <summary>
        /// Gets or Sets UserInfo
        /// </summary>
        [DataMember(Name = "userInfo", EmitDefaultValue = false)]
        public string UserInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class URL {\n");
            sb.Append("  Authority: ").Append(Authority).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  DefaultPort: ").Append(DefaultPort).Append("\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Ref: ").Append(Ref).Append("\n");
            sb.Append("  UserInfo: ").Append(UserInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }    }

}
