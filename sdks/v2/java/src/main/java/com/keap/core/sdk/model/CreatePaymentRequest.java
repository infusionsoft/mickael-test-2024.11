/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * CreatePaymentRequest
 */
@JsonPropertyOrder({
  CreatePaymentRequest.JSON_PROPERTY_APPLY_TO_COMMISSIONS,
  CreatePaymentRequest.JSON_PROPERTY_NOTES,
  CreatePaymentRequest.JSON_PROPERTY_PAYMENT_AMOUNT,
  CreatePaymentRequest.JSON_PROPERTY_PAYMENT_METHOD_ID,
  CreatePaymentRequest.JSON_PROPERTY_PAYMENT_METHOD_TYPE,
  CreatePaymentRequest.JSON_PROPERTY_PAYMENT_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreatePaymentRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_APPLY_TO_COMMISSIONS = "apply_to_commissions";
  @jakarta.annotation.Nonnull  private Boolean applyToCommissions;

  public static final String JSON_PROPERTY_NOTES = "notes";
  @jakarta.annotation.Nullable  private String notes;

  public static final String JSON_PROPERTY_PAYMENT_AMOUNT = "payment_amount";
  @jakarta.annotation.Nonnull  private Double paymentAmount;

  public static final String JSON_PROPERTY_PAYMENT_METHOD_ID = "payment_method_id";
  @jakarta.annotation.Nullable  private String paymentMethodId;

  public static final String JSON_PROPERTY_PAYMENT_METHOD_TYPE = "payment_method_type";
  @jakarta.annotation.Nullable  private String paymentMethodType;

  public static final String JSON_PROPERTY_PAYMENT_TIME = "payment_time";
  @jakarta.annotation.Nullable  private String paymentTime;

  public CreatePaymentRequest() { 
  }

  public CreatePaymentRequest applyToCommissions(@jakarta.annotation.Nonnull Boolean applyToCommissions) {
    this.applyToCommissions = applyToCommissions;
    return this;
  }

  /**
   * Get applyToCommissions
   * @return applyToCommissions
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_APPLY_TO_COMMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getApplyToCommissions() {
    return applyToCommissions;
  }


  @JsonProperty(JSON_PROPERTY_APPLY_TO_COMMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApplyToCommissions(@jakarta.annotation.Nonnull Boolean applyToCommissions) {
    this.applyToCommissions = applyToCommissions;
  }


  public CreatePaymentRequest notes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Get notes
   * @return notes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
  }


  public CreatePaymentRequest paymentAmount(@jakarta.annotation.Nonnull Double paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

  /**
   * Get paymentAmount
   * @return paymentAmount
   */
  @jakarta.annotation.Nonnull  @NotNull
  @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Double getPaymentAmount() {
    return paymentAmount;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentAmount(@jakarta.annotation.Nonnull Double paymentAmount) {
    this.paymentAmount = paymentAmount;
  }


  public CreatePaymentRequest paymentMethodId(@jakarta.annotation.Nullable String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

  /**
   * Get paymentMethodId
   * @return paymentMethodId
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentMethodId() {
    return paymentMethodId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentMethodId(@jakarta.annotation.Nullable String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }


  public CreatePaymentRequest paymentMethodType(@jakarta.annotation.Nullable String paymentMethodType) {
    this.paymentMethodType = paymentMethodType;
    return this;
  }

  /**
   * Get paymentMethodType
   * @return paymentMethodType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentMethodType() {
    return paymentMethodType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentMethodType(@jakarta.annotation.Nullable String paymentMethodType) {
    this.paymentMethodType = paymentMethodType;
  }


  public CreatePaymentRequest paymentTime(@jakarta.annotation.Nullable String paymentTime) {
    this.paymentTime = paymentTime;
    return this;
  }

  /**
   * Get paymentTime
   * @return paymentTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_PAYMENT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPaymentTime() {
    return paymentTime;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentTime(@jakarta.annotation.Nullable String paymentTime) {
    this.paymentTime = paymentTime;
  }

  /**
   * Return true if this CreatePaymentRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequest createPaymentRequest = (CreatePaymentRequest) o;
    return Objects.equals(this.applyToCommissions, createPaymentRequest.applyToCommissions) &&
        Objects.equals(this.notes, createPaymentRequest.notes) &&
        Objects.equals(this.paymentAmount, createPaymentRequest.paymentAmount) &&
        Objects.equals(this.paymentMethodId, createPaymentRequest.paymentMethodId) &&
        Objects.equals(this.paymentMethodType, createPaymentRequest.paymentMethodType) &&
        Objects.equals(this.paymentTime, createPaymentRequest.paymentTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyToCommissions, notes, paymentAmount, paymentMethodId, paymentMethodType, paymentTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequest {\n");
    sb.append("    applyToCommissions: ").append(toIndentedString(applyToCommissions)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    paymentMethodType: ").append(toIndentedString(paymentMethodType)).append("\n");
    sb.append("    paymentTime: ").append(toIndentedString(paymentTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private CreatePaymentRequest instance;
    
        public Builder() {
          this(new CreatePaymentRequest());
        }
    
        protected Builder(CreatePaymentRequest instance) {
          this.instance = instance;
        }
    
        public CreatePaymentRequest.Builder applyToCommissions(Boolean applyToCommissions) {
              this.instance.applyToCommissions = applyToCommissions;
          return this;
        }
            public CreatePaymentRequest.Builder notes(String notes) {
              this.instance.notes = notes;
          return this;
        }
            public CreatePaymentRequest.Builder paymentAmount(Double paymentAmount) {
              this.instance.paymentAmount = paymentAmount;
          return this;
        }
            public CreatePaymentRequest.Builder paymentMethodId(String paymentMethodId) {
              this.instance.paymentMethodId = paymentMethodId;
          return this;
        }
            public CreatePaymentRequest.Builder paymentMethodType(String paymentMethodType) {
              this.instance.paymentMethodType = paymentMethodType;
          return this;
        }
            public CreatePaymentRequest.Builder paymentTime(String paymentTime) {
              this.instance.paymentTime = paymentTime;
          return this;
        }
        
    
        /**
        * returns a built CreatePaymentRequest instance.
        *
        * The builder is not reusable.
        */
        public CreatePaymentRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static CreatePaymentRequest.Builder builder() {
        return new CreatePaymentRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public CreatePaymentRequest.Builder toBuilder() {
        return new CreatePaymentRequest.Builder()
          .applyToCommissions(getApplyToCommissions())
          .notes(getNotes())
          .paymentAmount(getPaymentAmount())
          .paymentMethodId(getPaymentMethodId())
          .paymentMethodType(getPaymentMethodType())
          .paymentTime(getPaymentTime());
      }
}

