/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.775756
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * CreateProductRequest
 */
@JsonPropertyOrder({
  CreateProductRequest.JSON_PROPERTY_ACTIVE,
  CreateProductRequest.JSON_PROPERTY_CITY_TAXABLE,
  CreateProductRequest.JSON_PROPERTY_COUNTRY_TAXABLE,
  CreateProductRequest.JSON_PROPERTY_DESCRIPTION,
  CreateProductRequest.JSON_PROPERTY_NAME,
  CreateProductRequest.JSON_PROPERTY_PRICE,
  CreateProductRequest.JSON_PROPERTY_SHORT_DESCRIPTION,
  CreateProductRequest.JSON_PROPERTY_SKU,
  CreateProductRequest.JSON_PROPERTY_STATE_TAXABLE,
  CreateProductRequest.JSON_PROPERTY_STOREFRONT_HIDDEN,
  CreateProductRequest.JSON_PROPERTY_SUBSCRIPTION_ONLY,
  CreateProductRequest.JSON_PROPERTY_TAXABLE,
  CreateProductRequest.JSON_PROPERTY_WEIGHT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreateProductRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  @jakarta.annotation.Nullable  private Boolean active;

  public static final String JSON_PROPERTY_CITY_TAXABLE = "city_taxable";
  @jakarta.annotation.Nullable  private Boolean cityTaxable;

  public static final String JSON_PROPERTY_COUNTRY_TAXABLE = "country_taxable";
  @jakarta.annotation.Nullable  private Boolean countryTaxable;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable  private String description;

  public static final String JSON_PROPERTY_NAME = "name";
  @jakarta.annotation.Nullable  private String name;

  public static final String JSON_PROPERTY_PRICE = "price";
  @jakarta.annotation.Nullable  private Long price;

  public static final String JSON_PROPERTY_SHORT_DESCRIPTION = "short_description";
  @jakarta.annotation.Nullable  private String shortDescription;

  public static final String JSON_PROPERTY_SKU = "sku";
  @jakarta.annotation.Nullable  private String sku;

  public static final String JSON_PROPERTY_STATE_TAXABLE = "state_taxable";
  @jakarta.annotation.Nullable  private Boolean stateTaxable;

  public static final String JSON_PROPERTY_STOREFRONT_HIDDEN = "storefront_hidden";
  @jakarta.annotation.Nullable  private Boolean storefrontHidden;

  public static final String JSON_PROPERTY_SUBSCRIPTION_ONLY = "subscription_only";
  @jakarta.annotation.Nullable  private Boolean subscriptionOnly;

  public static final String JSON_PROPERTY_TAXABLE = "taxable";
  @jakarta.annotation.Nullable  private Boolean taxable;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  @jakarta.annotation.Nullable  private Double weight;

  public CreateProductRequest() { 
  }

  public CreateProductRequest active(@jakarta.annotation.Nullable Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * True means active, False means inactive
   * @return active
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "True means active, False means inactive")
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(@jakarta.annotation.Nullable Boolean active) {
    this.active = active;
  }


  public CreateProductRequest cityTaxable(@jakarta.annotation.Nullable Boolean cityTaxable) {
    this.cityTaxable = cityTaxable;
    return this;
  }

  /**
   * If city-based taxes should be applied to this product
   * @return cityTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If city-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_CITY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCityTaxable() {
    return cityTaxable;
  }


  @JsonProperty(JSON_PROPERTY_CITY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCityTaxable(@jakarta.annotation.Nullable Boolean cityTaxable) {
    this.cityTaxable = cityTaxable;
  }


  public CreateProductRequest countryTaxable(@jakarta.annotation.Nullable Boolean countryTaxable) {
    this.countryTaxable = countryTaxable;
    return this;
  }

  /**
   * If country-based taxes should be applied to this product
   * @return countryTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If country-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_COUNTRY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCountryTaxable() {
    return countryTaxable;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountryTaxable(@jakarta.annotation.Nullable Boolean countryTaxable) {
    this.countryTaxable = countryTaxable;
  }


  public CreateProductRequest description(@jakarta.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Product long description
   * @return description
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product long description")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }


  public CreateProductRequest name(@jakarta.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Product name
   * @return name
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product name")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(@jakarta.annotation.Nullable String name) {
    this.name = name;
  }


  public CreateProductRequest price(@jakarta.annotation.Nullable Long price) {
    this.price = price;
    return this;
  }

  /**
   * The product price. The value is in the currency’s smallest unit. e.g. $12.50 is 1250.
   * @return price
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The product price. The value is in the currency’s smallest unit. e.g. $12.50 is 1250.")
  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getPrice() {
    return price;
  }


  @JsonProperty(JSON_PROPERTY_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrice(@jakarta.annotation.Nullable Long price) {
    this.price = price;
  }


  public CreateProductRequest shortDescription(@jakarta.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

  /**
   * Product short description
   * @return shortDescription
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product short description")
  @JsonProperty(JSON_PROPERTY_SHORT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getShortDescription() {
    return shortDescription;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShortDescription(@jakarta.annotation.Nullable String shortDescription) {
    this.shortDescription = shortDescription;
  }


  public CreateProductRequest sku(@jakarta.annotation.Nullable String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Product SKU
   * @return sku
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product SKU")
  @JsonProperty(JSON_PROPERTY_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSku() {
    return sku;
  }


  @JsonProperty(JSON_PROPERTY_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSku(@jakarta.annotation.Nullable String sku) {
    this.sku = sku;
  }


  public CreateProductRequest stateTaxable(@jakarta.annotation.Nullable Boolean stateTaxable) {
    this.stateTaxable = stateTaxable;
    return this;
  }

  /**
   * If state-based taxes should be applied to this product
   * @return stateTaxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If state-based taxes should be applied to this product")
  @JsonProperty(JSON_PROPERTY_STATE_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStateTaxable() {
    return stateTaxable;
  }


  @JsonProperty(JSON_PROPERTY_STATE_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStateTaxable(@jakarta.annotation.Nullable Boolean stateTaxable) {
    this.stateTaxable = stateTaxable;
  }


  public CreateProductRequest storefrontHidden(@jakarta.annotation.Nullable Boolean storefrontHidden) {
    this.storefrontHidden = storefrontHidden;
    return this;
  }

  /**
   * If the product should not be shown in the storefront
   * @return storefrontHidden
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the product should not be shown in the storefront")
  @JsonProperty(JSON_PROPERTY_STOREFRONT_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getStorefrontHidden() {
    return storefrontHidden;
  }


  @JsonProperty(JSON_PROPERTY_STOREFRONT_HIDDEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStorefrontHidden(@jakarta.annotation.Nullable Boolean storefrontHidden) {
    this.storefrontHidden = storefrontHidden;
  }


  public CreateProductRequest subscriptionOnly(@jakarta.annotation.Nullable Boolean subscriptionOnly) {
    this.subscriptionOnly = subscriptionOnly;
    return this;
  }

  /**
   * If the product is a subscription-only product
   * @return subscriptionOnly
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "If the product is a subscription-only product")
  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getSubscriptionOnly() {
    return subscriptionOnly;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIPTION_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriptionOnly(@jakarta.annotation.Nullable Boolean subscriptionOnly) {
    this.subscriptionOnly = subscriptionOnly;
  }


  public CreateProductRequest taxable(@jakarta.annotation.Nullable Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * Whether or not the product should be taxed
   * @return taxable
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Whether or not the product should be taxed")
  @JsonProperty(JSON_PROPERTY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getTaxable() {
    return taxable;
  }


  @JsonProperty(JSON_PROPERTY_TAXABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxable(@jakarta.annotation.Nullable Boolean taxable) {
    this.taxable = taxable;
  }


  public CreateProductRequest weight(@jakarta.annotation.Nullable Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Product weight
   * @return weight
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "Product weight")
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeight(@jakarta.annotation.Nullable Double weight) {
    this.weight = weight;
  }

  /**
   * Return true if this CreateProductRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProductRequest createProductRequest = (CreateProductRequest) o;
    return Objects.equals(this.active, createProductRequest.active) &&
        Objects.equals(this.cityTaxable, createProductRequest.cityTaxable) &&
        Objects.equals(this.countryTaxable, createProductRequest.countryTaxable) &&
        Objects.equals(this.description, createProductRequest.description) &&
        Objects.equals(this.name, createProductRequest.name) &&
        Objects.equals(this.price, createProductRequest.price) &&
        Objects.equals(this.shortDescription, createProductRequest.shortDescription) &&
        Objects.equals(this.sku, createProductRequest.sku) &&
        Objects.equals(this.stateTaxable, createProductRequest.stateTaxable) &&
        Objects.equals(this.storefrontHidden, createProductRequest.storefrontHidden) &&
        Objects.equals(this.subscriptionOnly, createProductRequest.subscriptionOnly) &&
        Objects.equals(this.taxable, createProductRequest.taxable) &&
        Objects.equals(this.weight, createProductRequest.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, cityTaxable, countryTaxable, description, name, price, shortDescription, sku, stateTaxable, storefrontHidden, subscriptionOnly, taxable, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProductRequest {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    cityTaxable: ").append(toIndentedString(cityTaxable)).append("\n");
    sb.append("    countryTaxable: ").append(toIndentedString(countryTaxable)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    stateTaxable: ").append(toIndentedString(stateTaxable)).append("\n");
    sb.append("    storefrontHidden: ").append(toIndentedString(storefrontHidden)).append("\n");
    sb.append("    subscriptionOnly: ").append(toIndentedString(subscriptionOnly)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private CreateProductRequest instance;
    
        public Builder() {
          this(new CreateProductRequest());
        }
    
        protected Builder(CreateProductRequest instance) {
          this.instance = instance;
        }
    
        public CreateProductRequest.Builder active(Boolean active) {
              this.instance.active = active;
          return this;
        }
            public CreateProductRequest.Builder cityTaxable(Boolean cityTaxable) {
              this.instance.cityTaxable = cityTaxable;
          return this;
        }
            public CreateProductRequest.Builder countryTaxable(Boolean countryTaxable) {
              this.instance.countryTaxable = countryTaxable;
          return this;
        }
            public CreateProductRequest.Builder description(String description) {
              this.instance.description = description;
          return this;
        }
            public CreateProductRequest.Builder name(String name) {
              this.instance.name = name;
          return this;
        }
            public CreateProductRequest.Builder price(Long price) {
              this.instance.price = price;
          return this;
        }
            public CreateProductRequest.Builder shortDescription(String shortDescription) {
              this.instance.shortDescription = shortDescription;
          return this;
        }
            public CreateProductRequest.Builder sku(String sku) {
              this.instance.sku = sku;
          return this;
        }
            public CreateProductRequest.Builder stateTaxable(Boolean stateTaxable) {
              this.instance.stateTaxable = stateTaxable;
          return this;
        }
            public CreateProductRequest.Builder storefrontHidden(Boolean storefrontHidden) {
              this.instance.storefrontHidden = storefrontHidden;
          return this;
        }
            public CreateProductRequest.Builder subscriptionOnly(Boolean subscriptionOnly) {
              this.instance.subscriptionOnly = subscriptionOnly;
          return this;
        }
            public CreateProductRequest.Builder taxable(Boolean taxable) {
              this.instance.taxable = taxable;
          return this;
        }
            public CreateProductRequest.Builder weight(Double weight) {
              this.instance.weight = weight;
          return this;
        }
        
    
        /**
        * returns a built CreateProductRequest instance.
        *
        * The builder is not reusable.
        */
        public CreateProductRequest build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static CreateProductRequest.Builder builder() {
        return new CreateProductRequest.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public CreateProductRequest.Builder toBuilder() {
        return new CreateProductRequest.Builder()
          .active(getActive())
          .cityTaxable(getCityTaxable())
          .countryTaxable(getCountryTaxable())
          .description(getDescription())
          .name(getName())
          .price(getPrice())
          .shortDescription(getShortDescription())
          .sku(getSku())
          .stateTaxable(getStateTaxable())
          .storefrontHidden(getStorefrontHidden())
          .subscriptionOnly(getSubscriptionOnly())
          .taxable(getTaxable())
          .weight(getWeight());
      }
}

