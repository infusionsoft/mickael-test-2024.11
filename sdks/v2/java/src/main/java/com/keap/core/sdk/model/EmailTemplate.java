/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * EmailTemplate
 */
@JsonPropertyOrder({
  EmailTemplate.JSON_PROPERTY_BCC_ADDRESS,
  EmailTemplate.JSON_PROPERTY_CATEGORIES,
  EmailTemplate.JSON_PROPERTY_CC_ADDRESS,
  EmailTemplate.JSON_PROPERTY_CONTENT_TYPE,
  EmailTemplate.JSON_PROPERTY_FROM_ADDRESS,
  EmailTemplate.JSON_PROPERTY_HTML_BODY,
  EmailTemplate.JSON_PROPERTY_MERGE_CONTEXT,
  EmailTemplate.JSON_PROPERTY_PIECE_TITLE,
  EmailTemplate.JSON_PROPERTY_SUBJECT,
  EmailTemplate.JSON_PROPERTY_TEXT_BODY,
  EmailTemplate.JSON_PROPERTY_TO_ADDRESS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class EmailTemplate implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_BCC_ADDRESS = "bcc_address";
  @jakarta.annotation.Nullable  private String bccAddress;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  @jakarta.annotation.Nullable  private List<String> categories = new ArrayList<>();

  public static final String JSON_PROPERTY_CC_ADDRESS = "cc_address";
  @jakarta.annotation.Nullable  private String ccAddress;

  /**
   * The content type of the email
   */
  public enum ContentTypeEnum {
    TEXT(String.valueOf("TEXT")),
    
    HTML(String.valueOf("HTML")),
    
    MULTIPART(String.valueOf("MULTIPART")),
    
    UNKNOWN_COULD_NOT_DESERIALIZE(String.valueOf("unknown_default_open_api"));

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ContentTypeEnum fromValue(String value) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_COULD_NOT_DESERIALIZE;
    }
  }
  public static final String JSON_PROPERTY_CONTENT_TYPE = "content_type";
  @jakarta.annotation.Nullable  private ContentTypeEnum contentType;

  public static final String JSON_PROPERTY_FROM_ADDRESS = "from_address";
  @jakarta.annotation.Nullable  private String fromAddress;

  public static final String JSON_PROPERTY_HTML_BODY = "html_body";
  @jakarta.annotation.Nullable  private String htmlBody;

  public static final String JSON_PROPERTY_MERGE_CONTEXT = "merge_context";
  @jakarta.annotation.Nullable  private String mergeContext;

  public static final String JSON_PROPERTY_PIECE_TITLE = "piece_title";
  @jakarta.annotation.Nullable  private String pieceTitle;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @jakarta.annotation.Nullable  private String subject;

  public static final String JSON_PROPERTY_TEXT_BODY = "text_body";
  @jakarta.annotation.Nullable  private String textBody;

  public static final String JSON_PROPERTY_TO_ADDRESS = "to_address";
  @jakarta.annotation.Nullable  private String toAddress;

  public EmailTemplate() { 
  }

  public EmailTemplate bccAddress(@jakarta.annotation.Nullable String bccAddress) {
    this.bccAddress = bccAddress;
    return this;
  }

  /**
   * The bcc address of the email
   * @return bccAddress
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The bcc address of the email")
  @JsonProperty(JSON_PROPERTY_BCC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBccAddress() {
    return bccAddress;
  }


  @JsonProperty(JSON_PROPERTY_BCC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBccAddress(@jakarta.annotation.Nullable String bccAddress) {
    this.bccAddress = bccAddress;
  }


  public EmailTemplate categories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
    return this;
  }

  public EmailTemplate addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * The categories associated with the email
   * @return categories
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The categories associated with the email")
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(@jakarta.annotation.Nullable List<String> categories) {
    this.categories = categories;
  }


  public EmailTemplate ccAddress(@jakarta.annotation.Nullable String ccAddress) {
    this.ccAddress = ccAddress;
    return this;
  }

  /**
   * The cc address of the email
   * @return ccAddress
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The cc address of the email")
  @JsonProperty(JSON_PROPERTY_CC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCcAddress() {
    return ccAddress;
  }


  @JsonProperty(JSON_PROPERTY_CC_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcAddress(@jakarta.annotation.Nullable String ccAddress) {
    this.ccAddress = ccAddress;
  }


  public EmailTemplate contentType(@jakarta.annotation.Nullable ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type of the email
   * @return contentType
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The content type of the email")
  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContentTypeEnum getContentType() {
    return contentType;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentType(@jakarta.annotation.Nullable ContentTypeEnum contentType) {
    this.contentType = contentType;
  }


  public EmailTemplate fromAddress(@jakarta.annotation.Nullable String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

  /**
   * The from address of the email
   * @return fromAddress
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The from address of the email")
  @JsonProperty(JSON_PROPERTY_FROM_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFromAddress() {
    return fromAddress;
  }


  @JsonProperty(JSON_PROPERTY_FROM_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromAddress(@jakarta.annotation.Nullable String fromAddress) {
    this.fromAddress = fromAddress;
  }


  public EmailTemplate htmlBody(@jakarta.annotation.Nullable String htmlBody) {
    this.htmlBody = htmlBody;
    return this;
  }

  /**
   * The HTML body of the email
   * @return htmlBody
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The HTML body of the email")
  @JsonProperty(JSON_PROPERTY_HTML_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getHtmlBody() {
    return htmlBody;
  }


  @JsonProperty(JSON_PROPERTY_HTML_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHtmlBody(@jakarta.annotation.Nullable String htmlBody) {
    this.htmlBody = htmlBody;
  }


  public EmailTemplate mergeContext(@jakarta.annotation.Nullable String mergeContext) {
    this.mergeContext = mergeContext;
    return this;
  }

  /**
   * The merge context of the email
   * @return mergeContext
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The merge context of the email")
  @JsonProperty(JSON_PROPERTY_MERGE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMergeContext() {
    return mergeContext;
  }


  @JsonProperty(JSON_PROPERTY_MERGE_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMergeContext(@jakarta.annotation.Nullable String mergeContext) {
    this.mergeContext = mergeContext;
  }


  public EmailTemplate pieceTitle(@jakarta.annotation.Nullable String pieceTitle) {
    this.pieceTitle = pieceTitle;
    return this;
  }

  /**
   * The title of the piece
   * @return pieceTitle
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The title of the piece")
  @JsonProperty(JSON_PROPERTY_PIECE_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPieceTitle() {
    return pieceTitle;
  }


  @JsonProperty(JSON_PROPERTY_PIECE_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPieceTitle(@jakarta.annotation.Nullable String pieceTitle) {
    this.pieceTitle = pieceTitle;
  }


  public EmailTemplate subject(@jakarta.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of the email
   * @return subject
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The subject of the email")
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(@jakarta.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public EmailTemplate textBody(@jakarta.annotation.Nullable String textBody) {
    this.textBody = textBody;
    return this;
  }

  /**
   * The text body of the email
   * @return textBody
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The text body of the email")
  @JsonProperty(JSON_PROPERTY_TEXT_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTextBody() {
    return textBody;
  }


  @JsonProperty(JSON_PROPERTY_TEXT_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTextBody(@jakarta.annotation.Nullable String textBody) {
    this.textBody = textBody;
  }


  public EmailTemplate toAddress(@jakarta.annotation.Nullable String toAddress) {
    this.toAddress = toAddress;
    return this;
  }

  /**
   * The to address of the email
   * @return toAddress
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The to address of the email")
  @JsonProperty(JSON_PROPERTY_TO_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getToAddress() {
    return toAddress;
  }


  @JsonProperty(JSON_PROPERTY_TO_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToAddress(@jakarta.annotation.Nullable String toAddress) {
    this.toAddress = toAddress;
  }

  /**
   * Return true if this EmailTemplate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailTemplate emailTemplate = (EmailTemplate) o;
    return Objects.equals(this.bccAddress, emailTemplate.bccAddress) &&
        Objects.equals(this.categories, emailTemplate.categories) &&
        Objects.equals(this.ccAddress, emailTemplate.ccAddress) &&
        Objects.equals(this.contentType, emailTemplate.contentType) &&
        Objects.equals(this.fromAddress, emailTemplate.fromAddress) &&
        Objects.equals(this.htmlBody, emailTemplate.htmlBody) &&
        Objects.equals(this.mergeContext, emailTemplate.mergeContext) &&
        Objects.equals(this.pieceTitle, emailTemplate.pieceTitle) &&
        Objects.equals(this.subject, emailTemplate.subject) &&
        Objects.equals(this.textBody, emailTemplate.textBody) &&
        Objects.equals(this.toAddress, emailTemplate.toAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bccAddress, categories, ccAddress, contentType, fromAddress, htmlBody, mergeContext, pieceTitle, subject, textBody, toAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailTemplate {\n");
    sb.append("    bccAddress: ").append(toIndentedString(bccAddress)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    ccAddress: ").append(toIndentedString(ccAddress)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    mergeContext: ").append(toIndentedString(mergeContext)).append("\n");
    sb.append("    pieceTitle: ").append(toIndentedString(pieceTitle)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    textBody: ").append(toIndentedString(textBody)).append("\n");
    sb.append("    toAddress: ").append(toIndentedString(toAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private EmailTemplate instance;
    
        public Builder() {
          this(new EmailTemplate());
        }
    
        protected Builder(EmailTemplate instance) {
          this.instance = instance;
        }
    
        public EmailTemplate.Builder bccAddress(String bccAddress) {
              this.instance.bccAddress = bccAddress;
          return this;
        }
            public EmailTemplate.Builder categories(List<String> categories) {
              this.instance.categories = categories;
          return this;
        }
            public EmailTemplate.Builder ccAddress(String ccAddress) {
              this.instance.ccAddress = ccAddress;
          return this;
        }
            public EmailTemplate.Builder contentType(ContentTypeEnum contentType) {
              this.instance.contentType = contentType;
          return this;
        }
            public EmailTemplate.Builder fromAddress(String fromAddress) {
              this.instance.fromAddress = fromAddress;
          return this;
        }
            public EmailTemplate.Builder htmlBody(String htmlBody) {
              this.instance.htmlBody = htmlBody;
          return this;
        }
            public EmailTemplate.Builder mergeContext(String mergeContext) {
              this.instance.mergeContext = mergeContext;
          return this;
        }
            public EmailTemplate.Builder pieceTitle(String pieceTitle) {
              this.instance.pieceTitle = pieceTitle;
          return this;
        }
            public EmailTemplate.Builder subject(String subject) {
              this.instance.subject = subject;
          return this;
        }
            public EmailTemplate.Builder textBody(String textBody) {
              this.instance.textBody = textBody;
          return this;
        }
            public EmailTemplate.Builder toAddress(String toAddress) {
              this.instance.toAddress = toAddress;
          return this;
        }
        
    
        /**
        * returns a built EmailTemplate instance.
        *
        * The builder is not reusable.
        */
        public EmailTemplate build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static EmailTemplate.Builder builder() {
        return new EmailTemplate.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public EmailTemplate.Builder toBuilder() {
        return new EmailTemplate.Builder()
          .bccAddress(getBccAddress())
          .categories(getCategories())
          .ccAddress(getCcAddress())
          .contentType(getContentType())
          .fromAddress(getFromAddress())
          .htmlBody(getHtmlBody())
          .mergeContext(getMergeContext())
          .pieceTitle(getPieceTitle())
          .subject(getSubject())
          .textBody(getTextBody())
          .toAddress(getToAddress());
      }
}

