/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.keap.core.sdk.model.CurrencyValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * LeadSourceExpense
 */
@JsonPropertyOrder({
  LeadSourceExpense.JSON_PROPERTY_AMOUNT,
  LeadSourceExpense.JSON_PROPERTY_CREATE_TIME,
  LeadSourceExpense.JSON_PROPERTY_ID,
  LeadSourceExpense.JSON_PROPERTY_INCURRED_TIME,
  LeadSourceExpense.JSON_PROPERTY_NOTES,
  LeadSourceExpense.JSON_PROPERTY_TITLE,
  LeadSourceExpense.JSON_PROPERTY_UPDATE_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class LeadSourceExpense implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  @jakarta.annotation.Nullable  private CurrencyValue amount;

  public static final String JSON_PROPERTY_CREATE_TIME = "create_time";
  @jakarta.annotation.Nullable  private String createTime;

  public static final String JSON_PROPERTY_ID = "id";
  @jakarta.annotation.Nullable  private String id;

  public static final String JSON_PROPERTY_INCURRED_TIME = "incurred_time";
  @jakarta.annotation.Nullable  private String incurredTime;

  public static final String JSON_PROPERTY_NOTES = "notes";
  @jakarta.annotation.Nullable  private String notes;

  public static final String JSON_PROPERTY_TITLE = "title";
  @jakarta.annotation.Nullable  private String title;

  public static final String JSON_PROPERTY_UPDATE_TIME = "update_time";
  @jakarta.annotation.Nullable  private String updateTime;

  public LeadSourceExpense() { 
  }

  public LeadSourceExpense amount(@jakarta.annotation.Nullable CurrencyValue amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @jakarta.annotation.Nullable  @Valid
  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "")
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public CurrencyValue getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(@jakarta.annotation.Nullable CurrencyValue amount) {
    this.amount = amount;
  }


  public LeadSourceExpense createTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The date the expense was created.
   * @return createTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The date the expense was created.")
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCreateTime() {
    return createTime;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateTime(@jakarta.annotation.Nullable String createTime) {
    this.createTime = createTime;
  }


  public LeadSourceExpense id(@jakarta.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier for the expense.
   * @return id
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The unique identifier for the expense.")
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(@jakarta.annotation.Nullable String id) {
    this.id = id;
  }


  public LeadSourceExpense incurredTime(@jakarta.annotation.Nullable String incurredTime) {
    this.incurredTime = incurredTime;
    return this;
  }

  /**
   * The date the expense was incurred.
   * @return incurredTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The date the expense was incurred.")
  @JsonProperty(JSON_PROPERTY_INCURRED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIncurredTime() {
    return incurredTime;
  }


  @JsonProperty(JSON_PROPERTY_INCURRED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncurredTime(@jakarta.annotation.Nullable String incurredTime) {
    this.incurredTime = incurredTime;
  }


  public LeadSourceExpense notes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * The notes for the expense.
   * @return notes
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The notes for the expense.")
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(@jakarta.annotation.Nullable String notes) {
    this.notes = notes;
  }


  public LeadSourceExpense title(@jakarta.annotation.Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the expense.
   * @return title
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The title of the expense.")
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(@jakarta.annotation.Nullable String title) {
    this.title = title;
  }


  public LeadSourceExpense updateTime(@jakarta.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The date the expense was last updated.
   * @return updateTime
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The date the expense was last updated.")
  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUpdateTime() {
    return updateTime;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateTime(@jakarta.annotation.Nullable String updateTime) {
    this.updateTime = updateTime;
  }

  /**
   * Return true if this LeadSourceExpense object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LeadSourceExpense leadSourceExpense = (LeadSourceExpense) o;
    return Objects.equals(this.amount, leadSourceExpense.amount) &&
        Objects.equals(this.createTime, leadSourceExpense.createTime) &&
        Objects.equals(this.id, leadSourceExpense.id) &&
        Objects.equals(this.incurredTime, leadSourceExpense.incurredTime) &&
        Objects.equals(this.notes, leadSourceExpense.notes) &&
        Objects.equals(this.title, leadSourceExpense.title) &&
        Objects.equals(this.updateTime, leadSourceExpense.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, createTime, id, incurredTime, notes, title, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LeadSourceExpense {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    incurredTime: ").append(toIndentedString(incurredTime)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private LeadSourceExpense instance;
    
        public Builder() {
          this(new LeadSourceExpense());
        }
    
        protected Builder(LeadSourceExpense instance) {
          this.instance = instance;
        }
    
        public LeadSourceExpense.Builder amount(CurrencyValue amount) {
              this.instance.amount = amount;
          return this;
        }
            public LeadSourceExpense.Builder createTime(String createTime) {
              this.instance.createTime = createTime;
          return this;
        }
            public LeadSourceExpense.Builder id(String id) {
              this.instance.id = id;
          return this;
        }
            public LeadSourceExpense.Builder incurredTime(String incurredTime) {
              this.instance.incurredTime = incurredTime;
          return this;
        }
            public LeadSourceExpense.Builder notes(String notes) {
              this.instance.notes = notes;
          return this;
        }
            public LeadSourceExpense.Builder title(String title) {
              this.instance.title = title;
          return this;
        }
            public LeadSourceExpense.Builder updateTime(String updateTime) {
              this.instance.updateTime = updateTime;
          return this;
        }
        
    
        /**
        * returns a built LeadSourceExpense instance.
        *
        * The builder is not reusable.
        */
        public LeadSourceExpense build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static LeadSourceExpense.Builder builder() {
        return new LeadSourceExpense.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public LeadSourceExpense.Builder toBuilder() {
        return new LeadSourceExpense.Builder()
          .amount(getAmount())
          .createTime(getCreateTime())
          .id(getId())
          .incurredTime(getIncurredTime())
          .notes(getNotes())
          .title(getTitle())
          .updateTime(getUpdateTime());
      }
}

