/*
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.keap.core.sdk.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Arrays;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;


/**
 * ProductInventory
 */
@JsonPropertyOrder({
  ProductInventory.JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS,
  ProductInventory.JSON_PROPERTY_INVENTORY_COUNT,
  ProductInventory.JSON_PROPERTY_INVENTORY_LIMIT,
  ProductInventory.JSON_PROPERTY_OUT_OF_STOCK_ENABLED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class ProductInventory implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS = "email_for_inventory_notifications";
  @jakarta.annotation.Nullable  private String emailForInventoryNotifications;

  public static final String JSON_PROPERTY_INVENTORY_COUNT = "inventory_count";
  @jakarta.annotation.Nullable  private Integer inventoryCount;

  public static final String JSON_PROPERTY_INVENTORY_LIMIT = "inventory_limit";
  @jakarta.annotation.Nullable  private Integer inventoryLimit;

  public static final String JSON_PROPERTY_OUT_OF_STOCK_ENABLED = "out_of_stock_enabled";
  @jakarta.annotation.Nullable  private Boolean outOfStockEnabled;

  public ProductInventory() { 
  }

  public ProductInventory emailForInventoryNotifications(@jakarta.annotation.Nullable String emailForInventoryNotifications) {
    this.emailForInventoryNotifications = emailForInventoryNotifications;
    return this;
  }

  /**
   * The email address for notifications about inventory
   * @return emailForInventoryNotifications
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The email address for notifications about inventory")
  @JsonProperty(JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEmailForInventoryNotifications() {
    return emailForInventoryNotifications;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_FOR_INVENTORY_NOTIFICATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailForInventoryNotifications(@jakarta.annotation.Nullable String emailForInventoryNotifications) {
    this.emailForInventoryNotifications = emailForInventoryNotifications;
  }


  public ProductInventory inventoryCount(@jakarta.annotation.Nullable Integer inventoryCount) {
    this.inventoryCount = inventoryCount;
    return this;
  }

  /**
   * The current inventory count for this product
   * @return inventoryCount
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The current inventory count for this product")
  @JsonProperty(JSON_PROPERTY_INVENTORY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInventoryCount() {
    return inventoryCount;
  }


  @JsonProperty(JSON_PROPERTY_INVENTORY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInventoryCount(@jakarta.annotation.Nullable Integer inventoryCount) {
    this.inventoryCount = inventoryCount;
  }


  public ProductInventory inventoryLimit(@jakarta.annotation.Nullable Integer inventoryLimit) {
    this.inventoryLimit = inventoryLimit;
    return this;
  }

  /**
   * The inventory limit for this product
   * @return inventoryLimit
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The inventory limit for this product")
  @JsonProperty(JSON_PROPERTY_INVENTORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getInventoryLimit() {
    return inventoryLimit;
  }


  @JsonProperty(JSON_PROPERTY_INVENTORY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInventoryLimit(@jakarta.annotation.Nullable Integer inventoryLimit) {
    this.inventoryLimit = inventoryLimit;
  }


  public ProductInventory outOfStockEnabled(@jakarta.annotation.Nullable Boolean outOfStockEnabled) {
    this.outOfStockEnabled = outOfStockEnabled;
    return this;
  }

  /**
   * The flag to enable out of stock inventory
   * @return outOfStockEnabled
   */
  @jakarta.annotation.Nullable  @Schema(requiredMode = Schema.RequiredMode.NOT_REQUIRED, description = "The flag to enable out of stock inventory")
  @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getOutOfStockEnabled() {
    return outOfStockEnabled;
  }


  @JsonProperty(JSON_PROPERTY_OUT_OF_STOCK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutOfStockEnabled(@jakarta.annotation.Nullable Boolean outOfStockEnabled) {
    this.outOfStockEnabled = outOfStockEnabled;
  }

  /**
   * Return true if this ProductInventory object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductInventory productInventory = (ProductInventory) o;
    return Objects.equals(this.emailForInventoryNotifications, productInventory.emailForInventoryNotifications) &&
        Objects.equals(this.inventoryCount, productInventory.inventoryCount) &&
        Objects.equals(this.inventoryLimit, productInventory.inventoryLimit) &&
        Objects.equals(this.outOfStockEnabled, productInventory.outOfStockEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailForInventoryNotifications, inventoryCount, inventoryLimit, outOfStockEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductInventory {\n");
    sb.append("    emailForInventoryNotifications: ").append(toIndentedString(emailForInventoryNotifications)).append("\n");
    sb.append("    inventoryCount: ").append(toIndentedString(inventoryCount)).append("\n");
    sb.append("    inventoryLimit: ").append(toIndentedString(inventoryLimit)).append("\n");
    sb.append("    outOfStockEnabled: ").append(toIndentedString(outOfStockEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

    public static class Builder {
    
        private ProductInventory instance;
    
        public Builder() {
          this(new ProductInventory());
        }
    
        protected Builder(ProductInventory instance) {
          this.instance = instance;
        }
    
        public ProductInventory.Builder emailForInventoryNotifications(String emailForInventoryNotifications) {
              this.instance.emailForInventoryNotifications = emailForInventoryNotifications;
          return this;
        }
            public ProductInventory.Builder inventoryCount(Integer inventoryCount) {
              this.instance.inventoryCount = inventoryCount;
          return this;
        }
            public ProductInventory.Builder inventoryLimit(Integer inventoryLimit) {
              this.instance.inventoryLimit = inventoryLimit;
          return this;
        }
            public ProductInventory.Builder outOfStockEnabled(Boolean outOfStockEnabled) {
              this.instance.outOfStockEnabled = outOfStockEnabled;
          return this;
        }
        
    
        /**
        * returns a built ProductInventory instance.
        *
        * The builder is not reusable.
        */
        public ProductInventory build() {
          try {
            return this.instance;
          } finally {
            // ensure that this.instance is not reused
            this.instance = null;
          }
        }
    
        @Override
        public String toString() {
          return getClass() + "=(" + instance + ")";
        }
      }
    
      /**
      * Create a builder with no initialized field.
      */
      public static ProductInventory.Builder builder() {
        return new ProductInventory.Builder();
      }
    
      /**
      * Create a builder with a shallow copy of this instance.
      */
      public ProductInventory.Builder toBuilder() {
        return new ProductInventory.Builder()
          .emailForInventoryNotifications(getEmailForInventoryNotifications())
          .inventoryCount(getInventoryCount())
          .inventoryLimit(getInventoryLimit())
          .outOfStockEnabled(getOutOfStockEnabled());
      }
}

