/**
 * Keap REST API
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmailTemplate model module.
 * @module keap.core.v2/model/EmailTemplate
 */
class EmailTemplate {
    /**
     * Constructs a new <code>EmailTemplate</code>.
     * @alias module:keap.core.v2/model/EmailTemplate
     */
    constructor() { 
        
        EmailTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmailTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:keap.core.v2/model/EmailTemplate} obj Optional instance to populate.
     * @return {module:keap.core.v2/model/EmailTemplate} The populated <code>EmailTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailTemplate();

            if (data.hasOwnProperty('bcc_address')) {
                obj['bcc_address'] = ApiClient.convertToType(data['bcc_address'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('cc_address')) {
                obj['cc_address'] = ApiClient.convertToType(data['cc_address'], 'String');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('from_address')) {
                obj['from_address'] = ApiClient.convertToType(data['from_address'], 'String');
            }
            if (data.hasOwnProperty('html_body')) {
                obj['html_body'] = ApiClient.convertToType(data['html_body'], 'String');
            }
            if (data.hasOwnProperty('merge_context')) {
                obj['merge_context'] = ApiClient.convertToType(data['merge_context'], 'String');
            }
            if (data.hasOwnProperty('piece_title')) {
                obj['piece_title'] = ApiClient.convertToType(data['piece_title'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('text_body')) {
                obj['text_body'] = ApiClient.convertToType(data['text_body'], 'String');
            }
            if (data.hasOwnProperty('to_address')) {
                obj['to_address'] = ApiClient.convertToType(data['to_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bcc_address'] && !(typeof data['bcc_address'] === 'string' || data['bcc_address'] instanceof String)) {
            throw new Error("Expected the field `bcc_address` to be a primitive type in the JSON string but got " + data['bcc_address']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is a string
        if (data['cc_address'] && !(typeof data['cc_address'] === 'string' || data['cc_address'] instanceof String)) {
            throw new Error("Expected the field `cc_address` to be a primitive type in the JSON string but got " + data['cc_address']);
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['from_address'] && !(typeof data['from_address'] === 'string' || data['from_address'] instanceof String)) {
            throw new Error("Expected the field `from_address` to be a primitive type in the JSON string but got " + data['from_address']);
        }
        // ensure the json data is a string
        if (data['html_body'] && !(typeof data['html_body'] === 'string' || data['html_body'] instanceof String)) {
            throw new Error("Expected the field `html_body` to be a primitive type in the JSON string but got " + data['html_body']);
        }
        // ensure the json data is a string
        if (data['merge_context'] && !(typeof data['merge_context'] === 'string' || data['merge_context'] instanceof String)) {
            throw new Error("Expected the field `merge_context` to be a primitive type in the JSON string but got " + data['merge_context']);
        }
        // ensure the json data is a string
        if (data['piece_title'] && !(typeof data['piece_title'] === 'string' || data['piece_title'] instanceof String)) {
            throw new Error("Expected the field `piece_title` to be a primitive type in the JSON string but got " + data['piece_title']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['text_body'] && !(typeof data['text_body'] === 'string' || data['text_body'] instanceof String)) {
            throw new Error("Expected the field `text_body` to be a primitive type in the JSON string but got " + data['text_body']);
        }
        // ensure the json data is a string
        if (data['to_address'] && !(typeof data['to_address'] === 'string' || data['to_address'] instanceof String)) {
            throw new Error("Expected the field `to_address` to be a primitive type in the JSON string but got " + data['to_address']);
        }

        return true;
    }


}



/**
 * The bcc address of the email
 * @member {String} bcc_address
 */
EmailTemplate.prototype['bcc_address'] = undefined;

/**
 * The categories associated with the email
 * @member {Array.<String>} categories
 */
EmailTemplate.prototype['categories'] = undefined;

/**
 * The cc address of the email
 * @member {String} cc_address
 */
EmailTemplate.prototype['cc_address'] = undefined;

/**
 * The content type of the email
 * @member {module:keap.core.v2/model/EmailTemplate.ContentTypeEnum} content_type
 */
EmailTemplate.prototype['content_type'] = undefined;

/**
 * The from address of the email
 * @member {String} from_address
 */
EmailTemplate.prototype['from_address'] = undefined;

/**
 * The HTML body of the email
 * @member {String} html_body
 */
EmailTemplate.prototype['html_body'] = undefined;

/**
 * The merge context of the email
 * @member {String} merge_context
 */
EmailTemplate.prototype['merge_context'] = undefined;

/**
 * The title of the piece
 * @member {String} piece_title
 */
EmailTemplate.prototype['piece_title'] = undefined;

/**
 * The subject of the email
 * @member {String} subject
 */
EmailTemplate.prototype['subject'] = undefined;

/**
 * The text body of the email
 * @member {String} text_body
 */
EmailTemplate.prototype['text_body'] = undefined;

/**
 * The to address of the email
 * @member {String} to_address
 */
EmailTemplate.prototype['to_address'] = undefined;





/**
 * Allowed values for the <code>content_type</code> property.
 * @enum {String}
 * @readonly
 */
EmailTemplate['ContentTypeEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "HTML"
     * @const
     */
    "HTML": "HTML",

    /**
     * value: "MULTIPART"
     * @const
     */
    "MULTIPART": "MULTIPART",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};


export default EmailTemplate;
