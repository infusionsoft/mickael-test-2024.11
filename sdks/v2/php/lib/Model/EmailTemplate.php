<?php
/**
 * EmailTemplate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Model;

use \ArrayAccess;
use \Keap\Core\V2\ObjectSerializer;

/**
 * EmailTemplate Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EmailTemplate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EmailTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bcc_address' => 'string',
        'categories' => 'string[]',
        'cc_address' => 'string',
        'content_type' => 'string',
        'from_address' => 'string',
        'html_body' => 'string',
        'merge_context' => 'string',
        'piece_title' => 'string',
        'subject' => 'string',
        'text_body' => 'string',
        'to_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bcc_address' => null,
        'categories' => null,
        'cc_address' => null,
        'content_type' => null,
        'from_address' => null,
        'html_body' => null,
        'merge_context' => null,
        'piece_title' => null,
        'subject' => null,
        'text_body' => null,
        'to_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bcc_address' => false,
        'categories' => false,
        'cc_address' => false,
        'content_type' => false,
        'from_address' => false,
        'html_body' => false,
        'merge_context' => false,
        'piece_title' => false,
        'subject' => false,
        'text_body' => false,
        'to_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bcc_address' => 'bcc_address',
        'categories' => 'categories',
        'cc_address' => 'cc_address',
        'content_type' => 'content_type',
        'from_address' => 'from_address',
        'html_body' => 'html_body',
        'merge_context' => 'merge_context',
        'piece_title' => 'piece_title',
        'subject' => 'subject',
        'text_body' => 'text_body',
        'to_address' => 'to_address'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bcc_address' => 'setBccAddress',
        'categories' => 'setCategories',
        'cc_address' => 'setCcAddress',
        'content_type' => 'setContentType',
        'from_address' => 'setFromAddress',
        'html_body' => 'setHtmlBody',
        'merge_context' => 'setMergeContext',
        'piece_title' => 'setPieceTitle',
        'subject' => 'setSubject',
        'text_body' => 'setTextBody',
        'to_address' => 'setToAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bcc_address' => 'getBccAddress',
        'categories' => 'getCategories',
        'cc_address' => 'getCcAddress',
        'content_type' => 'getContentType',
        'from_address' => 'getFromAddress',
        'html_body' => 'getHtmlBody',
        'merge_context' => 'getMergeContext',
        'piece_title' => 'getPieceTitle',
        'subject' => 'getSubject',
        'text_body' => 'getTextBody',
        'to_address' => 'getToAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CONTENT_TYPE_TEXT = 'TEXT';
    public const CONTENT_TYPE_HTML = 'HTML';
    public const CONTENT_TYPE_MULTIPART = 'MULTIPART';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTypeAllowableValues()
    {
        return [
            self::CONTENT_TYPE_TEXT,
            self::CONTENT_TYPE_HTML,
            self::CONTENT_TYPE_MULTIPART,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bcc_address', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('cc_address', $data ?? [], null);
        $this->setIfExists('content_type', $data ?? [], null);
        $this->setIfExists('from_address', $data ?? [], null);
        $this->setIfExists('html_body', $data ?? [], null);
        $this->setIfExists('merge_context', $data ?? [], null);
        $this->setIfExists('piece_title', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('text_body', $data ?? [], null);
        $this->setIfExists('to_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getContentTypeAllowableValues();
        if (!is_null($this->container['content_type']) && !in_array($this->container['content_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'content_type', must be one of '%s'",
                $this->container['content_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bcc_address
     *
     * @return string|null
     */
    public function getBccAddress()
    {
        return $this->container['bcc_address'];
    }

    /**
     * Sets bcc_address
     *
     * @param string|null $bcc_address The bcc address of the email
     *
     * @return self
     */
    public function setBccAddress($bcc_address)
    {
        if (is_null($bcc_address)) {
            throw new \InvalidArgumentException('non-nullable bcc_address cannot be null');
        }
        $this->container['bcc_address'] = $bcc_address;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories The categories associated with the email
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets cc_address
     *
     * @return string|null
     */
    public function getCcAddress()
    {
        return $this->container['cc_address'];
    }

    /**
     * Sets cc_address
     *
     * @param string|null $cc_address The cc address of the email
     *
     * @return self
     */
    public function setCcAddress($cc_address)
    {
        if (is_null($cc_address)) {
            throw new \InvalidArgumentException('non-nullable cc_address cannot be null');
        }
        $this->container['cc_address'] = $cc_address;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string|null
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string|null $content_type The content type of the email
     *
     * @return self
     */
    public function setContentType($content_type)
    {
        if (is_null($content_type)) {
            throw new \InvalidArgumentException('non-nullable content_type cannot be null');
        }
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!in_array($content_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'content_type', must be one of '%s'",
                    $content_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets from_address
     *
     * @return string|null
     */
    public function getFromAddress()
    {
        return $this->container['from_address'];
    }

    /**
     * Sets from_address
     *
     * @param string|null $from_address The from address of the email
     *
     * @return self
     */
    public function setFromAddress($from_address)
    {
        if (is_null($from_address)) {
            throw new \InvalidArgumentException('non-nullable from_address cannot be null');
        }
        $this->container['from_address'] = $from_address;

        return $this;
    }

    /**
     * Gets html_body
     *
     * @return string|null
     */
    public function getHtmlBody()
    {
        return $this->container['html_body'];
    }

    /**
     * Sets html_body
     *
     * @param string|null $html_body The HTML body of the email
     *
     * @return self
     */
    public function setHtmlBody($html_body)
    {
        if (is_null($html_body)) {
            throw new \InvalidArgumentException('non-nullable html_body cannot be null');
        }
        $this->container['html_body'] = $html_body;

        return $this;
    }

    /**
     * Gets merge_context
     *
     * @return string|null
     */
    public function getMergeContext()
    {
        return $this->container['merge_context'];
    }

    /**
     * Sets merge_context
     *
     * @param string|null $merge_context The merge context of the email
     *
     * @return self
     */
    public function setMergeContext($merge_context)
    {
        if (is_null($merge_context)) {
            throw new \InvalidArgumentException('non-nullable merge_context cannot be null');
        }
        $this->container['merge_context'] = $merge_context;

        return $this;
    }

    /**
     * Gets piece_title
     *
     * @return string|null
     */
    public function getPieceTitle()
    {
        return $this->container['piece_title'];
    }

    /**
     * Sets piece_title
     *
     * @param string|null $piece_title The title of the piece
     *
     * @return self
     */
    public function setPieceTitle($piece_title)
    {
        if (is_null($piece_title)) {
            throw new \InvalidArgumentException('non-nullable piece_title cannot be null');
        }
        $this->container['piece_title'] = $piece_title;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject The subject of the email
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets text_body
     *
     * @return string|null
     */
    public function getTextBody()
    {
        return $this->container['text_body'];
    }

    /**
     * Sets text_body
     *
     * @param string|null $text_body The text body of the email
     *
     * @return self
     */
    public function setTextBody($text_body)
    {
        if (is_null($text_body)) {
            throw new \InvalidArgumentException('non-nullable text_body cannot be null');
        }
        $this->container['text_body'] = $text_body;

        return $this;
    }

    /**
     * Gets to_address
     *
     * @return string|null
     */
    public function getToAddress()
    {
        return $this->container['to_address'];
    }

    /**
     * Sets to_address
     *
     * @param string|null $to_address The to address of the email
     *
     * @return self
     */
    public function setToAddress($to_address)
    {
        if (is_null($to_address)) {
            throw new \InvalidArgumentException('non-nullable to_address cannot be null');
        }
        $this->container['to_address'] = $to_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


