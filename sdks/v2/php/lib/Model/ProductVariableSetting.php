<?php
/**
 * ProductVariableSetting
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Model;

use \ArrayAccess;
use \Keap\Core\V2\ObjectSerializer;

/**
 * ProductVariableSetting Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductVariableSetting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductVariableSetting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contain_spaces' => 'bool',
        'contains' => 'string',
        'end_with' => 'string',
        'max_chars' => 'int',
        'min_chars' => 'int',
        'start_with' => 'string',
        'validation_msg' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contain_spaces' => null,
        'contains' => null,
        'end_with' => null,
        'max_chars' => 'int32',
        'min_chars' => 'int32',
        'start_with' => null,
        'validation_msg' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contain_spaces' => false,
        'contains' => false,
        'end_with' => false,
        'max_chars' => false,
        'min_chars' => false,
        'start_with' => false,
        'validation_msg' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contain_spaces' => 'contain_spaces',
        'contains' => 'contains',
        'end_with' => 'end_with',
        'max_chars' => 'max_chars',
        'min_chars' => 'min_chars',
        'start_with' => 'start_with',
        'validation_msg' => 'validation_msg'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contain_spaces' => 'setContainSpaces',
        'contains' => 'setContains',
        'end_with' => 'setEndWith',
        'max_chars' => 'setMaxChars',
        'min_chars' => 'setMinChars',
        'start_with' => 'setStartWith',
        'validation_msg' => 'setValidationMsg'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contain_spaces' => 'getContainSpaces',
        'contains' => 'getContains',
        'end_with' => 'getEndWith',
        'max_chars' => 'getMaxChars',
        'min_chars' => 'getMinChars',
        'start_with' => 'getStartWith',
        'validation_msg' => 'getValidationMsg'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contain_spaces', $data ?? [], null);
        $this->setIfExists('contains', $data ?? [], null);
        $this->setIfExists('end_with', $data ?? [], null);
        $this->setIfExists('max_chars', $data ?? [], null);
        $this->setIfExists('min_chars', $data ?? [], null);
        $this->setIfExists('start_with', $data ?? [], null);
        $this->setIfExists('validation_msg', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contain_spaces
     *
     * @return bool|null
     */
    public function getContainSpaces()
    {
        return $this->container['contain_spaces'];
    }

    /**
     * Sets contain_spaces
     *
     * @param bool|null $contain_spaces If spaces are allowed for the option
     *
     * @return self
     */
    public function setContainSpaces($contain_spaces)
    {
        if (is_null($contain_spaces)) {
            throw new \InvalidArgumentException('non-nullable contain_spaces cannot be null');
        }
        $this->container['contain_spaces'] = $contain_spaces;

        return $this;
    }

    /**
     * Gets contains
     *
     * @return string|null
     */
    public function getContains()
    {
        return $this->container['contains'];
    }

    /**
     * Sets contains
     *
     * @param string|null $contains Requires the value (excluding start and end) to contain given type. Can be LETTER, NUMBER, or BOTH.
     *
     * @return self
     */
    public function setContains($contains)
    {
        if (is_null($contains)) {
            throw new \InvalidArgumentException('non-nullable contains cannot be null');
        }
        $this->container['contains'] = $contains;

        return $this;
    }

    /**
     * Gets end_with
     *
     * @return string|null
     */
    public function getEndWith()
    {
        return $this->container['end_with'];
    }

    /**
     * Sets end_with
     *
     * @param string|null $end_with Requires the value to end with the given type. Can be LETTER, NUMBER, or BOTH.
     *
     * @return self
     */
    public function setEndWith($end_with)
    {
        if (is_null($end_with)) {
            throw new \InvalidArgumentException('non-nullable end_with cannot be null');
        }
        $this->container['end_with'] = $end_with;

        return $this;
    }

    /**
     * Gets max_chars
     *
     * @return int|null
     */
    public function getMaxChars()
    {
        return $this->container['max_chars'];
    }

    /**
     * Sets max_chars
     *
     * @param int|null $max_chars Max allowable chars. Its value must be greater than min_chars
     *
     * @return self
     */
    public function setMaxChars($max_chars)
    {
        if (is_null($max_chars)) {
            throw new \InvalidArgumentException('non-nullable max_chars cannot be null');
        }
        $this->container['max_chars'] = $max_chars;

        return $this;
    }

    /**
     * Gets min_chars
     *
     * @return int|null
     */
    public function getMinChars()
    {
        return $this->container['min_chars'];
    }

    /**
     * Sets min_chars
     *
     * @param int|null $min_chars Minimum allowable characters
     *
     * @return self
     */
    public function setMinChars($min_chars)
    {
        if (is_null($min_chars)) {
            throw new \InvalidArgumentException('non-nullable min_chars cannot be null');
        }
        $this->container['min_chars'] = $min_chars;

        return $this;
    }

    /**
     * Gets start_with
     *
     * @return string|null
     */
    public function getStartWith()
    {
        return $this->container['start_with'];
    }

    /**
     * Sets start_with
     *
     * @param string|null $start_with Requires the value to start with the given type. Can be LETTER, NUMBER, or BOTH.
     *
     * @return self
     */
    public function setStartWith($start_with)
    {
        if (is_null($start_with)) {
            throw new \InvalidArgumentException('non-nullable start_with cannot be null');
        }
        $this->container['start_with'] = $start_with;

        return $this;
    }

    /**
     * Gets validation_msg
     *
     * @return string|null
     */
    public function getValidationMsg()
    {
        return $this->container['validation_msg'];
    }

    /**
     * Sets validation_msg
     *
     * @param string|null $validation_msg Customized validation message to display when option criteria aren’t met
     *
     * @return self
     */
    public function setValidationMsg($validation_msg)
    {
        if (is_null($validation_msg)) {
            throw new \InvalidArgumentException('non-nullable validation_msg cannot be null');
        }
        $this->container['validation_msg'] = $validation_msg;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


