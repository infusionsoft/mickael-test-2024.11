<?php
/**
 * Transaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Keap REST API
 *
 * Keap REST Core Service
 *
 * The version of the OpenAPI document: 2.70.0.778988
 * Contact: api@keap.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */
/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Keap\Core\V2\Model;

use \ArrayAccess;
use \Keap\Core\V2\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Keap\Core\V2
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Transaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_id' => 'string',
        'id' => 'string',
        'is_live' => 'bool',
        'is_successful' => 'bool',
        'order_id' => 'string',
        'payment_gateway_id' => 'string',
        'payment_gateway_type' => 'string',
        'payment_id' => 'string',
        'transaction_amount' => '\Keap\Core\V2\Model\CurrencyValue',
        'transaction_time' => 'string',
        'transaction_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'contact_id' => null,
        'id' => null,
        'is_live' => null,
        'is_successful' => null,
        'order_id' => null,
        'payment_gateway_id' => null,
        'payment_gateway_type' => null,
        'payment_id' => null,
        'transaction_amount' => null,
        'transaction_time' => null,
        'transaction_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'contact_id' => false,
        'id' => false,
        'is_live' => false,
        'is_successful' => false,
        'order_id' => false,
        'payment_gateway_id' => false,
        'payment_gateway_type' => false,
        'payment_id' => false,
        'transaction_amount' => false,
        'transaction_time' => false,
        'transaction_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_id' => 'contact_id',
        'id' => 'id',
        'is_live' => 'is_live',
        'is_successful' => 'is_successful',
        'order_id' => 'order_id',
        'payment_gateway_id' => 'payment_gateway_id',
        'payment_gateway_type' => 'payment_gateway_type',
        'payment_id' => 'payment_id',
        'transaction_amount' => 'transaction_amount',
        'transaction_time' => 'transaction_time',
        'transaction_type' => 'transaction_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_id' => 'setContactId',
        'id' => 'setId',
        'is_live' => 'setIsLive',
        'is_successful' => 'setIsSuccessful',
        'order_id' => 'setOrderId',
        'payment_gateway_id' => 'setPaymentGatewayId',
        'payment_gateway_type' => 'setPaymentGatewayType',
        'payment_id' => 'setPaymentId',
        'transaction_amount' => 'setTransactionAmount',
        'transaction_time' => 'setTransactionTime',
        'transaction_type' => 'setTransactionType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_id' => 'getContactId',
        'id' => 'getId',
        'is_live' => 'getIsLive',
        'is_successful' => 'getIsSuccessful',
        'order_id' => 'getOrderId',
        'payment_gateway_id' => 'getPaymentGatewayId',
        'payment_gateway_type' => 'getPaymentGatewayType',
        'payment_id' => 'getPaymentId',
        'transaction_amount' => 'getTransactionAmount',
        'transaction_time' => 'getTransactionTime',
        'transaction_type' => 'getTransactionType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_live', $data ?? [], null);
        $this->setIfExists('is_successful', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('payment_gateway_id', $data ?? [], null);
        $this->setIfExists('payment_gateway_type', $data ?? [], null);
        $this->setIfExists('payment_id', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('transaction_time', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id Reference to the contact the transaction was for.
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            throw new \InvalidArgumentException('non-nullable contact_id cannot be null');
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The unique identifier of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_live
     *
     * @return bool|null
     */
    public function getIsLive()
    {
        return $this->container['is_live'];
    }

    /**
     * Sets is_live
     *
     * @param bool|null $is_live true if this is a live transaction, false if the transaction is a test or sandbox transaction.
     *
     * @return self
     */
    public function setIsLive($is_live)
    {
        if (is_null($is_live)) {
            throw new \InvalidArgumentException('non-nullable is_live cannot be null');
        }
        $this->container['is_live'] = $is_live;

        return $this;
    }

    /**
     * Gets is_successful
     *
     * @return bool|null
     */
    public function getIsSuccessful()
    {
        return $this->container['is_successful'];
    }

    /**
     * Sets is_successful
     *
     * @param bool|null $is_successful true if the transaction resulted in a success, false if the transaction resulted in a failure or error.
     *
     * @return self
     */
    public function setIsSuccessful($is_successful)
    {
        if (is_null($is_successful)) {
            throw new \InvalidArgumentException('non-nullable is_successful cannot be null');
        }
        $this->container['is_successful'] = $is_successful;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Reference to the order this transaction was for
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_gateway_id
     *
     * @return string|null
     */
    public function getPaymentGatewayId()
    {
        return $this->container['payment_gateway_id'];
    }

    /**
     * Sets payment_gateway_id
     *
     * @param string|null $payment_gateway_id Reference to the payment processor to where the transaction attempt was made.
     *
     * @return self
     */
    public function setPaymentGatewayId($payment_gateway_id)
    {
        if (is_null($payment_gateway_id)) {
            throw new \InvalidArgumentException('non-nullable payment_gateway_id cannot be null');
        }
        $this->container['payment_gateway_id'] = $payment_gateway_id;

        return $this;
    }

    /**
     * Gets payment_gateway_type
     *
     * @return string|null
     */
    public function getPaymentGatewayType()
    {
        return $this->container['payment_gateway_type'];
    }

    /**
     * Sets payment_gateway_type
     *
     * @param string|null $payment_gateway_type The type of payment processor. Possible values are: PAYPAL, STRIPE, KEAP_PAY, AUTHORIZE, EWAY, OTHER. For transactions that did got go through a processor/gateway, value is MANUAL
     *
     * @return self
     */
    public function setPaymentGatewayType($payment_gateway_type)
    {
        if (is_null($payment_gateway_type)) {
            throw new \InvalidArgumentException('non-nullable payment_gateway_type cannot be null');
        }
        $this->container['payment_gateway_type'] = $payment_gateway_type;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string|null
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string|null $payment_id Reference to the payment record that on successful transactions. No reference if the transaction failed.
     *
     * @return self
     */
    public function setPaymentId($payment_id)
    {
        if (is_null($payment_id)) {
            throw new \InvalidArgumentException('non-nullable payment_id cannot be null');
        }
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \Keap\Core\V2\Model\CurrencyValue|null
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \Keap\Core\V2\Model\CurrencyValue|null $transaction_amount transaction_amount
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets transaction_time
     *
     * @return string|null
     */
    public function getTransactionTime()
    {
        return $this->container['transaction_time'];
    }

    /**
     * Sets transaction_time
     *
     * @param string|null $transaction_time ISO date-time of the transaction. e.g 2024-04-28 11:25:44
     *
     * @return self
     */
    public function setTransactionTime($transaction_time)
    {
        if (is_null($transaction_time)) {
            throw new \InvalidArgumentException('non-nullable transaction_time cannot be null');
        }
        $this->container['transaction_time'] = $transaction_time;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type The type of transaction. Possible values: CAPTURE, VOID, REFUND, CREDIT, APPROVAL
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


